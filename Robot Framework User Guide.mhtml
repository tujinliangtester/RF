From: <Saved by Blink>
Snapshot-Content-Location: http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#demonstrations
Subject: Robot Framework User Guide
Date: Tue, 26 Nov 2019 06:31:43 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----"


------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: text/html
Content-ID: <frame-2F769F02D7554CD55B4FE9B71555D560@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#demonstrations

<!--?xml version=3D"1.0" encoding=3D"utf-8" ?--><!DOCTYPE html PUBLIC "-//W=
3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1=
-transitional.dtd"><html xmlns=3D"http://www.w3.org/1999/xhtml" xml:lang=3D=
"en" lang=3D"en"><head><meta http-equiv=3D"Content-Type" content=3D"text/ht=
ml; charset=3DUTF-8">

<meta name=3D"generator" content=3D"Docutils 0.14: http://docutils.sourcefo=
rge.net/">
<title>Robot Framework User Guide</title>
<style type=3D"text/css">

/* Robot Framework User Guide Style Sheet

   This stylesheet contains styles from restructuredText's default
   'html4css1.css' and after that modifications needed for Robot Framework =
User
   Guide. These styles are added into the same file against suggestions at
   reST's stylesheet HowTo mentioned below, because we want to be able to
   embed all styles into the created HTML file. Everything before 'Robot
   Framework User Guide Modifications' text is from 'html4css1.css' without
   any changes so that part can still be changed easily.
*/


/*
:Author: David Goodger (goodger@python.org)
:Id: $Id: html4css1.css 5196 2007-06-03 20:25:28Z wiemann $
:Copyright: This stylesheet has been placed in the public domain.

Default cascading style sheet for the HTML output of Docutils.

See http://docutils.sf.net/docs/howto/html-stylesheets.html for how to
customize this style sheet.
*/

/* used to remove borders from tables and images */
.borderless, table.borderless td, table.borderless th {
  border: 0 }

table.borderless td, table.borderless th {
  /* Override padding for "table.docutils td" with "! important".
     The right padding separates the table cells. */
  padding: 0 0.5em 0 0 ! important }

.first {
  /* Override more specific margin styles with "! important". */
  margin-top: 0 ! important }

.last, .with-subtitle {
  margin-bottom: 0 ! important }

.hidden {
  display: none }

a.toc-backref {
  text-decoration: none ;
  color: black }

blockquote.epigraph {
  margin: 2em 5em ; }

dl.docutils dd {
  margin-bottom: 0.5em }

/* Uncomment (and remove this text!) to get bold-faced definition list term=
s
dl.docutils dt {
  font-weight: bold }
*/

div.abstract {
  margin: 2em 5em }

div.abstract p.topic-title {
  font-weight: bold ;
  text-align: center }

div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
  margin: 2em ;
  border: medium outset ;
  padding: 1em }

div.admonition p.admonition-title, div.hint p.admonition-title,
div.important p.admonition-title, div.note p.admonition-title,
div.tip p.admonition-title {
  font-weight: bold ;
  font-family: sans-serif }

div.attention p.admonition-title, div.caution p.admonition-title,
div.danger p.admonition-title, div.error p.admonition-title,
div.warning p.admonition-title {
  color: red ;
  font-weight: bold ;
  font-family: sans-serif }

/* Uncomment (and remove this text!) to get reduced vertical space in
   compound paragraphs.
div.compound .compound-first, div.compound .compound-middle {
  margin-bottom: 0.5em }

div.compound .compound-last, div.compound .compound-middle {
  margin-top: 0.5em }
*/

div.dedication {
  margin: 2em 5em ;
  text-align: center ;
  font-style: italic }

div.dedication p.topic-title {
  font-weight: bold ;
  font-style: normal }

div.figure {
  margin-left: 2em ;
  margin-right: 2em }

div.footer, div.header {
  clear: both;
  font-size: smaller }

div.line-block {
  display: block ;
  margin-top: 1em ;
  margin-bottom: 1em }

div.line-block div.line-block {
  margin-top: 0 ;
  margin-bottom: 0 ;
  margin-left: 1.5em }

div.sidebar {
  margin: 0 0 0.5em 1em ;
  border: medium outset ;
  padding: 1em ;
  background-color: #ffffee ;
  width: 40% ;
  float: right ;
  clear: right }

div.sidebar p.rubric {
  font-family: sans-serif ;
  font-size: medium }

div.system-messages {
  margin: 5em }

div.system-messages h1 {
  color: red }

div.system-message {
  border: medium outset ;
  padding: 1em }

div.system-message p.system-message-title {
  color: red ;
  font-weight: bold }

div.topic {
  margin: 2em }

h1.section-subtitle, h2.section-subtitle, h3.section-subtitle,
h4.section-subtitle, h5.section-subtitle, h6.section-subtitle {
  margin-top: 0.4em }

h1.title {
  text-align: center }

h2.subtitle {
  text-align: center }

hr.docutils {
  width: 75% }

img.align-left {
  clear: left }

img.align-right {
  clear: right }

ol.simple, ul.simple {
  margin-bottom: 1em }

ol.arabic {
  list-style: decimal }

ol.loweralpha {
  list-style: lower-alpha }

ol.upperalpha {
  list-style: upper-alpha }

ol.lowerroman {
  list-style: lower-roman }

ol.upperroman {
  list-style: upper-roman }

p.attribution {
  text-align: right ;
  margin-left: 50% }

p.caption {
  font-style: italic }

p.credits {
  font-style: italic ;
  font-size: smaller }

p.label {
  white-space: nowrap }

p.rubric {
  font-weight: bold ;
  font-size: larger ;
  color: maroon ;
  text-align: center }

p.sidebar-title {
  font-family: sans-serif ;
  font-weight: bold ;
  font-size: larger }

p.sidebar-subtitle {
  font-family: sans-serif ;
  font-weight: bold }

p.topic-title {
  font-weight: bold }

pre.address {
  margin-bottom: 0 ;
  margin-top: 0 ;
  font-family: serif ;
  font-size: 100% }

pre.literal-block, pre.doctest-block {
  margin-left: 2em ;
  margin-right: 2em }

span.classifier {
  font-family: sans-serif ;
  font-style: oblique }

span.classifier-delimiter {
  font-family: sans-serif ;
  font-weight: bold }

span.interpreted {
  font-family: sans-serif }

span.option {
  white-space: nowrap }

span.pre {
  white-space: pre }

span.problematic {
  color: red }

span.section-subtitle {
  /* font-size relative to parent (h1..h6 element) */
  font-size: 80% }

table.citation {
  border-left: solid 1px gray;
  margin-left: 1px }

table.docinfo {
  margin: 2em 4em }

table.docutils {
  margin-top: 0.5em ;
  margin-bottom: 0.5em }

table.footnote {
  border-left: solid 1px black;
  margin-left: 1px }

table.docutils td, table.docutils th,
table.docinfo td, table.docinfo th {
  padding-left: 0.5em ;
  padding-right: 0.5em ;
  vertical-align: top }

table.docutils th.field-name, table.docinfo th.docinfo-name {
  font-weight: bold ;
  text-align: left ;
  white-space: nowrap ;
  padding-left: 0 }

h1 tt.docutils, h2 tt.docutils, h3 tt.docutils,
h4 tt.docutils, h5 tt.docutils, h6 tt.docutils {
  font-size: 100% }

ul.auto-toc {
  list-style-type: none }


/* **************************************** *
 * Robot Framework User Guide Modifications *
 * **************************************** */

/* Tables
   - example, tsv-example: test data examples
   - messages: log message examples
   - tabular: normal tabular information
*/
table.example, table.tsv-example, table.messages, table.tabular {
    border: 1px solid #808080;
    border-collapse: collapse;
    margin: 5px 20px;
}
table.example caption, table.tsv-example caption, table.tabular caption {
    text-align: left;
    padding-bottom: 0.5em;
    font-style: italic;
    font-size: 0.9em;
    width: 100%;
}
table.example th, table.example td, table.tsv-example td {
    border: 1px solid #808080;
    font-family: arial,helvetica,sans-serif;
    height: 1.2em;
    font-size: 0.8em;
}
table.example th {
    padding: 0.1em 1em;
    background: #E0E0E0;
}
table.example td, table.tsv-example td {
    padding: 0.1em 1em 0.1em 0.3em;
}
table.tabular th, table.tabular td {
    border: 1px solid black;
    padding: 0.1em 0.3em;
    height: 1.2em;
    font-size: 0.9em;
}
table.messages {
    border: 1px solid gray;
    font-family: monospace;
    margin: 10px 20px;
    width: 60%;
}
table.messages td {
    vertical-align: top;
    padding: 0.1em 0.2em;
}
table.messages td.time {
    width: 7em;
    letter-spacing: -0.05em;
}
table.messages td.level {
    width: 5em;
    text-align: center;
}
table.messages td.fail, table.messages td.error {
    color: red;
}
table.messages td.pass {
    color: #009900;
}
table.messages td.warn {
    color: #FFCC00;
}

/* Documentation formatting examples */

.doc {
    margin-left: 20px;
    margin-right: 20px;
    background: #f4f4f4;
    font-size: 0.9em;
}
.doc > * {
    margin: 0.7em 1em 0.1em 1em;
    padding: 0;
}
.doc > p, .doc > h1, .doc > h2, .doc > h3, .doc > h4 {
    margin: 0.7em 0 0.1em 0;
}
.doc > *:first-child {
    margin-top: 0.1em;
}
.doc table {
    border: 1px solid gray;
    background: transparent;
    border-collapse: collapse;
    empty-cells: show;
    font-size: 0.9em;
}
.doc table th, .doc table td {
    border: 1px solid gray;
    padding: 0.1em 0.3em;
    height: 1.2em;
}
.doc table th {
    text-align: center;
    letter-spacing: 0.1em;
}
.doc pre {
    font-size: 1.1em;
    background: #F4F4FF;
}
.doc li {
    list-style-position: inside;
    list-style-type: square;
}
.doc img {
    border: 1px solid gray;
}
.doc hr {
    background: gray;
    height: 1px;
    border: 0;
}

/* Roles -- explained in roles.rst file */

code, .codesc, .option {
    background: #f4f4f4;
    font-family: monospace;
}
.file {
    font-style: italic;
}
.setting {
    font-style: italic;
    white-space: nowrap;
}
.name {
    font-style: italic;
}

/* Overridden and modified styles */

col.option, kbd .option {
    background: inherit;
}
h1 {
    font-size: 2em;
}
h2 {
    font-size: 1.6em;
}
h3 {
    font-size: 1.4em;
}
h4 {
    font-size: 1.2em;
}
h5 {
    font-size: 1em;
}
cite {
    font-size: 0.95em;
}
div.admonition, div.attention, div.caution, div.danger, div.error,
div.hint, div.important, div.note, div.tip, div.warning {
    border: 1px solid gray;
    margin: 10px 20px;
    padding: 0.7em 1em;
    font-size: 0.9em;
}
pre.literal-block, pre.doctest-block {
    margin-left: 20px;
    margin-right: 20px;
    background: #f4f4f4;
}
li, li p.first {
    margin-top: 0.3em;
    margin-bottom: 0.3em;
}
div.contents li {
    margin-top: 0;
    margin-bottom: 0;
}
a img {
    border: 1px solid blue;
}
div.figure, div.topic {
    margin-left: 20px;
    margin-right: 20px;
}

/* Pygments

- Styles generated using "HtmlFormatter().get_style_defs('.highlight')"
- Changed only background (f8f8f8 -> f4f4f4) and added margin
- For more details see e.g. http://pygments.org/docs/quickstart/
*/

.highlight  { background: #f4f4f4; margin: 10px 20px; }
.highlight .c { color: #408080; font-style: italic } /* Comment */
.highlight .err { border: 1px solid #FF0000 } /* Error */
.highlight .k { color: #008000; font-weight: bold } /* Keyword */
.highlight .o { color: #666666 } /* Operator */
.highlight .cm { color: #408080; font-style: italic } /* Comment.Multiline =
*/
.highlight .cp { color: #BC7A00 } /* Comment.Preproc */
.highlight .c1 { color: #408080; font-style: italic } /* Comment.Single */
.highlight .cs { color: #408080; font-style: italic } /* Comment.Special */
.highlight .gd { color: #A00000 } /* Generic.Deleted */
.highlight .ge { font-style: italic } /* Generic.Emph */
.highlight .gr { color: #FF0000 } /* Generic.Error */
.highlight .gh { color: #000080; font-weight: bold } /* Generic.Heading */
.highlight .gi { color: #00A000 } /* Generic.Inserted */
.highlight .go { color: #808080 } /* Generic.Output */
.highlight .gp { color: #000080; font-weight: bold } /* Generic.Prompt */
.highlight .gs { font-weight: bold } /* Generic.Strong */
.highlight .gu { color: #800080; font-weight: bold } /* Generic.Subheading =
*/
.highlight .gt { color: #0040D0 } /* Generic.Traceback */
.highlight .kc { color: #008000; font-weight: bold } /* Keyword.Constant */
.highlight .kd { color: #008000; font-weight: bold } /* Keyword.Declaration=
 */
.highlight .kp { color: #008000 } /* Keyword.Pseudo */
.highlight .kr { color: #008000; font-weight: bold } /* Keyword.Reserved */
.highlight .kt { color: #B00040 } /* Keyword.Type */
.highlight .m { color: #666666 } /* Literal.Number */
.highlight .s { color: #BA2121 } /* Literal.String */
.highlight .na { color: #7D9029 } /* Name.Attribute */
.highlight .nb { color: #008000 } /* Name.Builtin */
.highlight .nc { color: #0000FF; font-weight: bold } /* Name.Class */
.highlight .no { color: #880000 } /* Name.Constant */
.highlight .nd { color: #AA22FF } /* Name.Decorator */
.highlight .ni { color: #999999; font-weight: bold } /* Name.Entity */
.highlight .ne { color: #D2413A; font-weight: bold } /* Name.Exception */
.highlight .nf { color: #0000FF } /* Name.Function */
.highlight .nl { color: #A0A000 } /* Name.Label */
.highlight .nn { color: #0000FF; font-weight: bold } /* Name.Namespace */
.highlight .nt { color: #008000; font-weight: bold } /* Name.Tag */
.highlight .nv { color: #19177C } /* Name.Variable */
.highlight .ow { color: #AA22FF; font-weight: bold } /* Operator.Word */
.highlight .w { color: #bbbbbb } /* Text.Whitespace */
.highlight .mf { color: #666666 } /* Literal.Number.Float */
.highlight .mh { color: #666666 } /* Literal.Number.Hex */
.highlight .mi { color: #666666 } /* Literal.Number.Integer */
.highlight .mo { color: #666666 } /* Literal.Number.Oct */
.highlight .sb { color: #BA2121 } /* Literal.String.Backtick */
.highlight .sc { color: #BA2121 } /* Literal.String.Char */
.highlight .sd { color: #BA2121; font-style: italic } /* Literal.String.Doc=
 */
.highlight .s2 { color: #BA2121 } /* Literal.String.Double */
.highlight .se { color: #BB6622; font-weight: bold } /* Literal.String.Esca=
pe */
.highlight .sh { color: #BA2121 } /* Literal.String.Heredoc */
.highlight .si { color: #BB6688; font-weight: bold } /* Literal.String.Inte=
rpol */
.highlight .sx { color: #008000 } /* Literal.String.Other */
.highlight .sr { color: #BB6688 } /* Literal.String.Regex */
.highlight .s1 { color: #BA2121 } /* Literal.String.Single */
.highlight .ss { color: #19177C } /* Literal.String.Symbol */
.highlight .bp { color: #008000 } /* Name.Builtin.Pseudo */
.highlight .vc { color: #19177C } /* Name.Variable.Class */
.highlight .vg { color: #19177C } /* Name.Variable.Global */
.highlight .vi { color: #19177C } /* Name.Variable.Instance */
.highlight .il { color: #666666 } /* Literal.Number.Integer.Long */

</style>
</head>
<body>
<div class=3D"document" id=3D"robot-framework-user-guide">
<h1 class=3D"title">Robot Framework User Guide</h1>
<h2 class=3D"subtitle" id=3D"version-version">Version 3.1.2</h2>

<!-- This data file has been placed in the public domain. -->
<!-- Derived from the Unicode character mappings available from
<http://www.w3.org/2003/entities/xml/>.
Processed by unicode2rstsubs.py, part of Docutils:
<http://docutils.sourceforge.net>. -->
<!-- Roles are used like :role:`example` or via aliases. Styled in userguid=
e.css.

Standard reST roles
- - - - - - - - - - - - - - - - - - -

Standard roles are used as much as possible. There are others but these
make most sense in our context. For more information see
http://docutils.sourceforge.net/docs/ref/rst/roles.html

code       Code, CLI examples, GUI entries, variables, etc. Alias `example`
           configured below.
literal    Program and environment variable names (e.g. :literel:`rebot`).
           Alias ``example``.
emphasis   In practice italics. Used with some terms. Alias *example*.
strong     In practice bold. Alias **example**.

Sphinx roles
- - - - - - - - - - - -

Need to be defined here but using these eases migrating to Sphinx in the
future. For details see http://sphinx-doc.org/markup/inline.html

option     Command line options. Notice that examples should use code role.
           Notice also that standard reST uses option class in option lists=
.
file       File and directory paths.

Custom roles
- - - - - - - - - - - -

Our own custom rules.

setting    Setting names (e.g. :setting:`Library`, :setting:`[Setup]`).
name       Keyword, library, test case and test suite names
codesc     Formatted like standard code role but supports escaping.
           For example, output of :codesc:`\`example\`` is `example`, not
           \`example\`. -->
<div class=3D"line-block">
<div class=3D"line">Copyright =C2=A9 2008-2015 Nokia Networks</div>
<div class=3D"line">Copyright =C2=A9 2016- Robot Framework Foundation</div>
<div class=3D"line">Licensed under the <a class=3D"reference external" href=
=3D"http://creativecommons.org/licenses/by/3.0">Creative Commons Attributio=
n 3.0 Unported</a> license</div>
</div>
<div class=3D"contents topic" id=3D"table-of-contents">
<p class=3D"topic-title first">Table of Contents</p>
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-started" id=3D"id426"=
>1&nbsp;&nbsp;&nbsp;Getting started</a><ul class=3D"auto-toc">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#introduction" id=3D"id427">1.=
1&nbsp;&nbsp;&nbsp;Introduction</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#copyright-and-license" id=3D"=
id428">1.2&nbsp;&nbsp;&nbsp;Copyright and license</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#installation-instructions" id=
=3D"id429">1.3&nbsp;&nbsp;&nbsp;Installation instructions</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#demonstrations" id=3D"id430">=
1.4&nbsp;&nbsp;&nbsp;Demonstrations</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-test-data" id=3D"id4=
31">2&nbsp;&nbsp;&nbsp;Creating test data</a><ul class=3D"auto-toc">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-data-syntax" id=3D"id432=
">2.1&nbsp;&nbsp;&nbsp;Test data syntax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-test-cases" id=3D"id=
433">2.2&nbsp;&nbsp;&nbsp;Creating test cases</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-tasks" id=3D"id434">=
2.3&nbsp;&nbsp;&nbsp;Creating tasks</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-test-suites" id=3D"i=
d435">2.4&nbsp;&nbsp;&nbsp;Creating test suites</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-test-libraries" id=3D"i=
d436">2.5&nbsp;&nbsp;&nbsp;Using test libraries</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variables" id=3D"id437">2.6&n=
bsp;&nbsp;&nbsp;Variables</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-user-keywords" id=3D=
"id438">2.7&nbsp;&nbsp;&nbsp;Creating user keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#resource-and-variable-files" =
id=3D"id439">2.8&nbsp;&nbsp;&nbsp;Resource and variable files</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#advanced-features" id=3D"id44=
0">2.9&nbsp;&nbsp;&nbsp;Advanced features</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#executing-test-cases" id=3D"i=
d441">3&nbsp;&nbsp;&nbsp;Executing test cases</a><ul class=3D"auto-toc">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id172" id=3D"id442">3.1&nbsp;=
&nbsp;&nbsp;Basic usage</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-execution" id=3D"id443">=
3.2&nbsp;&nbsp;&nbsp;Test execution</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#task-execution" id=3D"id444">=
3.3&nbsp;&nbsp;&nbsp;Task execution</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#post-processing-outputs" id=
=3D"id445">3.4&nbsp;&nbsp;&nbsp;Post-processing outputs</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#configuring-execution" id=3D"=
id446">3.5&nbsp;&nbsp;&nbsp;Configuring execution</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#created-outputs" id=3D"id447"=
>3.6&nbsp;&nbsp;&nbsp;Created outputs</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#extending-robot-framework" id=
=3D"id448">4&nbsp;&nbsp;&nbsp;Extending Robot Framework</a><ul class=3D"aut=
o-toc">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-test-libraries" id=
=3D"id449">4.1&nbsp;&nbsp;&nbsp;Creating test libraries</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#remote-library-interface" id=
=3D"id450">4.2&nbsp;&nbsp;&nbsp;Remote library interface</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#listener-interface" id=3D"id4=
51">4.3&nbsp;&nbsp;&nbsp;Listener interface</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#extending-the-robot-framework=
-jar" id=3D"id452">4.4&nbsp;&nbsp;&nbsp;Extending the Robot Framework Jar</=
a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#supporting-tools" id=3D"id453=
">5&nbsp;&nbsp;&nbsp;Supporting Tools</a><ul class=3D"auto-toc">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#library-documentation-tool-li=
bdoc" id=3D"id454">5.1&nbsp;&nbsp;&nbsp;Library documentation tool (Libdoc)=
</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-data-documentation-tool-=
testdoc" id=3D"id455">5.2&nbsp;&nbsp;&nbsp;Test data documentation tool (Te=
stdoc)</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-data-clean-up-tool-tidy"=
 id=3D"id456">5.3&nbsp;&nbsp;&nbsp;Test data clean-up tool (Tidy)</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#external-tools" id=3D"id457">=
5.4&nbsp;&nbsp;&nbsp;External tools</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#appendices" id=3D"id458">6&nb=
sp;&nbsp;&nbsp;Appendices</a><ul class=3D"auto-toc">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#all-available-settings-in-tes=
t-data" id=3D"id459">6.1&nbsp;&nbsp;&nbsp;All available settings in test da=
ta</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#all-command-line-options" id=
=3D"id460">6.2&nbsp;&nbsp;&nbsp;All command line options</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#documentation-formatting" id=
=3D"id461">6.3&nbsp;&nbsp;&nbsp;Documentation formatting</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#time-format" id=3D"id462">6.4=
&nbsp;&nbsp;&nbsp;Time format</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#boolean-arguments" id=3D"id46=
3">6.5&nbsp;&nbsp;&nbsp;Boolean arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#internal-api" id=3D"id464">6.=
6&nbsp;&nbsp;&nbsp;Internal API</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"getting-started">
<h1><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id426">1&nbsp;&nbsp;&nbsp;Getting st=
arted</a></h1>
<div class=3D"contents local topic" id=3D"contents">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#introduction" id=3D"id465">1.=
1&nbsp;&nbsp;&nbsp;Introduction</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#copyright-and-license" id=3D"=
id466">1.2&nbsp;&nbsp;&nbsp;Copyright and license</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#installation-instructions" id=
=3D"id467">1.3&nbsp;&nbsp;&nbsp;Installation instructions</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#demonstrations" id=3D"id468">=
1.4&nbsp;&nbsp;&nbsp;Demonstrations</a></li>
</ul>
</div>
<div class=3D"section" id=3D"introduction">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id465">1.1&nbsp;&nbsp;&nbsp;Introduc=
tion</a></h2>
<p>Robot Framework is a Python-based, extensible keyword-driven automation
framework for acceptance testing, acceptance test driven development (ATDD)=
,
behavior driven development (BDD) and robotic process automation (RPA). It
can be used in distributed, heterogeneous environments, where automation
requires using different technologies and interfaces.</p>
<p>The framework has a rich ecosystem around it consisting of various gener=
ic
libraries and tools that are developed as separate projects. For more
information about Robot Framework and the ecosystem, see
<a class=3D"reference external" href=3D"http://robotframework.org/">http://=
robotframework.org</a>.</p>
<p>Robot Framework is open source software released under the <a class=3D"r=
eference external" href=3D"http://apache.org/licenses/LICENSE-2.0">Apache L=
icense
2.0</a>. Its development is sponsored by the <a class=3D"reference external=
" href=3D"http://robotframework.org/foundation">Robot Framework Foundation<=
/a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The official RRA support was added in Robot Framework 3.1=
.
This User Guide still talks mainly about creating tests, test data,
and test libraries, but same concepts apply also when <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#creating-tasks">creating
tasks</a>.</p>
</div>
<div class=3D"contents local topic" id=3D"id1">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#why-robot-framework" id=3D"id=
469">1.1.1&nbsp;&nbsp;&nbsp;Why Robot Framework?</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#high-level-architecture" id=
=3D"id470">1.1.2&nbsp;&nbsp;&nbsp;High-level architecture</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#screenshots" id=3D"id471">1.1=
.3&nbsp;&nbsp;&nbsp;Screenshots</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-more-information" id=
=3D"id472">1.1.4&nbsp;&nbsp;&nbsp;Getting more information</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#project-pages" id=3D"id473">P=
roject pages</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#mailing-lists" id=3D"id474">M=
ailing lists</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"why-robot-framework">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id469">1.1.1&nbsp;&nbsp;&nbsp;Why Ro=
bot Framework?</a></h3>
<ul class=3D"simple">
<li>Enables easy-to-use tabular syntax for <a class=3D"reference internal" =
href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserG=
uide.html#creating-test-cases">creating test cases</a> in a uniform
way.</li>
<li>Provides ability to create reusable <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#creating-user-keywords">higher-level keywords</a> from the
existing keywords.</li>
<li>Provides easy-to-read result <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
report-file">reports</a> and <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#log-=
file">logs</a> in HTML format.</li>
<li>Is platform and application independent.</li>
<li>Provides a simple <a class=3D"reference internal" href=3D"http://robotf=
ramework.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-te=
st-libraries">library API</a> for creating customized test libraries
which can be implemented natively with either Python or Java.</li>
<li>Provides a <a class=3D"reference internal" href=3D"http://robotframewor=
k.org/robotframework/latest/RobotFrameworkUserGuide.html#id175">command lin=
e interface</a> and XML based <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#out=
put-file">output files</a>  for
integration into existing build infrastructure (continuous integration
systems).</li>
<li>Provides support for Selenium for web testing, Java GUI testing, runnin=
g
processes, Telnet, SSH, and so on.</li>
<li>Supports creating <a class=3D"reference internal" href=3D"http://robotf=
ramework.org/robotframework/latest/RobotFrameworkUserGuide.html#data-driven=
-style">data-driven test cases</a>.</li>
<li>Has built-in support for <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#vari=
ables">variables</a>, practical particularly for testing in
different environments.</li>
<li>Provides <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#tagging-test-cases">=
tagging</a> to categorize and <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#sel=
ecting-test-cases">select test cases</a> to be executed.</li>
<li>Enables easy integration with source control: <a class=3D"reference ext=
ernal" href=3D"http://robot-framework.readthedocs.org/en/master/autodoc/rob=
ot.running.html#robot.running.model.TestSuite">test suites</a> are just fil=
es
and directories that can be versioned with the production code.</li>
<li>Provides <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#test-setup-and-teard=
own">test-case</a> and <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#suite-setu=
p-and-teardown">test-suite</a> -level setup and teardown.</li>
<li>The modular architecture supports creating tests even for applications =
with
several diverse interfaces.</li>
</ul>
</div>
<div class=3D"section" id=3D"high-level-architecture">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id470">1.1.2&nbsp;&nbsp;&nbsp;High-l=
evel architecture</a></h3>
<p>Robot Framework is a generic, application and technology independent
framework. It has a highly modular architecture illustrated in the
diagram below.</p>
<div class=3D"figure">
<img alt=3D"src/GettingStarted/architecture.png" src=3D"http://robotframewo=
rk.org/robotframework/latest/images/architecture.png">
<p class=3D"caption">Robot Framework architecture</p>
</div>
<p>The <a class=3D"reference internal" href=3D"http://robotframework.org/ro=
botframework/latest/RobotFrameworkUserGuide.html#creating-test-data">test d=
ata</a> is in simple, easy-to-edit tabular format. When
Robot Framework is started, it processes the data, <a class=3D"reference in=
ternal" href=3D"http://robotframework.org/robotframework/latest/RobotFramew=
orkUserGuide.html#id175">executes test
cases</a> and generates logs and reports. The core framework does not
know anything about the target under test, and the interaction with it
is handled by <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-test-libra=
ries">libraries</a>. Libraries can either use application
interfaces directly or use lower level test tools as drivers.</p>
</div>
<div class=3D"section" id=3D"screenshots">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id471">1.1.3&nbsp;&nbsp;&nbsp;Screen=
shots</a></h3>
<p>Following screenshots show examples of the <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#creating-test-data">test data</a> and created
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#report-file">reports</a> and <a c=
lass=3D"reference internal" href=3D"http://robotframework.org/robotframewor=
k/latest/RobotFrameworkUserGuide.html#log-file">logs</a>.</p>
<div class=3D"figure">
<img alt=3D"src/GettingStarted/testdata_screenshots.png" src=3D"http://robo=
tframework.org/robotframework/latest/images/testdata_screenshots.png">
<p class=3D"caption">Test case files</p>
</div>
<div class=3D"figure">
<img alt=3D"src/GettingStarted/screenshots.png" src=3D"http://robotframewor=
k.org/robotframework/latest/images/screenshots.png">
<p class=3D"caption">Reports and logs</p>
</div>
</div>
<div class=3D"section" id=3D"getting-more-information">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id472">1.1.4&nbsp;&nbsp;&nbsp;Gettin=
g more information</a></h3>
<div class=3D"section" id=3D"project-pages">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id473">Project pages</a></h4>
<p>The number one place to find more information about Robot Framework
and the rich ecosystem around it is <a class=3D"reference external" href=3D=
"http://robotframework.org/">http://robotframework.org</a>.
Robot Framework itself is hosted on <a class=3D"reference external" href=3D=
"https://github.com/robotframework/robotframework">GitHub</a>.</p>
</div>
<div class=3D"section" id=3D"mailing-lists">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id474">Mailing lists</a></h4>
<p>There are several Robot Framework mailing lists where to ask and
search for more information. The mailing list archives are open for
everyone (including the search engines) and everyone can also join
these lists freely. Only list members can send mails, though, and to
prevent spam new users are moderated which means that it might take a
little time before your first message goes through.  Do not be afraid
to send question to mailing lists but remember <a class=3D"reference extern=
al" href=3D"http://www.catb.org/~esr/faqs/smart-questions.html">How To Ask =
Questions
The Smart Way</a>.</p>
<dl class=3D"docutils">
<dt><a class=3D"reference external" href=3D"http://groups.google.com/group/=
robotframework-users">robotframework-users</a></dt>
<dd>General discussion about all Robot Framework related
issues. Questions and problems can be sent to this list. Used also
for information sharing for all users.</dd>
<dt><a class=3D"reference external" href=3D"http://groups.google.com/group/=
robotframework-announce">robotframework-announce</a></dt>
<dd>An announcements-only mailing list where only moderators can send
messages. All announcements are sent also to the
robotframework-users mailing list so there is no need to join both
lists.</dd>
<dt><a class=3D"reference external" href=3D"http://groups.google.com/group/=
robotframework-devel">robotframework-devel</a></dt>
<dd>Discussion about Robot Framework development.</dd>
</dl>
</div>
</div>
</div>
<div class=3D"section" id=3D"copyright-and-license">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id466">1.2&nbsp;&nbsp;&nbsp;Copyrigh=
t and license</a></h2>
<p>Robot Framework is open source software provided under the <a class=3D"r=
eference external" href=3D"http://apache.org/licenses/LICENSE-2.0">Apache L=
icense
2.0</a>. Robot Framework documentation such as this User Guide use the
<a class=3D"reference external" href=3D"http://creativecommons.org/licenses=
/by/3.0">Creative Commons Attribution 3.0 Unported</a> license. Most librar=
ies and tools
in the larger ecosystem around the framework are also open source, but they
may use different licenses.</p>
<p>The full Robot Framework copyright notice is included below:</p>
<pre class=3D"literal-block">Copyright 2008-2015 Nokia Networks
Copyright 2016-     Robot Framework Foundation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

</pre>
<!-- INSTALL.rst is copied from project root by ug2html.py -->
</div>
<div class=3D"section" id=3D"installation-instructions">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id467">1.3&nbsp;&nbsp;&nbsp;Installa=
tion instructions</a></h2>
<p>These instructions cover installing and uninstalling Robot Framework and=
 its
preconditions on different operating systems. If you already have <a class=
=3D"reference external" href=3D"http://pip-installer.org/">pip</a> installe=
d, it is enough to run:</p>
<pre class=3D"literal-block">pip install robotframework
</pre>
<div class=3D"contents local topic" id=3D"id15">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id16" id=3D"id475">1.3.1&nbsp=
;&nbsp;&nbsp;Introduction</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#preconditions" id=3D"id476">1=
.3.2&nbsp;&nbsp;&nbsp;Preconditions</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#python-2-vs-python-3" id=3D"i=
d477">Python 2 vs Python 3</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#python-installation" id=3D"id=
478">Python installation</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#jython-installation" id=3D"id=
479">Jython installation</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#ironpython-installation" id=
=3D"id480">IronPython installation</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#pypy-installation" id=3D"id48=
1">PyPy installation</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#configuring-path" id=3D"id482=
">Configuring <tt class=3D"docutils literal">PATH</tt></a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-https-proxy" id=3D"id=
483">Setting <tt class=3D"docutils literal">https_proxy</tt></a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#installing-with-pip" id=3D"id=
484">1.3.3&nbsp;&nbsp;&nbsp;Installing with pip</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#installing-pip-for-python" id=
=3D"id485">Installing pip for Python</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#installing-pip-for-jython" id=
=3D"id486">Installing pip for Jython</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#installing-pip-for-ironpython=
" id=3D"id487">Installing pip for IronPython</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#installing-pip-for-pypy" id=
=3D"id488">Installing pip for PyPy</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-pip" id=3D"id489">Using=
 pip</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#installing-from-source" id=3D=
"id490">1.3.4&nbsp;&nbsp;&nbsp;Installing from source</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-source-code" id=3D"id=
491">Getting source code</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#installation" id=3D"id492">In=
stallation</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#standalone-jar-distribution" =
id=3D"id493">1.3.5&nbsp;&nbsp;&nbsp;Standalone JAR distribution</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#manual-installation" id=3D"id=
494">1.3.6&nbsp;&nbsp;&nbsp;Manual installation</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#verifying-installation" id=3D=
"id495">1.3.7&nbsp;&nbsp;&nbsp;Verifying installation</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#where-files-are-installed" id=
=3D"id496">Where files are installed</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#uninstallation" id=3D"id497">=
1.3.8&nbsp;&nbsp;&nbsp;Uninstallation</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#upgrading" id=3D"id498">1.3.9=
&nbsp;&nbsp;&nbsp;Upgrading</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#executing-robot-framework" id=
=3D"id499">1.3.10&nbsp;&nbsp;&nbsp;Executing Robot Framework</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-robot-and-rebot-scripts=
" id=3D"id500">Using <tt class=3D"docutils literal">robot</tt> and <tt clas=
s=3D"docutils literal">rebot</tt> scripts</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#executing-installed-robot-mod=
ule" id=3D"id501">Executing installed <tt class=3D"docutils literal">robot<=
/tt> module</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#executing-installed-robot-dir=
ectory" id=3D"id502">Executing installed <tt class=3D"docutils literal">rob=
ot</tt> directory</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-virtual-environments" i=
d=3D"id503">1.3.11&nbsp;&nbsp;&nbsp;Using virtual environments</a></li>
</ul>
</div>
<div class=3D"section" id=3D"id16">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id475">1.3.1&nbsp;&nbsp;&nbsp;Introd=
uction</a></h3>
<p><a class=3D"reference external" href=3D"http://robotframework.org/">Robo=
t Framework</a> is implemented with <a class=3D"reference external" href=3D=
"http://python.org/">Python</a> and supports also <a class=3D"reference ext=
ernal" href=3D"http://jython.org/">Jython</a> (JVM),
<a class=3D"reference external" href=3D"http://ironpython.net/">IronPython<=
/a> (.NET) and <a class=3D"reference external" href=3D"http://pypy.org/">Py=
Py</a>.
Before installing the framework, an obvious <a class=3D"reference internal"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#preconditions">precondition</a> is installing at
least one of these interpreters.</p>
<p>Different ways to install Robot Framework itself are listed below and ex=
plained
more thoroughly in the subsequent sections.</p>
<dl class=3D"docutils">
<dt><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#installing-with-pip">Installi=
ng with pip</a></dt>
<dd><p class=3D"first">Using <a class=3D"reference external" href=3D"http:/=
/pip-installer.org/">pip</a> is the recommended way to install Robot Framew=
ork. As the
standard Python package manager it is included in the latest Python,
Jython and IronPython versions. If you already have pip available, you
can simply execute:</p>
<pre class=3D"last literal-block">pip install robotframework
</pre>
</dd>
<dt><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#installing-from-source">Insta=
lling from source</a></dt>
<dd>This approach works regardless the operating system and the Python
interpreter used. You can get the source code either by downloading a
source distribution from <a class=3D"reference external" href=3D"https://py=
pi.python.org/pypi/robotframework">PyPI</a>
and extracting it, or by cloning the
<a class=3D"reference external" href=3D"https://github.com/robotframework/r=
obotframework">GitHub repository</a> .</dd>
<dt><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#standalone-jar-distribution">=
Standalone JAR distribution</a></dt>
<dd>If running tests with Jython is enough, the easiest approach is downloa=
ding
the standalone <tt class=3D"docutils literal"><span class=3D"pre">robotfram=
ework-&lt;version&gt;.jar</span></tt> from <a class=3D"reference external" =
href=3D"http://search.maven.org/#search%7Cga%7C1%7Ca%3Arobotframework">Mave=
n central</a>.
The JAR distribution contains both Jython and Robot Framework and thus
only requires having <a class=3D"reference external" href=3D"http://java.co=
m/">Java</a> installed.</dd>
<dt><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#manual-installation">Manual i=
nstallation</a></dt>
<dd>If you have special needs and nothing else works, you can always do
a custom manual installation.</dd>
</dl>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.0, there were also separate Wi=
ndows
installers for 32bit and 64bit Python versions. Because Python 2.7.9 and
newer contain <a class=3D"reference external" href=3D"http://pip-installer.=
org/">pip</a> on Windows and Python 3 would have needed two
more installers, it was decided that <a class=3D"reference external" href=
=3D"https://github.com/robotframework/robotframework/issues/2218">Windows i=
nstallers are not
created anymore</a>. The recommend installation approach also on
Windows is <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#using-pip">using pip</=
a>.</p>
</div>
</div>
<div class=3D"section" id=3D"preconditions">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id476">1.3.2&nbsp;&nbsp;&nbsp;Precon=
ditions</a></h3>
<p>Robot Framework is supported on <a class=3D"reference external" href=3D"=
http://python.org/">Python</a> (both Python 2 and Python 3), <a class=3D"re=
ference external" href=3D"http://jython.org/">Jython</a>
(JVM) and <a class=3D"reference external" href=3D"http://ironpython.net/">I=
ronPython</a> (.NET) and <a class=3D"reference external" href=3D"http://pyp=
y.org/">PyPy</a>. The interpreter you want to use should
be installed before installing the framework itself.</p>
<p>Which interpreter to use depends on the needed test libraries and test
environment in general. Some libraries use tools or modules that only work
with Python, while others may use Java tools that require Jython or need
.NET and thus IronPython. There are also many tools and libraries that run
fine with all interpreters.</p>
<p>If you do not have special needs or just want to try out the framework,
it is recommended to use Python. It is the most mature implementation,
considerably faster than Jython or IronPython (especially start-up time is
faster), and also readily available on most UNIX-like operating systems.
Another good alternative is using the <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#standalone-jar-distribution">standalone JAR distribution</a> that
only has Java as a precondition.</p>
<div class=3D"section" id=3D"python-2-vs-python-3">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id477">Python 2 vs Python 3</a></h4>
<p>Python 2 and Python 3 are mostly the same language, but they are not ful=
ly
compatible with each others. The main difference is that in Python 3 all
strings are Unicode while in Python 2 strings are bytes by default, but the=
re
are also several other backwards incompatible changes. The last Python 2
release is Python 2.7 that was released in 2010 and will be supported until
2020. See <a class=3D"reference external" href=3D"https://wiki.python.org/m=
oin/Python2orPython3">Should I use Python 2 or 3?</a> for more information =
about the
differences, which version to use, how to write code that works with both
versions, and so on.</p>
<p>Robot Framework 3.0 is the first Robot Framework version to support Pyth=
on 3.
It supports also Python 2, and the plan is to continue Python 2 support as
long as Python 2 itself is officially supported. We hope that authors of th=
e
libraries and tools in the wider Robot Framework ecosystem also start looki=
ng
at Python 3 support now that the core framework supports it.</p>
</div>
<div class=3D"section" id=3D"python-installation">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id478">Python installation</a></h4>
<p>On most UNIX-like systems such as Linux and OS X you have <a class=3D"re=
ference external" href=3D"http://python.org/">Python</a> installed
by default. If you are on Windows or otherwise need to install Python yours=
elf,
a good place to start is <a class=3D"reference external" href=3D"http://pyt=
hon.org/">http://python.org</a>. There you can download a suitable
installer and get more information about the installation process and Pytho=
n
in general.</p>
<p>Robot Framework 3.0 supports Python 2.6, 2.7, 3.3 and newer, but the pla=
n is
to <a class=3D"reference external" href=3D"https://github.com/robotframewor=
k/robotframework/issues/2276">drop Python 2.6 and 3.3 support in RF 3.1</a>=
. If you need to use older
versions, Robot Framework 2.5-2.8 support Python 2.5 and Robot Framework
2.0-2.1 support Python 2.3 and 2.4.</p>
<p>After installing Python, you probably still want to configure <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#configuring-path">PATH</a> to make
Python itself as well as the <tt class=3D"docutils literal">robot</tt> and =
<tt class=3D"docutils literal">rebot</tt> <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#using-robot-and-rebot-scripts">runner scripts</a>
executable on the command line.</p>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p class=3D"last">Latest Python Windows installers allow setting <tt class=
=3D"docutils literal">PATH</tt> as part of
the installation. This is disabled by default, but <code>Add python.exe
to Path</code> can be enabled on the <code>Customize Python</code> screen.<=
/p>
</div>
</div>
<div class=3D"section" id=3D"jython-installation">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id479">Jython installation</a></h4>
<p>Using test libraries implemented with <a class=3D"reference external" hr=
ef=3D"http://java.com/">Java</a> or that use Java tools internally
requires running Robot Framework on <a class=3D"reference external" href=3D=
"http://jython.org/">Jython</a>, which in turn requires Java
Runtime Environment (JRE) or Java Development Kit (JDK). Installing either
of these Java distributions is out of the scope of these instructions, but
you can find more information, for example, from <a class=3D"reference exte=
rnal" href=3D"http://java.com/">http://java.com</a>.</p>
<p>Installing Jython is a fairly easy procedure, and the first step is gett=
ing
an installer from <a class=3D"reference external" href=3D"http://jython.org=
/">http://jython.org</a>. The installer is an executable JAR
package, which you can run from the command line like <code>java -jar
jython_installer-&lt;version&gt;.jar</code>. Depending on the  system confi=
guration,
it may also be possible to just double-click the installer.</p>
<p>Robot Framework 3.0 supports Jython 2.7 which requires Java 7 or newer.
If older Jython or Java versions are needed, Robot Framework 2.5-2.8 suppor=
t
Jython 2.5 (requires Java 5 or newer) and Robot Framework 2.0-2.1 support
Jython 2.2.</p>
<p>After installing Jython, you probably still want to configure <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#configuring-path">PATH</a> to make
Jython itself as well as the <tt class=3D"docutils literal">robot</tt> and =
<tt class=3D"docutils literal">rebot</tt> <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#using-robot-and-rebot-scripts">runner scripts</a>
executable on the command line.</p>
</div>
<div class=3D"section" id=3D"ironpython-installation">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id480">IronPython installation</a></=
h4>
<p><a class=3D"reference external" href=3D"http://ironpython.net/">IronPyth=
on</a> allows running Robot Framework on the <a class=3D"reference external=
" href=3D"http://www.microsoft.com/net">.NET platform</a> and interacting w=
ith C# and other .NET
languages and APIs. Only IronPython 2.7 is supported in general and
IronPython 2.7.9 or newer is highly recommended.</p>
<p>If not using IronPython 2.7.9 or newer and Robot Framework 3.1 or newer,
an additional requirement is installing
<a class=3D"reference external" href=3D"http://effbot.org/downloads/#elemen=
ttree">ElementTree</a>
module 1.2.7 preview release. This is required because the ElementTree
module distributed with older IronPython versions was broken. Once you
have <a class=3D"reference internal" href=3D"http://robotframework.org/robo=
tframework/latest/RobotFrameworkUserGuide.html#installing-pip-for-ironpytho=
n">pip activated for IronPython</a>, you can easily install ElementTree
using this command:</p>
<div class=3D"highlight"><pre><span></span>ipy -m pip install http://effbot=
.org/media/downloads/elementtree-1.2.7-20070827-preview.zip
</pre></div>
<p>Alternatively you can download the zip package, extract it, and install =
it by
running <tt class=3D"docutils literal">ipy setup.py install</tt> on the com=
mand prompt in the created directory.</p>
<p>After installing IronPython, you probably still want to configure <a cla=
ss=3D"reference internal" href=3D"http://robotframework.org/robotframework/=
latest/RobotFrameworkUserGuide.html#configuring-path">PATH</a> to make
IronPython itself as well as the <tt class=3D"docutils literal">robot</tt> =
and <tt class=3D"docutils literal">rebot</tt> <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#using-robot-and-rebot-scripts">runner scripts</a>
executable on the command line.</p>
</div>
<div class=3D"section" id=3D"pypy-installation">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id481">PyPy installation</a></h4>
<p><a class=3D"reference external" href=3D"http://pypy.org/">PyPy</a> is an=
 alternative implementation of the Python language with both Python 2
and Python 3 compatible versions available. Its main advantage over the
standard Python implementation is that it can be faster and use less memory=
,
but this depends on the context where and how it is used. If execution spee=
d
is important, at least testing PyPY is probably a good idea.</p>
<p>Installing PyPy is a straightforward procedure and you can find both ins=
tallers
and installation instructions at <a class=3D"reference external" href=3D"ht=
tp://pypy.org/">http://pypy.org</a>. After installation you
probably still want to configure <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
configuring-path">PATH</a> to make PyPy itself as well as the
<tt class=3D"docutils literal">robot</tt> and <tt class=3D"docutils literal=
">rebot</tt> <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#using-robot-and-rebo=
t-scripts">runner scripts</a> executable on the command line.</p>
</div>
<div class=3D"section" id=3D"configuring-path">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id482">Configuring <tt class=3D"docu=
tils literal">PATH</tt></a></h4>
<p>The <tt class=3D"docutils literal">PATH</tt> environment variable lists =
locations where commands executed in
a system are searched from. To make using Robot Framework easier from the
command prompt, it is recommended to add the locations where the <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#using-robot-and-rebot-scripts">runner
scripts</a> are installed into the <tt class=3D"docutils literal">PATH</tt>=
. It is also often useful to have
the interpreter itself in the <tt class=3D"docutils literal">PATH</tt> to m=
ake executing it easy.</p>
<p>When using Python on UNIX-like machines both Python itself and scripts
installed with should be automatically in the <tt class=3D"docutils literal=
">PATH</tt> and no extra actions
needed. On Windows and with other interpreters the <tt class=3D"docutils li=
teral">PATH</tt> must be configured
separately.</p>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p class=3D"last">Latest Python Windows installers allow setting <tt class=
=3D"docutils literal">PATH</tt> as part of
the installation. This is disabled by default, but <code>Add python.exe
to Path</code> can be enabled on the <code>Customize Python</code> screen. =
It will
add both the Python installation directory and the <span class=3D"file">Scr=
ipts</span>
directory to the <tt class=3D"docutils literal">PATH</tt>.</p>
</div>
<div class=3D"section" id=3D"what-directories-to-add-to-path">
<h5>What directories to add to <tt class=3D"docutils literal">PATH</tt></h5=
>
<p>What directories you need to add to the <tt class=3D"docutils literal">P=
ATH</tt> depends on the interpreter and
the operating system. The first location is the installation directory of
the interpreter (e.g. <span class=3D"file">C:\Python27</span>) and the othe=
r is the location
where scripts are installed with that interpreter. Both Python and IronPyth=
on
install scripts to <span class=3D"file">Scripts</span> directory under the =
installation directory
on Windows (e.g. <span class=3D"file">C:\Python27\Scripts</span>) and Jytho=
n uses <span class=3D"file">bin</span>
directory regardless the operating system (e.g. <span class=3D"file">C:\jyt=
hon2.7.0\bin</span>).</p>
<p>Notice that the <span class=3D"file">Scripts</span> and <span class=3D"f=
ile">bin</span> directories may not be created
as part of the interpreter installation, but only later when Robot Framewor=
k
or some other third party module is installed.</p>
</div>
<div class=3D"section" id=3D"setting-path-on-windows">
<h5>Setting <tt class=3D"docutils literal">PATH</tt> on Windows</h5>
<p>On Windows you can configure <tt class=3D"docutils literal">PATH</tt> by=
 following the steps below. Notice
that the exact setting names may be different on different Windows versions=
,
but the basic approach should still be the same.</p>
<ol class=3D"arabic simple">
<li>Open <code>Control Panel &gt; System &gt; Advanced &gt; Environment Var=
iables</code>. There
are <code>User variables</code> and <code>System variables</code>, and the =
difference between
them is that user variables affect only the current users, whereas system
variables affect all users.</li>
<li>To edit an existing <tt class=3D"docutils literal">PATH</tt> value, sel=
ect <code>Edit</code> and add
<code>;&lt;InstallationDir&gt;;&lt;ScriptsDir&gt;</code> at the end of the =
value (e.g.
<code>;C:\Python27;C:\Python27\Scripts</code>). Note that the semicolons (<=
code>;</code>) are
important as they separate the different entries. To add a new <tt class=3D=
"docutils literal">PATH</tt>
value, select <code>New</code> and set both the name and the value, this ti=
me without
the leading semicolon.</li>
<li>Exit the dialog with <code>Ok</code> to save the changes.</li>
<li>Start a new command prompt for the changes to take effect.</li>
</ol>
<p>Notice that if you have multiple Python versions installed, the executed
<tt class=3D"docutils literal">robot</tt> or <tt class=3D"docutils literal"=
>rebot</tt> <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#using-robot-and-rebot=
-scripts">runner script</a> will always use the one that is
<em>first</em> in the <tt class=3D"docutils literal">PATH</tt> regardless u=
nder what Python version that script is
installed. To avoid that, you can always execute the <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#executing-installed-robot-module">installed robot modul=
e
directly</a> like <code>C:\Python27\python.exe -m robot</code>.</p>
<p>Notice also that you should not add quotes around directories you add in=
to
the <tt class=3D"docutils literal">PATH</tt> (e.g. <code>"C:\Python27\Scrip=
ts"</code>). Quotes <a class=3D"reference external" href=3D"http://bugs.pyt=
hon.org/issue17023">can cause problems with
Python programs</a> and they are not needed
in this context even if the directory path would contain spaces.</p>
</div>
<div class=3D"section" id=3D"setting-path-on-unix-like-systems">
<h5>Setting <tt class=3D"docutils literal">PATH</tt> on UNIX-like systems</=
h5>
<p>On UNIX-like systems you typically need to edit either some system wide =
or user
specific configuration file. Which file to edit and how depends on the syst=
em,
and you need to consult your operating system documentation for more detail=
s.</p>
</div>
</div>
<div class=3D"section" id=3D"setting-https-proxy">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id483">Setting <tt class=3D"docutils=
 literal">https_proxy</tt></a></h4>
<p>If you are <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#installing-with-pip=
">installing with pip</a> and are behind a proxy, you need to set
the <tt class=3D"docutils literal">https_proxy</tt> environment variable. I=
t is needed both when installing
pip itself and when using it to install Robot Framework and other Python
packages.</p>
<p>How to set the <tt class=3D"docutils literal">https_proxy</tt> depends o=
n the operating system similarly as
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#configuring-path">configuring PAT=
H</a>. The value of this variable must be an URL of the proxy,
for example, <code>http://10.0.0.42:8080</code>.</p>
</div>
</div>
<div class=3D"section" id=3D"installing-with-pip">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id484">1.3.3&nbsp;&nbsp;&nbsp;Instal=
ling with pip</a></h3>
<p>The standard Python package manager is <a class=3D"reference external" h=
ref=3D"http://pip-installer.org/">pip</a>, but there are also other
alternatives such as <a class=3D"reference external" href=3D"http://buildou=
t.org/">Buildout</a> and <a class=3D"reference external" href=3D"http://pea=
k.telecommunity.com/DevCenter/EasyInstall">easy_install</a>. These instruct=
ions
only cover using pip, but other package managers ought be able to install
Robot Framework as well.</p>
<p>Latest Python, Jython, IronPython and PyPy versions contain pip bundled =
in.
Which versions contain it and how to possibly activate it is discussed in
sections below. See <a class=3D"reference external" href=3D"http://pip-inst=
aller.org/">pip</a> project pages if for the latest installation
instructions if you need to install it.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Robot Framework 3.1 and newer are distributed as <a class=
=3D"reference external" href=3D"http://pythonwheels.com/">wheels</a>, but e=
arlier versions are available only
as source distributions in tar.gz format. It is possible to install
both using pip, but installing wheels is a lot faster.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Only Robot Framework 2.7 and newer can be installed using=
 pip. If you
need an older version, you must use other installation approaches.</p>
</div>
<div class=3D"section" id=3D"installing-pip-for-python">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id485">Installing pip for Python</a>=
</h4>
<p>Starting from Python 2.7.9, the standard Windows installer by default in=
stalls
and activates pip. Assuming you also have configured <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#configuring-path">PATH</a> and possibly
set <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-https-proxy">https_pr=
oxy</a>, you can run <code>pip install robotframework</code> right after
Python installation. With Python 3.4 and newer pip is officially part of th=
e
interpreter and should be automatically available.</p>
<p>Outside Windows and with older Python versions you need to install pip y=
ourself.
You may be able to do it using system package managers like Apt or Yum on L=
inux,
but you can always use the manual installation instructions found from the =
<a class=3D"reference external" href=3D"http://pip-installer.org/">pip</a>
project pages.</p>
<p>If you have multiple Python versions with pip installed, the version tha=
t is
used when the <tt class=3D"docutils literal">pip</tt> command is executed d=
epends on which pip is first in the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#configuring-path">PATH</a>. An al=
ternative is executing the <tt class=3D"docutils literal">pip</tt> module u=
sing the selected Python
version directly:</p>
<div class=3D"highlight"><pre><span></span>python -m pip install robotframe=
work
python3 -m pip install robotframework
</pre></div>
</div>
<div class=3D"section" id=3D"installing-pip-for-jython">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id486">Installing pip for Jython</a>=
</h4>
<p>Jython 2.7 contain pip bundled in, but it needs to be activated before u=
sing it
by running the following command:</p>
<div class=3D"highlight"><pre><span></span>jython -m ensurepip
</pre></div>
<p>Jython installs its pip into <span class=3D"file">&lt;JythonInstallation=
&gt;/bin</span> directory.
Does running <code>pip install robotframework</code> actually use it or pos=
sibly some
other pip version depends on which pip is first in the <a class=3D"referenc=
e internal" href=3D"http://robotframework.org/robotframework/latest/RobotFr=
ameworkUserGuide.html#configuring-path">PATH</a>. An alternative
is executing the <tt class=3D"docutils literal">pip</tt> module using Jytho=
n directly:</p>
<div class=3D"highlight"><pre><span></span>jython -m pip install robotframe=
work
</pre></div>
</div>
<div class=3D"section" id=3D"installing-pip-for-ironpython">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id487">Installing pip for IronPython=
</a></h4>
<p>IronPython 2.7.5 and newer contain pip bundled in. With IronPython 2.7.9=
 and
newer pip also works out-of-the-box, but with earlier versions it needs to =
be
activated with <code>ipy -m ensurepip</code> similarly as with Jython.</p>
<p>With IronPython 2.7.7 and earlier you need to use <code>-X:Frames</code>=
 command line
option when activating pip like <code>ipy -X:Frames -m ensurepip</code> and=
 also
when using it. Prior to IronPython 2.7.9 there were problems creating
possible start-up scripts when installing modules. Using IronPython 2.7.9
is highly recommended.</p>
<p>IronPython installs pip into <span class=3D"file">&lt;IronPythonInstalla=
tion&gt;/Scripts</span> directory.
Does running <code>pip install robotframework</code> actually use it or pos=
sibly some
other pip version depends on which pip is first in the <a class=3D"referenc=
e internal" href=3D"http://robotframework.org/robotframework/latest/RobotFr=
ameworkUserGuide.html#configuring-path">PATH</a>. An alternative
is executing the <tt class=3D"docutils literal">pip</tt> module using IronP=
ython directly:</p>
<div class=3D"highlight"><pre><span></span>ipy -m pip install robotframewor=
k
</pre></div>
</div>
<div class=3D"section" id=3D"installing-pip-for-pypy">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id488">Installing pip for PyPy</a></=
h4>
<p>Also PyPy contains pip bundled in. It is not activated by default, but i=
t can
be activated similarly as with the other interpreters:</p>
<div class=3D"highlight"><pre><span></span>pypy -m ensurepip
pypy3 -m ensurepip
</pre></div>
<p>If you have multiple Python versions with pip installed, the version tha=
t is
used when the <tt class=3D"docutils literal">pip</tt> command is executed d=
epends on which pip is first in the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#configuring-path">PATH</a>. An al=
ternative is executing the <tt class=3D"docutils literal">pip</tt> module u=
sing PyPy directly:</p>
<div class=3D"highlight"><pre><span></span>pypy -m pip
pypy3 -m pip
</pre></div>
</div>
<div class=3D"section" id=3D"using-pip">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id489">Using pip</a></h4>
<p>Once you have <a class=3D"reference external" href=3D"http://pip-install=
er.org/">pip</a> installed, and have set <a class=3D"reference internal" hr=
ef=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGui=
de.html#setting-https-proxy">https_proxy</a> if you are behind
a proxy, using pip on the command line is very easy. The easiest way to use
pip is by letting it find and download packages it installs from the
<a class=3D"reference external" href=3D"https://pypi.python.org/pypi/robotf=
ramework">Python Package Index (PyPI)</a>, but it can also install packages
downloaded from the PyPI separately. The most common usages are shown below
and <a class=3D"reference external" href=3D"http://pip-installer.org/">pip<=
/a> documentation has more information and examples.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"c1"># Install the=
 latest version (does not upgrade)</span>
pip install robotframework

<span class=3D"c1"># Upgrade to the latest version</span>
pip install --upgrade robotframework

<span class=3D"c1"># Install a specific version</span>
pip install <span class=3D"nv">robotframework</span><span class=3D"o">=3D=
=3D</span><span class=3D"m">2</span>.9.2

<span class=3D"c1"># Install separately downloaded package (no network conn=
ection needed)</span>
pip install robotframework-3.0.tar.gz

<span class=3D"c1"># Install latest (possibly unreleased) code directly fro=
m GitHub</span>
pip install https://github.com/robotframework/robotframework/archive/master=
.zip

<span class=3D"c1"># Uninstall</span>
pip uninstall robotframework
</pre></div>
<p>Notice that pip 1.4 and newer will only install stable releases by defau=
lt.
If you want to install an alpha, beta or release candidate, you need to eit=
her
specify the version explicitly or use the <span class=3D"option">--pre</spa=
n> option:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"c1"># Install 3.0=
 beta 1</span>
pip install <span class=3D"nv">robotframework</span><span class=3D"o">=3D=
=3D</span><span class=3D"m">3</span>.0b1

<span class=3D"c1"># Upgrade to the latest version even if it is a pre-rele=
ase</span>
pip install --pre --upgrade robotframework
</pre></div>
<p>Notice that on Windows pip, by default, does not recreate <a class=3D"re=
ference internal" href=3D"http://robotframework.org/robotframework/latest/R=
obotFrameworkUserGuide.html#executing-robot-framework">robot.bat and
rebot.bat</a> start-up scripts if the same Robot Framework version is insta=
lled
multiple times using the same Python version. This mainly causes problems
when <a class=3D"reference internal" href=3D"http://robotframework.org/robo=
tframework/latest/RobotFrameworkUserGuide.html#using-virtual-environments">=
using virtual environments</a>, but is something to take into account
also if doing custom installations using pip. A workaround if using the
<tt class=3D"docutils literal"><span class=3D"pre">--no-cache-dir</span></t=
t> option like <tt class=3D"docutils literal">pip install <span class=3D"pr=
e">--no-cache-dir</span> robotframework</tt>.
Alternatively it is possible to ignore the start-up scripts altogether and
just use <tt class=3D"docutils literal">python <span class=3D"pre">-m</span=
> robot</tt> and <tt class=3D"docutils literal">python <span class=3D"pre">=
-m</span> robot.rebot</tt> commands instead.</p>
</div>
</div>
<div class=3D"section" id=3D"installing-from-source">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id490">1.3.4&nbsp;&nbsp;&nbsp;Instal=
ling from source</a></h3>
<p>This installation method can be used on any operating system with any of=
 the
supported interpreters. Installing <em>from source</em> can sound a bit sca=
ry, but
the procedure is actually pretty straightforward.</p>
<div class=3D"section" id=3D"getting-source-code">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id491">Getting source code</a></h4>
<p>You typically get the source code by downloading a <em>source distributi=
on</em> from
<a class=3D"reference external" href=3D"https://pypi.python.org/pypi/robotf=
ramework">PyPI</a>. Starting from Robot Framework 3.1 the source distributi=
on is a zip
package and with earlier versions it is in tar.gz format. Once you have
downloaded the package, you need to extract it somewhere and, as a result,
you get a directory named <code>robotframework-&lt;version&gt;</code>. The =
directory contains
the source code and a <tt class=3D"docutils literal">setup.py</tt> script n=
eeded for installing it.</p>
<p>An alternative approach for getting the source code is cloning project's
<a class=3D"reference external" href=3D"https://github.com/robotframework/r=
obotframework">GitHub repository</a> directly. By default you will get the =
latest code, but
you can easily switch to different released versions or other tags.</p>
</div>
<div class=3D"section" id=3D"installation">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id492">Installation</a></h4>
<p>Robot Framework is installed from source using Python's standard <tt cla=
ss=3D"docutils literal">setup.py</tt>
script. The script is in the directory containing the sources and you can r=
un
it from the command line using any of the supported interpreters:</p>
<div class=3D"highlight"><pre><span></span>python setup.py install
jython setup.py install
ipy setup.py install
pypy setup.py install
</pre></div>
<p>The <tt class=3D"docutils literal">setup.py</tt> script accepts several =
arguments allowing, for example,
installation into a non-default location that does not require administrati=
ve
rights. It is also used for creating different distribution packages. Run
<code>python setup.py --help</code> for more details.</p>
</div>
</div>
<div class=3D"section" id=3D"standalone-jar-distribution">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id493">1.3.5&nbsp;&nbsp;&nbsp;Standa=
lone JAR distribution</a></h3>
<p>Robot Framework is also distributed as a standalone Java archive that co=
ntains
both <a class=3D"reference external" href=3D"http://jython.org/">Jython</a>=
 and Robot Framework and only requires <a class=3D"reference external" href=
=3D"http://java.com/">Java</a> a dependency. It is
an easy way to get everything in one package that  requires no installation=
,
but has a downside that it does not work with the normal <a class=3D"refere=
nce external" href=3D"http://python.org/">Python</a> interpreter.</p>
<p>The package is named <tt class=3D"docutils literal"><span class=3D"pre">=
robotframework-&lt;version&gt;.jar</span></tt> and it is available
on the <a class=3D"reference external" href=3D"http://search.maven.org/#sea=
rch%7Cga%7C1%7Ca%3Arobotframework">Maven central</a>. After downloading the=
 package, you can execute tests
with it like:</p>
<div class=3D"highlight"><pre><span></span>java -jar robotframework-3.0.jar=
 mytests.robot
java -jar robotframework-3.0.jar --variable name:value mytests.robot
</pre></div>
<p>If you want to <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#post-processing=
-outputs">post-process outputs</a> using Rebot or use other built-in
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#supporting-tools">supporting tool=
s</a>, you need to give the command name <tt class=3D"docutils literal">reb=
ot</tt>, <tt class=3D"docutils literal">libdoc</tt>,
<tt class=3D"docutils literal">testdoc</tt> or <tt class=3D"docutils litera=
l">tidy</tt> as the first argument to the JAR file:</p>
<div class=3D"highlight"><pre><span></span>java -jar robotframework-3.0.jar=
 rebot output.xml
java -jar robotframework-3.0.jar libdoc MyLibrary list
</pre></div>
<p>For more information about the different commands, execute the JAR witho=
ut
arguments.</p>
<p>In addition to the Python standard library and Robot Framework modules, =
the
standalone JAR versions starting from 2.9.2 also contain the PyYAML depende=
ncy
needed to handle yaml variable files.</p>
</div>
<div class=3D"section" id=3D"manual-installation">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id494">1.3.6&nbsp;&nbsp;&nbsp;Manual=
 installation</a></h3>
<p>If you do not want to use any automatic way of installing Robot Framewor=
k,
you can always install it manually following these steps:</p>
<ol class=3D"arabic simple">
<li>Get the source code. All the code is in a directory (a package in Pytho=
n)
called <span class=3D"file">robot</span>. If you have a <a class=3D"referen=
ce internal" href=3D"http://robotframework.org/robotframework/latest/RobotF=
rameworkUserGuide.html#getting-source-code">source distribution</a> or a ve=
rsion
control checkout, you can find it from the <span class=3D"file">src</span> =
directory, but you
can also get it from an earlier installation.</li>
<li>Copy the source code where you want to.</li>
<li>Decide <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#executing-robot-framew=
ork">how to run tests</a>.</li>
</ol>
</div>
<div class=3D"section" id=3D"verifying-installation">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id495">1.3.7&nbsp;&nbsp;&nbsp;Verify=
ing installation</a></h3>
<p>After a successful installation, you should be able to execute the creat=
ed
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#using-robot-and-rebot-scripts">ru=
nner scripts</a> with <span class=3D"option">--version</span> option and ge=
t both Robot Framework
and interpreter versions as a result:</p>
<div class=3D"highlight"><pre><span></span>$ robot --version
Robot Framework <span class=3D"m">3</span>.0 <span class=3D"o">(</span>Pyth=
on <span class=3D"m">2</span>.7.10 on linux2<span class=3D"o">)</span>

$ rebot --version
Rebot <span class=3D"m">3</span>.0 <span class=3D"o">(</span>Python <span c=
lass=3D"m">2</span>.7.10 on linux2<span class=3D"o">)</span>
</pre></div>
<p>If running the runner scripts fails with a message saying that the comma=
nd is
not found or recognized, a good first step is double-checking the <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#configuring-path">PATH</a>
configuration. If that does not help, it is a good idea to re-read relevant
sections from these instructions before searching help from the Internet or
as asking help on <a class=3D"reference external" href=3D"http://groups.goo=
gle.com/group/robotframework-users/">robotframework-users</a> mailing list =
or
elsewhere.</p>
<div class=3D"section" id=3D"where-files-are-installed">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id496">Where files are installed</a>=
</h4>
<p>When an automatic installer is used, Robot Framework source code is copi=
ed
into a directory containing external Python modules. On UNIX-like operating
systems where Python is pre-installed the location of this directory varies=
.
If you have installed the interpreter yourself, it is normally
<span class=3D"file">Lib/site-packages</span> under the interpreter install=
ation directory, for
example, <span class=3D"file">C:\Python27\Lib\site-packages</span>. The act=
ual Robot
Framework code is in a directory named <span class=3D"file">robot</span>.</=
p>
<p>Robot Framework <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#using-robot-an=
d-rebot-scripts">runner scripts</a> are created and copied into another
platform-specific location. When using Python on UNIX-like systems, they
normally go to <span class=3D"file">/usr/bin</span> or <span class=3D"file"=
>/usr/local/bin</span>. On Windows and
with Jython and IronPython, the scripts are typically either in <span class=
=3D"file">Scripts</span>
or <span class=3D"file">bin</span> directory under the interpreter installa=
tion directory.</p>
</div>
</div>
<div class=3D"section" id=3D"uninstallation">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id497">1.3.8&nbsp;&nbsp;&nbsp;Uninst=
allation</a></h3>
<p>The easiest way to uninstall Robot Framework is using <a class=3D"refere=
nce external" href=3D"http://pip-installer.org/">pip</a>:</p>
<div class=3D"highlight"><pre><span></span>pip uninstall robotframework
</pre></div>
<p>A nice feature in pip is that it can uninstall packages even if they are
installed from the source. If you do not have pip available or have done
a <a class=3D"reference internal" href=3D"http://robotframework.org/robotfr=
amework/latest/RobotFrameworkUserGuide.html#manual-installation">manual ins=
tallation</a> to a custom location, you need to find <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#where-files-are-installed">where files
are installed</a> and remove them manually.</p>
<p>If you have set <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#configuring-pa=
th">PATH</a> or configured the environment otherwise, you need to
undo those changes separately.</p>
</div>
<div class=3D"section" id=3D"upgrading">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id498">1.3.9&nbsp;&nbsp;&nbsp;Upgrad=
ing</a></h3>
<p>If you are using <a class=3D"reference external" href=3D"http://pip-inst=
aller.org/">pip</a>, upgrading to a new version requires either specifying
the version explicitly or using the <span class=3D"option">--upgrade</span>=
 option. If upgrading
to a preview release, <span class=3D"option">--pre</span> option is needed =
as well.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"c1"># Upgrade to =
the latest stable version. This is the most common method.</span>
pip install --upgrade robotframework

<span class=3D"c1"># Upgrade to the latest version even if it would be a pr=
eview release.</span>
pip install --upgrade --pre robotframework

<span class=3D"c1"># Upgrade to the specified version.</span>
pip install <span class=3D"nv">robotframework</span><span class=3D"o">=3D=
=3D</span><span class=3D"m">2</span>.9.2
</pre></div>
<p>When using pip, it automatically uninstalls previous versions before
installation. If you are <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#installi=
ng-from-source">installing from source</a>, it should be safe to
just install over an existing installation. If you encounter problems,
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#uninstallation">uninstallation</a=
> before installation may help.</p>
<p>When upgrading Robot Framework, there is always a change that the new ve=
rsion
contains backwards incompatible changes affecting existing tests or test
infrastructure. Such changes are very rare in minor versions like 2.8.7 or
2.9.2, but more common in major versions like 2.9 and 3.0. Backwards
incompatible changes and deprecated features are explained in the release
notes, and it is a good idea to study them especially when upgrading to
a new major version.</p>
</div>
<div class=3D"section" id=3D"executing-robot-framework">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id499">1.3.10&nbsp;&nbsp;&nbsp;Execu=
ting Robot Framework</a></h3>
<div class=3D"section" id=3D"using-robot-and-rebot-scripts">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id500">Using <tt class=3D"docutils l=
iteral">robot</tt> and <tt class=3D"docutils literal">rebot</tt> scripts</a=
></h4>
<p>Starting from Robot Framework 3.0, tests are executed using the <tt clas=
s=3D"docutils literal">robot</tt>
script and results post-processed with the <tt class=3D"docutils literal">r=
ebot</tt> script:</p>
<div class=3D"highlight"><pre><span></span>robot tests.robot
rebot output.xml
</pre></div>
<p>Both of these scripts are installed as part of the normal installation a=
nd
can be executed directly from the command line if <a class=3D"reference int=
ernal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewo=
rkUserGuide.html#configuring-path">PATH</a> is set correctly.
They are implemented using Python except on Windows where they are batch fi=
les.</p>
<p>Older Robot Framework versions do not have the <tt class=3D"docutils lit=
eral">robot</tt> script and the
<tt class=3D"docutils literal">rebot</tt> script is installed only with Pyt=
hon. Instead they have interpreter
specific scripts <tt class=3D"docutils literal">pybot</tt>, <tt class=3D"do=
cutils literal">jybot</tt> and <tt class=3D"docutils literal">ipybot</tt> f=
or test execution and
<tt class=3D"docutils literal">jyrebot</tt> and <tt class=3D"docutils liter=
al">ipyrebot</tt> for post-processing outputs. These scripts still
work, but they will be deprecated and removed in the future.</p>
</div>
<div class=3D"section" id=3D"executing-installed-robot-module">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id501">Executing installed <tt class=
=3D"docutils literal">robot</tt> module</a></h4>
<p>An alternative way to run tests is executing the installed <tt class=3D"=
docutils literal">robot</tt> module
or its sub module <tt class=3D"docutils literal">robot.run</tt> directly us=
ing Python's <a class=3D"reference external" href=3D"https://docs.python.or=
g/2/using/cmdline.html#cmdoption-m">-m command line
option</a>. This is especially useful if Robot Framework is used with multi=
ple
Python versions:</p>
<div class=3D"highlight"><pre><span></span>python -m robot tests.robot
python3 -m robot.run tests.robot
jython -m robot tests.robot
/opt/jython/jython -m robot tests.robot
</pre></div>
<p>The support for <tt class=3D"docutils literal">python <span class=3D"pre=
">-m</span> robot</tt> approach is a new feature in Robot
Framework 3.0, but the older versions support <tt class=3D"docutils literal=
">python <span class=3D"pre">-m</span> robot.run</tt>.
The latter must also be used with Python 2.6.</p>
<p>Post-processing outputs using the same approach works too, but the modul=
e to
execute is <tt class=3D"docutils literal">robot.rebot</tt>:</p>
<div class=3D"highlight"><pre><span></span>python -m robot.rebot output.xml
</pre></div>
</div>
<div class=3D"section" id=3D"executing-installed-robot-directory">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id502">Executing installed <tt class=
=3D"docutils literal">robot</tt> directory</a></h4>
<p>If you know where Robot Framework is installed, you can also execute the
installed <span class=3D"file">robot</span> directory or the <span class=3D=
"file">run.py</span> file inside it
directly:</p>
<div class=3D"highlight"><pre><span></span>python path/to/robot/ tests.robo=
t
jython path/to/robot/run.py tests.robot
</pre></div>
<p>Running the directory is a new feature in Robot Framework 3.0, but the o=
lder
versions support running the <span class=3D"file">robot/run.py</span> file.=
</p>
<p>Post-processing outputs using the <span class=3D"file">robot/rebot.py</s=
pan> file works the same
way too:</p>
<div class=3D"highlight"><pre><span></span>python path/to/robot/rebot.py ou=
tput.xml
</pre></div>
<p>Executing Robot Framework this way is especially handy if you have done
a <a class=3D"reference internal" href=3D"http://robotframework.org/robotfr=
amework/latest/RobotFrameworkUserGuide.html#manual-installation">manual ins=
tallation</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"using-virtual-environments">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id503">1.3.11&nbsp;&nbsp;&nbsp;Using=
 virtual environments</a></h3>
<p>Python <a class=3D"reference external" href=3D"https://packaging.python.=
org/installing/#creating-virtual-environments">virtual environments</a> all=
ow Python packages to be installed in
an isolated location for a particular system or application, rather than
installing all packages into the same global location. Virtual environments
can be created using the <a class=3D"reference external" href=3D"https://vi=
rtualenv.pypa.io/">virtualenv</a> tool or, starting from Python 3.3,
using the standard <a class=3D"reference external" href=3D"https://docs.pyt=
hon.org/3/library/venv.html">venv</a> module.</p>
<p>Robot Framework in general works fine with virtual environments. The onl=
y
problem is that when <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#using-pip">u=
sing pip</a> on Windows, <tt class=3D"docutils literal">robot.bat</tt> and =
<tt class=3D"docutils literal">rebot.bat</tt>
scripts are not recreated by default. This means that if Robot Framework is
installed into multiple virtual environments, the <tt class=3D"docutils lit=
eral">robot.bat</tt> and
<tt class=3D"docutils literal">rebot.bat</tt> scripts in the latter ones re=
fer to the Python installation
in the first virtual environment. A workaround is using the <tt class=3D"do=
cutils literal"><span class=3D"pre">--no-cache-dir</span></tt>
option when installing. Alternatively the start-up scripts can be ignored
and <tt class=3D"docutils literal">python <span class=3D"pre">-m</span> rob=
ot</tt> and <tt class=3D"docutils literal">python <span class=3D"pre">-m</s=
pan> robot.rebot</tt> commands used instead.</p>
<!-- These aliases need an explicit target to work in GitHub -->
</div>
</div>
<div class=3D"section" id=3D"demonstrations">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id468">1.4&nbsp;&nbsp;&nbsp;Demonstr=
ations</a></h2>
<p>There are several demo projects that introduce Robot Framework and help =
getting
started with it.</p>
<dl class=3D"docutils">
<dt><a class=3D"reference external" href=3D"https://github.com/robotframewo=
rk/QuickStartGuide/blob/master/QuickStart.rst">Quick Start Guide</a></dt>
<dd>Introduces the most important features of Robot Framework and acts as
an executable demo.</dd>
<dt><a class=3D"reference external" href=3D"https://github.com/robotframewo=
rk/RobotDemo">Robot Framework demo</a></dt>
<dd>Simple example test cases. Demonstrates also creating custom test libra=
ries.</dd>
<dt><a class=3D"reference external" href=3D"https://github.com/robotframewo=
rk/WebDemo">Web testing demo</a></dt>
<dd>Demonstrates how to create tests and higher level keywords. The system
under test is a simple web page that is tested using <a class=3D"reference =
external" href=3D"https://github.com/robotframework/SeleniumLibrary">Seleni=
umLibrary</a>.</dd>
<dt><a class=3D"reference external" href=3D"https://github.com/robotframewo=
rk/SwingLibrary/wiki/SwingLibrary-Demo">SwingLibrary demo</a></dt>
<dd>Demonstrates using <a class=3D"reference external" href=3D"https://gith=
ub.com/robotframework/SwingLibrary">SwingLibrary</a> for testing Java GUI a=
pplications.</dd>
<dt><a class=3D"reference external" href=3D"https://code.google.com/p/atdd-=
with-robot-framework">ATDD with Robot Framework</a></dt>
<dd>Demonstrates how to use Robot Framework when following
Acceptance Test Driven Development (ATDD) process.</dd>
</dl>
</div>
</div>
<div class=3D"section" id=3D"creating-test-data">
<h1><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id431">2&nbsp;&nbsp;&nbsp;Creating t=
est data</a></h1>
<div class=3D"contents local topic" id=3D"id29">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-data-syntax" id=3D"id504=
">2.1&nbsp;&nbsp;&nbsp;Test data syntax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-test-cases" id=3D"id=
505">2.2&nbsp;&nbsp;&nbsp;Creating test cases</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-tasks" id=3D"id506">=
2.3&nbsp;&nbsp;&nbsp;Creating tasks</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-test-suites" id=3D"i=
d507">2.4&nbsp;&nbsp;&nbsp;Creating test suites</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-test-libraries" id=3D"i=
d508">2.5&nbsp;&nbsp;&nbsp;Using test libraries</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variables" id=3D"id509">2.6&n=
bsp;&nbsp;&nbsp;Variables</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-user-keywords" id=3D=
"id510">2.7&nbsp;&nbsp;&nbsp;Creating user keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#resource-and-variable-files" =
id=3D"id511">2.8&nbsp;&nbsp;&nbsp;Resource and variable files</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#advanced-features" id=3D"id51=
2">2.9&nbsp;&nbsp;&nbsp;Advanced features</a></li>
</ul>
</div>
<div class=3D"section" id=3D"test-data-syntax">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id504">2.1&nbsp;&nbsp;&nbsp;Test dat=
a syntax</a></h2>
<p>This section covers Robot Framework's overall test data syntax. The foll=
owing
sections will explain how to actually create test cases, test suites and so=
 on.
Although this section mostly uses term <em>test</em>, the same rules apply =
also
when <a class=3D"reference internal" href=3D"http://robotframework.org/robo=
tframework/latest/RobotFrameworkUserGuide.html#creating-tasks">creating tas=
ks</a>.</p>
<div class=3D"contents local topic" id=3D"id30">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#files-and-directories" id=3D"=
id513">2.1.1&nbsp;&nbsp;&nbsp;Files and directories</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-data-sections" id=3D"id5=
14">2.1.2&nbsp;&nbsp;&nbsp;Test data sections</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#supported-file-formats" id=3D=
"id515">2.1.3&nbsp;&nbsp;&nbsp;Supported file formats</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#plain-text-format" id=3D"id51=
6">Plain text format</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#tsv-format" id=3D"id517">TSV =
format</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#restructuredtext-format" id=
=3D"id518">reStructuredText format</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#html-format" id=3D"id519">HTM=
L format</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#rules-for-parsing-the-data" i=
d=3D"id520">2.1.4&nbsp;&nbsp;&nbsp;Rules for parsing the data</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#ignored-data" id=3D"id521">Ig=
nored data</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#escaping" id=3D"id522">Escapi=
ng</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#dividing-test-data-to-several=
-rows" id=3D"id523">Dividing test data to several rows</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"files-and-directories">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id513">2.1.1&nbsp;&nbsp;&nbsp;Files =
and directories</a></h3>
<p>The hierarchical structure for arranging test cases is built as follows:=
</p>
<ul class=3D"simple">
<li>Test cases are created in <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#tes=
t-case-files">test case files</a>.</li>
<li>A test case file automatically creates a <a class=3D"reference internal=
" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUse=
rGuide.html#creating-test-suites">test suite</a> containing
the test cases in that file.</li>
<li>A directory containing test case files forms a higher-level test
suite. Such a <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#test-suite-director=
ies">test suite directory</a> has suites created from test
case files as its child test suites.</li>
<li>A test suite directory can also contain other test suite directories,
and this hierarchical structure can be as deeply nested as needed.</li>
<li>Test suite directories can have a special <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#initialization-files">initialization file</a>
configuring the created test suite.</li>
</ul>
<p>In addition to this, there are:</p>
<ul class=3D"simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-test-libraries">Test li=
braries</a> containing the lowest-level keywords.</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#resource-files">Resource file=
s</a> with <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#variables">variables</=
a> and higher-level <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-user=
-keywords">user keywords</a>.</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variable-files">Variable file=
s</a> to provide more flexible ways to create variables
than resource files.</li>
</ul>
<p>Test case files, test suite initialization files and resource files are
all created using Robot Framework test data syntax. Test libraries and
variable files are created using "real" programming languages, most
often Python.</p>
</div>
<div class=3D"section" id=3D"test-data-sections">
<span id=3D"test-data-tables"></span><h3><a class=3D"toc-backref" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#id514">2.1.2&nbsp;&nbsp;&nbsp;Test data sections</a></h3>
<p>Robot Framework data is defined in different sections, often also
called tables, listed below:</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Different sections in data</caption>
<colgroup>
<col width=3D"21%">
<col width=3D"79%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Section</th>
<th class=3D"head">Used for</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>Settings</td>
<td><div class=3D"first last line-block">
<div class=3D"line">1) Importing <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
using-test-libraries">test libraries</a>,
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#resource-files">resource files</a=
> and <a class=3D"reference internal" href=3D"http://robotframework.org/rob=
otframework/latest/RobotFrameworkUserGuide.html#variable-files">variable fi=
les</a>.</div>
<div class=3D"line">2) Defining metadata for <a class=3D"reference external=
" href=3D"http://robot-framework.readthedocs.org/en/master/autodoc/robot.ru=
nning.html#robot.running.model.TestSuite">test suites</a>
and <a class=3D"reference external" href=3D"http://robot-framework.readthed=
ocs.org/en/master/autodoc/robot.running.html#robot.running.model.TestCase">=
test cases</a>.</div>
</div>
</td>
</tr>
<tr><td>Variables</td>
<td>Defining <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#variables">variables=
</a> that can be used
elsewhere in the test data.</td>
</tr>
<tr><td>Test Cases</td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-test-cases">Creating=
 test cases</a> from available
keywords.</td>
</tr>
<tr><td>Tasks</td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-tasks">Creating task=
s</a> using available
keywords. Single file can only contain
either test cases or tasks.</td>
</tr>
<tr><td>Keywords</td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-user-keywords">Creat=
ing user keywords</a> from existing
lower-level keywords</td>
</tr>
<tr><td>Comments</td>
<td>Additional comments or data. Ignored by
Robot Framework.</td>
</tr>
</tbody>
</table>
<p>Different sections are recognized by their header row. The recommended
header format is <code>*** Settings ***</code>, but the header is case-inse=
nsitive,
surrounding spaces are optional, and the number of asterisk characters can
vary as long as there is one asterisk in the beginning. In addition to usin=
g
the plural format, also singular variants like <code>Setting</code> and <co=
de>Test Case</code> are
accepted. In other words, also <code>*setting</code> would be recognized as=
 a section
header.</p>
<p>The header row can contain also other data than the actual section heade=
r.
The extra data must be separated from the section header using the data
format dependent separator, typically two or more spaces. These extra heade=
rs
are ignored at parsing time, but they can be used for documenting
purposes. This is especially useful when creating test cases using the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#data-driven-style">data-driven st=
yle</a>.</p>
<p>Possible data before the first section is ignored.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, section names were space-in=
sensitive,
meaning that spaces could be removed (e.g. <code>TestCases</code>) or extra
spaces added (e.g. <code>S e t t i n g s</code>). This is now deprecated an=
d
only the format in the table above, case-insensitively, is supported.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, all unrecognized sections w=
ere silently
ignored but nowadays they cause an error. <code>Comments</code> sections ca=
n
be used if sections not containing actual test data are needed.</p>
</div>
</div>
<div class=3D"section" id=3D"supported-file-formats">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id515">2.1.3&nbsp;&nbsp;&nbsp;Suppor=
ted file formats</a></h3>
<p>Robot Framework test data can be defined in few different formats:</p>
<ol class=3D"arabic simple">
<li>The most common approach is using the <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#plain-text-format">plain text format</a> and store files
using the <span class=3D"file">.robot</span> extension. Alternatively it is=
 possible to use
the <span class=3D"file">.txt</span> extension.</li>
<li>The <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#tsv-format">TSV format</a=
> can be used as long as files are compatible
with the plain text format.</li>
<li>Plain text test data can be embedded into <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#restructuredtext-format">reStructuredText files</a>.</li>
<li>Earlier Robot Framework versions supported test data in <a class=3D"ref=
erence internal" href=3D"http://robotframework.org/robotframework/latest/Ro=
botFrameworkUserGuide.html#html-format">HTML format</a>.</li>
</ol>
<p>Prior to Robot Framework 3.1, all aforementioned file formats were parse=
d
automatically unless the <span class=3D"option">--extension</span> option w=
as used to <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#selecting-files-to-par=
se">limit
parsing</a>. In Robot Framework 3.1 automatically parsing other than
<code>*.robot</code> files was deprecated, and in the future other files ar=
e parsed
only if that is <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#selecting-files-t=
o-parse">explicitly configured</a> using the <span class=3D"option">--exten=
sion</span> option.
The support for the HTML format has bee deprecated in general it will be
removed altogether in the future.</p>
<div class=3D"section" id=3D"plain-text-format">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id516">Plain text format</a></h4>
<p>The plain text format is the base for all supported Robot Framework data
formats. Test data is parsed line by line, but long logical lines
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#dividing-test-data-to-several-row=
s">can be split</a> if needed. In a single line different data items
like keywords and their arguments are separated from each others using
a separator. The most commonly used separator is two or more spaces, but
it is also possible to use a pipe character surrounded with spaces
(<span class=3D"codesc">|</span>). Depending on the separator we can talk a=
bout the <a class=3D"reference internal" href=3D"http://robotframework.org/=
robotframework/latest/RobotFrameworkUserGuide.html#space-separated-format">=
space
separated format</a> and the <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#pipe=
-separated-format">pipe separated format</a>, but same file can
actually contain lines with both separators.</p>
<p>Possible literal tab characters are converted to two spaces before parsi=
ng
lines otherwise. This allows using a single tab as a separator instead of
multiple spaces. Notice, however, that multiple consecutive tabs are still
considered to be a single separator. If an actual tab character is needed
in the data, it must be <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#escaping"=
>escaped</a> like <code>\t</code>.</p>
<p>Plain text files containing non-ASCII characters must be saved using the
UTF-8 encoding.</p>
<div class=3D"section" id=3D"space-separated-format">
<span id=3D"space-separated-plain-text-format"></span><h5>Space separated f=
ormat</h5>
<p>In the space separated format two or more spaces (or one or more tab
characters) act as a separator between different data items.
The number of spaces used as separator can vary, as long as there are
at least two, making it possible to align the data nicely in settings
and elsewhere if it makes sense.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Documentation</span><span class=3D"p">    </span><span c=
lass=3D"s">Example using the space separated plain text format.</span><span=
 class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">          </span><span c=
lass=3D"nn">OperatingSystem</span><span class=3D"p"></span>

<span class=3D"gh">*** Variables ***</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">MESSAGE</span><span class=3D"=
p">}       </span><span class=3D"s">Hello, world!</span><span class=3D"p"><=
/span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">My Test</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Example test</span><span class=3D=
"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    ${</span><span class=3D"nv">MESSAGE</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">My Keyword</span><span clas=
s=3D"p">    </span><span class=3D"s">/tmp</span><span class=3D"p"></span>

<span class=3D"gu">Another Test</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">MESSAGE</span><span class=3D"p=
">}    </span><span class=3D"s">Hello, world!</span><span class=3D"p"></spa=
n>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">My Keyword</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">path</span><span class=3D"p">}</sp=
an>
<span class=3D"p">    </span><span class=3D"nf">Directory Should Exist</spa=
n><span class=3D"p">    ${</span><span class=3D"nv">path</span><span class=
=3D"p">}</span>
</pre></div>
<p>Because space is used as separator, all empty items and items containing
only spaces must be <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#escaping">esc=
aped</a> with backslashes or with built-in  <code>${EMPTY}</code>
and <code>${SPACE}</code> variables, respectively.</p>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p class=3D"last">Although using two spaces as a separator is enough, it is=
 recommend
to use four spaces to make the separator easier to notice.</p>
</div>
</div>
<div class=3D"section" id=3D"pipe-separated-format">
<h5>Pipe separated format</h5>
<p>The biggest problem of the space delimited format is that visually
separating keywords from arguments can be tricky. This is a problem
especially if keywords take a lot of arguments and/or arguments
contain spaces. In such cases the pipe delimited variant can
work better because it makes the separator more visible.</p>
<p>One file can contain both space separated and pipe separated lines.
Pipe separated lines are recognized by the mandatory leading pipe character=
,
but the pipe at the end of the line is optional. There must always be at
least one space on both sides of the pipe except at the beginning and at
the end of the line. There is no need to align the pipes, but that often
makes the data easier to read.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"p">| </span><span=
 class=3D"gh">*** Settings ***</span><span class=3D"p">   |</span>
<span class=3D"p">| </span><span class=3D"kn">Documentation</span><span cla=
ss=3D"p">      | </span><span class=3D"s">Example using the pipe separated =
plain text format.</span><span class=3D"p"></span>
<span class=3D"p">| </span><span class=3D"kn">Library</span><span class=3D"=
p">            | </span><span class=3D"nn">OperatingSystem</span><span clas=
s=3D"p"></span>

<span class=3D"p">| </span><span class=3D"gh">*** Variables ***</span><span=
 class=3D"p">  |</span>
<span class=3D"p">| ${</span><span class=3D"nv">MESSAGE</span><span class=
=3D"p">}         | </span><span class=3D"s">Hello, world!</span><span class=
=3D"p"></span>

<span class=3D"p">| </span><span class=3D"gh">*** Test Cases ***</span><spa=
n class=3D"p"> |                 |              |</span>
<span class=3D"p">| </span><span class=3D"gu">My Test</span><span class=3D"=
p">            | [</span><span class=3D"kn">Documentation</span><span class=
=3D"p">] | </span><span class=3D"s">Example test</span><span class=3D"p"> |=
</span>
<span class=3D"p">|                    | </span><span class=3D"nf">Log</spa=
n><span class=3D"p">             | ${</span><span class=3D"nv">MESSAGE</spa=
n><span class=3D"p">}   |</span>
<span class=3D"p">|                    | </span><span class=3D"nf">My Keywo=
rd</span><span class=3D"p">      | </span><span class=3D"s">/tmp</span><spa=
n class=3D"p">         |</span>
<span class=3D"p">| </span><span class=3D"gu">Another Test</span><span clas=
s=3D"p">       | </span><span class=3D"nf">Should Be Equal</span><span clas=
s=3D"p"> | ${</span><span class=3D"nv">MESSAGE</span><span class=3D"p">}   =
| </span><span class=3D"s">Hello, world!</span><span class=3D"p"></span>

<span class=3D"p">| </span><span class=3D"gh">*** Keywords ***</span><span =
class=3D"p">   |                        |         |</span>
<span class=3D"p">| </span><span class=3D"gu">My Keyword</span><span class=
=3D"p">         | [</span><span class=3D"kn">Arguments</span><span class=3D=
"p">]            | ${</span><span class=3D"nv">path</span><span class=3D"p"=
>} |</span>
<span class=3D"p">|                    | </span><span class=3D"nf">Director=
y Should Exist</span><span class=3D"p"> | ${</span><span class=3D"nv">path<=
/span><span class=3D"p">} |</span>
</pre></div>
<p>There is no need to escape empty cells (other than the <a class=3D"refer=
ence internal" href=3D"http://robotframework.org/robotframework/latest/Robo=
tFrameworkUserGuide.html#escaping">trailing empty
cells</a>) when using the pipe separated format. Possible pipes surrounded =
by
spaces in the actual test data must be escaped with a backslash, though:</p=
>
<div class=3D"highlight"><pre><span></span><span class=3D"p">| </span><span=
 class=3D"gh">*** Test Cases ***</span><span class=3D"p"> |                =
 |                 |                      |</span>
<span class=3D"p">| </span><span class=3D"gu">Escaping Pipe</span><span cla=
ss=3D"p">      | ${</span><span class=3D"nv">file count</span><span class=
=3D"p">} =3D | </span><span class=3D"nf">Execute Command</span><span class=
=3D"p"> | </span><span class=3D"s">ls -1 *.txt \| wc -l</span><span class=
=3D"p"> |</span>
<span class=3D"p">|                    | </span><span class=3D"nf">Should B=
e Equal</span><span class=3D"p"> | ${</span><span class=3D"nv">file count</=
span><span class=3D"p">}   | </span><span class=3D"s">42</span><span class=
=3D"p">                   |</span>
</pre></div>
</div>
<div class=3D"section" id=3D"editing">
<h5>Editing</h5>
<p>Plain text files can be easily edited using normal text editors and IDEs=
.
<a class=3D"reference external" href=3D"http://robotframework.org/#tools">M=
any of these tools</a> also have plugins that support syntax highlighting
Robot Framework test data and may also provide other features such as keywo=
rd
completion. Robot Framework specific editors like <a class=3D"reference ext=
ernal" href=3D"https://github.com/robotframework/RIDE">RIDE</a> naturally s=
upport
the plain text format as well.</p>
<p>As already mentioned, plain text files containing non-ASCII characters m=
ust
be saved using the UTF-8 encoding.</p>
</div>
<div class=3D"section" id=3D"recognized-extensions">
<h5>Recognized extensions</h5>
<p>The recommended extension for <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
test-case-files">test case files</a> in the plain text format is
<span class=3D"file">.robot</span>. Files using this extension are parsed a=
utomatically.
Also the <span class=3D"file">.txt</span> extension can be used, but starti=
ng from Robot
Framework 3.1 the <span class=3D"option">--extension</span> option must be =
used to
explicitly tell that <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#selecting-fi=
les-to-parse">these files should be parsed</a>.</p>
<p>When creating <a class=3D"reference internal" href=3D"http://robotframew=
ork.org/robotframework/latest/RobotFrameworkUserGuide.html#resource-files">=
resource files</a>, it is possible to use the special
<span class=3D"file">.resource</span> extension in addition to the aforemen=
tioned
<span class=3D"file">.robot</span> and <span class=3D"file">.txt</span> ext=
ensions. This way resource files and
test cases files are easily separated from each others.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The <span class=3D"file">.resource</span> extension is ne=
w in Robot Framework 3.1.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"tsv-format">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id517">TSV format</a></h4>
<p>Files in the tab-separated values (TSV) format are typically edited in
spreadsheet programs and, because the syntax is so simple, they are easy
to generate programmatically. They are also pretty easy to edit using
normal text editors and they work well in version control, but the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#plain-text-format">plain text for=
mat</a> is even better suited for these purposes.</p>
<table border=3D"1" class=3D"tsv-example docutils">
<caption>Using the TSV format</caption>
<colgroup>
<col width=3D"19%">
<col width=3D"43%">
<col width=3D"19%">
<col width=3D"19%">
</colgroup>
<tbody valign=3D"top">
<tr><td>*Setting*</td>
<td>*Value*</td>
<td>*Value*</td>
<td>*Value*</td>
</tr>
<tr><td>Documentation</td>
<td>Example using the TSV format.</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr><td>Library</td>
<td>OperatingSystem</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr><td></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr><td></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr><td>*Variable*</td>
<td>*Value*</td>
<td>*Value*</td>
<td>*Value*</td>
</tr>
<tr><td>${MESSAGE}</td>
<td>Hello, world!</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr><td></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr><td></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr><td>*Test Case*</td>
<td>*Action*</td>
<td>*Argument*</td>
<td>*Argument*</td>
</tr>
<tr><td>My Test</td>
<td>[Documentation]</td>
<td>Example test</td>
<td>&nbsp;</td>
</tr>
<tr><td></td>
<td>Log</td>
<td>${MESSAGE}</td>
<td>&nbsp;</td>
</tr>
<tr><td></td>
<td>My Keyword</td>
<td>/tmp</td>
<td>&nbsp;</td>
</tr>
<tr><td></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr><td>Another Test</td>
<td>Should Be Equal</td>
<td>${MESSAGE}</td>
<td>Hello, world!</td>
</tr>
<tr><td></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr><td></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
</tr>
<tr><td>*Keyword*</td>
<td>*Action*</td>
<td>*Argument*</td>
<td>*Argument*</td>
</tr>
<tr><td>My Keyword</td>
<td>[Arguments]</td>
<td>${path}</td>
<td>&nbsp;</td>
</tr>
<tr><td></td>
<td>Directory Should Exist</td>
<td>${path}</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<p>The TSV format and the space separated variant of the <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#plain-text-format">plain text format</a>
are nearly identical, but earlier Robot Framework versions had slightly
different parser for these formats. The differences were:</p>
<ul class=3D"simple">
<li>The TSV parser did not require escaping empty intermediate cells.</li>
<li>The TSV parser removed possible quotes around cells that may be added
by spreadsheet programs.</li>
</ul>
<p>The TSV parser was deprecated in Robot Framework 3.1 and it will be remo=
ved
in the future. It is still possible to use the TSV format, but files
must be fully compatible with the plain text format. This basically require=
s
escaping all empty cells and configuring spreadsheet program or other tool
saving TSV files not to add surrounding quotes to cells.</p>
<div class=3D"section" id=3D"editing-test-data">
<h5>Editing test data</h5>
<p>You can create and edit TSV files in any spreadsheet program, such as
Microsoft Excel. Select the tab-separated format when you save the file.
It is also a good idea to turn all automatic corrections off and configure
the tool to treat all values in the file as plain text. As explained above,
TSV files should also be saved so that no quotes are added around the cells=
.</p>
<p>TSV files are relatively easy to edit with any text editor,
especially if the editor supports visually separating tabs from
spaces. The TSV format is also supported by <a class=3D"reference external"=
 href=3D"https://github.com/robotframework/RIDE">RIDE</a>.</p>
<p>Like plain text files, TSV files containing non-ASCII characters must be
saved using the UTF-8 encoding.</p>
</div>
<div class=3D"section" id=3D"id40">
<h5>Recognized extensions</h5>
<p>Files in the TSV format are customarily saved using the <span class=3D"f=
ile">.tsv</span>
extension, but starting from Robot Framework 3.1 the <span class=3D"option"=
>--extension</span>
option must be used to explicitly tell that <a class=3D"reference internal"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#selecting-files-to-parse">these files should be parsed</a>.
Another possibility is saving also these files using the the <span class=3D=
"file">.robot</span>
extension, but this requires the file to be fully compatible with the
plain text syntax.</p>
</div>
</div>
<div class=3D"section" id=3D"restructuredtext-format">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id518">reStructuredText format</a></=
h4>
<p><a class=3D"reference external" href=3D"http://docutils.sourceforge.net/=
rst.html">reStructuredText</a> (reST) is an easy-to-read plain text markup =
syntax that
is commonly used for documentation of Python projects (including
Python itself, as well as this User Guide). reST documents are most
often compiled to HTML, but also other output formats are supported.</p>
<p>Using reST with Robot Framework allows you to mix richly formatted docum=
ents
and test data in a concise text format that is easy to work with
using simple text editors, diff tools, and source control systems.</p>
<p>When using reST files with Robot Framework, test data is defined <a clas=
s=3D"reference internal" href=3D"http://robotframework.org/robotframework/l=
atest/RobotFrameworkUserGuide.html#using-code-blocks">using code
blocks</a>. Earlier Robot Framework versions also supported <a class=3D"ref=
erence internal" href=3D"http://robotframework.org/robotframework/latest/Ro=
botFrameworkUserGuide.html#using-tables">using tables</a> and
converting reST files to HTML, but this was deprecated in Robot Framework 3=
.1.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Using reST files with Robot Framework requires the Python=
 <a class=3D"reference external" href=3D"https://pypi.python.org/pypi/docut=
ils">docutils</a>
module to be installed.</p>
</div>
<div class=3D"section" id=3D"using-code-blocks">
<h5>Using code blocks</h5>
<p>reStructuredText documents can contain code examples in so called code b=
locks.
When these documents are compiled into HTML or other formats, the code bloc=
ks
are syntax highlighted using <a class=3D"reference external" href=3D"http:/=
/pygments.org/">Pygments</a>. In standard reST code blocks are
started using the <code>code</code> directive, but <a class=3D"reference ex=
ternal" href=3D"http://sphinx-doc.org/">Sphinx</a> uses <code>code-block</c=
ode>
or <code>sourcecode</code> instead. The name of the programming language in
the code block is given as an argument to the directive. For example, follo=
wing
code blocks contain Python and Robot Framework examples, respectively:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"p">..</span> <spa=
n class=3D"ow">code</span><span class=3D"p">::</span> <span class=3D"k">pyt=
hon</span>

   <span class=3D"k">def</span> <span class=3D"nf">example_keyword</span><s=
pan class=3D"p">():</span>
       <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'Hello, world!'</span><span class=3D"p">)</span>

<span class=3D"p">..</span> <span class=3D"ow">code</span><span class=3D"p"=
>::</span> <span class=3D"k">robotframework</span>

   <span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
   <span class=3D"gu">Example Test</span><span class=3D"p"></span>
   <span class=3D"p">    </span><span class=3D"nf">Example Keyword</span><s=
pan class=3D"p"></span>
</pre></div>
<p>When Robot Framework parses reStructuredText files, it first searches fo=
r
possible <code>code</code>, <code>code-block</code> or <code>sourcecode</co=
de> blocks
containing Robot Framework test data. If such code blocks are found, data
they contain is written into an in-memory file and executed. All data outsi=
de
the code blocks is ignored.</p>
<p>The test data in the code blocks must be defined using the <a class=3D"r=
eference internal" href=3D"http://robotframework.org/robotframework/latest/=
RobotFrameworkUserGuide.html#plain-text-format">plain text format</a>.
As the example below illustrates, both space and pipe separated variants ar=
e
supported:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">Example</span=
>
<span class=3D"gh">-------</span>

This text is outside code blocks and thus ignored.

<span class=3D"p">..</span> <span class=3D"ow">code</span><span class=3D"p"=
>::</span> <span class=3D"k">robotframework</span>

   <span class=3D"gh">*** Settings ***</span><span class=3D"p"></span>
   <span class=3D"kn">Documentation</span><span class=3D"p">    </span><spa=
n class=3D"s">Example using the reStructuredText format.</span><span class=
=3D"p"></span>
   <span class=3D"kn">Library</span><span class=3D"p">          </span><spa=
n class=3D"nn">OperatingSystem</span><span class=3D"p"></span>

   <span class=3D"gh">*** Variables ***</span><span class=3D"p"></span>
   <span class=3D"p">${</span><span class=3D"nv">MESSAGE</span><span class=
=3D"p">}       </span><span class=3D"s">Hello, world!</span><span class=3D"=
p"></span>

   <span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
   <span class=3D"gu">My Test</span><span class=3D"p"></span>
   <span class=3D"p">    [</span><span class=3D"kn">Documentation</span><sp=
an class=3D"p">]    </span><span class=3D"s">Example test</span><span class=
=3D"p"></span>
   <span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D=
"p">    ${</span><span class=3D"nv">MESSAGE</span><span class=3D"p">}</span=
>
   <span class=3D"p">    </span><span class=3D"nf">My Keyword</span><span c=
lass=3D"p">    </span><span class=3D"s">/tmp</span><span class=3D"p"></span=
>

   <span class=3D"gu">Another Test</span><span class=3D"p"></span>
   <span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><s=
pan class=3D"p">    ${</span><span class=3D"nv">MESSAGE</span><span class=
=3D"p">}    </span><span class=3D"s">Hello, world!</span><span class=3D"p">=
</span>

Also this text is outside code blocks and ignored. Above block used
the space separated plain text format and the block below uses the pipe
separated variant.

<span class=3D"p">..</span> <span class=3D"ow">code</span><span class=3D"p"=
>::</span> <span class=3D"k">robotframework</span>

   <span class=3D"p">| </span><span class=3D"gh">*** Keyword ***</span><spa=
n class=3D"p">  |                        |         |</span>
   <span class=3D"p">| </span><span class=3D"gu">My Keyword</span><span cla=
ss=3D"p">       | [</span><span class=3D"kn">Arguments</span><span class=3D=
"p">]            | ${</span><span class=3D"nv">path</span><span class=3D"p"=
>} |</span>
   <span class=3D"p">|                  | </span><span class=3D"nf">Directo=
ry Should Exist</span><span class=3D"p"> | ${</span><span class=3D"nv">path=
</span><span class=3D"p">} |</span>
</pre></div>
</div>
<div class=3D"section" id=3D"using-tables">
<h5>Using tables</h5>
<p>Earlier Robot Framework versions supported using reStructuredText also
so that test data was defined in tables. These files were then internally
converted to <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#html-format">HTML fo=
rmat</a> before parsing them. This functionality was
deprecated in Robot Framework 3.1 and will be removed in the future
along with the general support for the HTML format.</p>
</div>
<div class=3D"section" id=3D"id42">
<h5>Editing</h5>
<p>Test data in reStructuredText files can be edited with any text editor, =
and
many editors also provide automatic syntax highlighting for it.</p>
<p>Robot Framework requires reST files containing non-ASCII characters to b=
e
saved using the UTF-8 encoding.</p>
</div>
<div class=3D"section" id=3D"id43">
<h5>Recognized extensions</h5>
<p>Robot Framework supports reStructuredText files using both <span class=
=3D"file">.rst</span> and
<span class=3D"file">.rest</span> extension. Starting from Robot Framework =
3.1 the
<span class=3D"option">--extension</span> option must be used to explicitly=
 tell that
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#selecting-files-to-parse">these f=
iles should be parsed</a>.</p>
</div>
<div class=3D"section" id=3D"syntax-errors-in-rest-source-files">
<h5>Syntax errors in reST source files</h5>
<p>When Robot Framework parses reStructuredText files, errors below level
<code>SEVERE</code> are ignored to avoid noise about possible non-standard =
directives
and other such markup. This may hide also real errors, but they can be seen
when processing files using reStructuredText tooling normally.</p>
</div>
</div>
<div class=3D"section" id=3D"html-format">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id519">HTML format</a></h4>
<p>Earlier Robot Framework versions supported test data in HTML format but
this support has been deprecated in Robot Framework 3.1. All test data in
HTML format should be converted to the <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#plain-text-format">plain text format</a> or other supported
formats. This is typically easiest by using the built-in <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#tidy">Tidy</a> tool.</p>
</div>
</div>
<div class=3D"section" id=3D"rules-for-parsing-the-data">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id520">2.1.4&nbsp;&nbsp;&nbsp;Rules =
for parsing the data</a></h3>
<div class=3D"section" id=3D"ignored-data">
<span id=3D"comment"></span><h4><a class=3D"toc-backref" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#id521">I=
gnored data</a></h4>
<p>When Robot Framework parses the test data files, it ignores:</p>
<ul class=3D"simple">
<li>All data before the first <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#tes=
t-data-sections">test data section</a>. If the data format allows
data between sections, also that is ignored.</li>
<li>Data in the <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#test-data-section=
s">Comments</a> section.</li>
<li>All empty rows.</li>
<li>All empty cells at the end of rows, unless they are <a class=3D"referen=
ce internal" href=3D"http://robotframework.org/robotframework/latest/RobotF=
rameworkUserGuide.html#handling-empty-cells">escaped</a>.</li>
<li>All single backslashes (<span class=3D"codesc">\</span>) when not used =
for <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#escaping">escaping</a>.</li>
<li>All characters following the hash character (<code>#</code>), when it i=
s the first
character of a cell. This means that hash marks can be used to enter
comments in the test data.</li>
</ul>
<p>When Robot Framework ignores some data, this data is not available in
any resulting reports and, additionally, most tools used with Robot
Framework also ignore them. To add information that is visible in
Robot Framework outputs, place it to the documentation or other metadata of
test cases or suites, or log it with the <a class=3D"reference external" hr=
ef=3D"http://robotframework.org/robotframework/latest/libraries/BuiltIn.htm=
l">BuiltIn</a> keywords <span class=3D"name">Log</span> or
<span class=3D"name">Comment</span>.</p>
</div>
<div class=3D"section" id=3D"escaping">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id522">Escaping</a></h4>
<p>The escape character in Robot Framework test data is the backslash
(<span class=3D"codesc">\</span>) and additionally <a class=3D"reference in=
ternal" href=3D"http://robotframework.org/robotframework/latest/RobotFramew=
orkUserGuide.html#built-in-variables">built-in variables</a> <code>${EMPTY}=
</code> and <code>${SPACE}</code>
can often be used for escaping. Different escaping mechanisms are
discussed in the sections below.</p>
<div class=3D"section" id=3D"escaping-special-characters">
<h5>Escaping special characters</h5>
<p>The backslash character can be used to escape special characters
so that their literal values are used.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Escaping special characters</caption>
<colgroup>
<col width=3D"10%">
<col width=3D"61%">
<col width=3D"29%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Character</th>
<th class=3D"head">Meaning</th>
<th class=3D"head">Examples</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td><code>\$</code></td>
<td>Dollar sign, never starts a <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#s=
calar-variable">scalar variable</a>.</td>
<td><code>\${notvar}</code></td>
</tr>
<tr><td><code>\@</code></td>
<td>At sign, never starts a <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#list-=
variable">list variable</a>.</td>
<td><code>\@{notvar}</code></td>
</tr>
<tr><td><code>\&amp;</code></td>
<td>Ampersand, never starts a <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#dic=
tionary-variable">dictionary variable</a>.</td>
<td><code>\&amp;{notvar}</code></td>
</tr>
<tr><td><code>\%</code></td>
<td>Percent sign, never starts an <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#environment-variable">environment variable</a>.</td>
<td><code>\%{notvar}</code></td>
</tr>
<tr><td><code>\#</code></td>
<td>Hash sign, never starts a <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#com=
ment">comment</a>.</td>
<td><code>\# not comment</code></td>
</tr>
<tr><td><code>\=3D</code></td>
<td>Equal sign, never part of <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#nam=
ed-argument-syntax">named argument syntax</a>.</td>
<td><code>not\=3Dnamed</code></td>
</tr>
<tr><td><code>\|</code></td>
<td>Pipe character, not a separator in the <a class=3D"reference internal" =
href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserG=
uide.html#pipe-separated-format">pipe separated format</a>.</td>
<td><code>ls -1 *.txt \| wc -l</code></td>
</tr>
<tr><td><code>\\</code></td>
<td>Backslash character, never escapes anything.</td>
<td><code>c:\\temp, \\${var}</code></td>
</tr>
</tbody>
</table>
</div>
<div class=3D"section" id=3D"forming-escape-sequences">
<span id=3D"escape-sequences"></span><span id=3D"escape-sequence"></span><h=
5>Forming escape sequences</h5>
<p>The backslash character also allows creating special escape sequences th=
at are
recognized as characters that would otherwise be hard or impossible to crea=
te
in the test data.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Escape sequences</caption>
<colgroup>
<col width=3D"17%">
<col width=3D"47%">
<col width=3D"36%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Sequence</th>
<th class=3D"head">Meaning</th>
<th class=3D"head">Examples</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td><code>\n</code></td>
<td>Newline character.</td>
<td><code>first line\n2nd line</code></td>
</tr>
<tr><td><code>\r</code></td>
<td>Carriage return character</td>
<td><code>text\rmore text</code></td>
</tr>
<tr><td><code>\t</code></td>
<td>Tab character.</td>
<td><code>text\tmore text</code></td>
</tr>
<tr><td><code>\xhh</code></td>
<td>Character with hex value <code>hh</code>.</td>
<td><code>null byte: \x00, =C3=A4: \xE4</code></td>
</tr>
<tr><td><code>\uhhhh</code></td>
<td>Character with hex value <code>hhhh</code>.</td>
<td><code>snowman: \u2603</code></td>
</tr>
<tr><td><code>\Uhhhhhhhh</code></td>
<td>Character with hex value <code>hhhhhhhh</code>.</td>
<td><code>love hotel: \U0001f3e9</code></td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">All strings created in the test data, including character=
s like
<code>\x02</code>, are Unicode and must be explicitly converted to
byte strings if needed. This can be done, for example, using
<span class=3D"name">Convert To Bytes</span> or <span class=3D"name">Encode=
 String To Bytes</span> keywords
in <a class=3D"reference external" href=3D"http://robotframework.org/robotf=
ramework/latest/libraries/BuiltIn.html">BuiltIn</a> and <a class=3D"referen=
ce external" href=3D"http://robotframework.org/robotframework/latest/librar=
ies/String.html">String</a> libraries, respectively, or with
something like <code>value.encode('UTF-8')</code> in Python code.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If invalid hexadecimal values are used with <code>\x</cod=
e>, <code>\u</code>
or <code>\U</code> escapes, the end result is the original value without
the backslash character. For example, <code>\xAX</code> (not hex) and
<code>\U00110000</code> (too large value) result with <code>xAX</code>
and <code>U00110000</code>, respectively. This behavior may change in
the future, though.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#built-in-variab=
le">Built-in variable</a> <code>${\n}</code> can be used if operating syste=
m
dependent line terminator is needed (<code>\r\n</code> on Windows and
<code>\n</code> elsewhere).</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Possible un-escaped whitespace character after the <code>=
\n</code> is
ignored. This means that <code>two lines\nhere</code> and
<code>two lines\n here</code> are equivalent. The motivation for this
is to allow wrapping long lines containing newlines when using
the HTML format, but the same logic is used also with other formats.
An exception to this rule is that the whitespace character is not
ignored inside the <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#extended-varia=
ble-syntax">extended variable syntax</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"handling-empty-cells">
<h5>Handling empty cells</h5>
<p>If empty values are needed as arguments for keywords or otherwise, they =
often
need to be escaped to prevent them from being <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#ignored-data">ignored</a>. Empty trailing cells
must be escaped regardless of the test data format, and when using the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#space-separated-format">space sep=
arated format</a> all empty values must be escaped.</p>
<p>Empty cells can be escaped either with the backslash character or with
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#built-in-variable">built-in varia=
ble</a> <code>${EMPTY}</code>. The latter is typically recommended
as it is easier to understand. All these cases are illustrated by the follo=
wing
examples:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Using backslash</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p">    </span><span class=3D"s">first arg</span><span class=3D"p">  =
  </span><span class=3D"s">\</span><span class=3D"p"></span>
<span class=3D"gu">Using </span><span class=3D"p">${</span><span class=3D"n=
v">EMPTY</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p">    </span><span class=3D"s">first arg</span><span class=3D"p">  =
  ${</span><span class=3D"nv">EMPTY</span><span class=3D"p">}</span>
<span class=3D"gu">Non-trailing empty</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p">    ${</span><span class=3D"nv">EMPTY</span><span class=3D"p">}  =
   </span><span class=3D"s">second arg</span><span class=3D"p">    </span><=
span class=3D"c"># Escaping needed in space separated format</span>
</pre></div>
</div>
<div class=3D"section" id=3D"handling-spaces">
<h5>Handling spaces</h5>
<p>Spaces, especially consecutive spaces, as part of arguments for keywords=
 or
needed otherwise are problematic for two reasons:</p>
<ul class=3D"simple">
<li>Two or more consecutive spaces is considered a separator when using the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#space-separated-format">space sep=
arated format</a>.</li>
<li>Leading and trailing spaces are ignored when using the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#pipe-separated-format">pipe separ=
ated format</a>.</li>
</ul>
<p>In these cases spaces need to be escaped. Similarly as when escaping emp=
ty
cells, it is possible to do that either by using the backslash character or
by using the <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#built-in-variable">b=
uilt-in variable</a> <code>${SPACE}</code>.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Escaping spaces examples</caption>
<colgroup>
<col width=3D"33%">
<col width=3D"33%">
<col width=3D"33%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Escaping with backslash</th>
<th class=3D"head">Escaping with <code>${SPACE}</code></th>
<th class=3D"head">Notes</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td><span class=3D"codesc">\ leading space</span></td>
<td><code>${SPACE}leading space</code></td>
<td>&nbsp;</td>
</tr>
<tr><td><span class=3D"codesc">trailing space \</span></td>
<td><code>trailing space${SPACE}</code></td>
<td>Backslash must be after the space.</td>
</tr>
<tr><td><span class=3D"codesc">\ \</span></td>
<td><code>${SPACE}</code></td>
<td>Backslash needed on both sides.</td>
</tr>
<tr><td><span class=3D"codesc">consecutive \ \ spaces</span></td>
<td><code>consecutive${SPACE * 3}spaces</code></td>
<td>Using <a class=3D"reference internal" href=3D"http://robotframework.org=
/robotframework/latest/RobotFrameworkUserGuide.html#extended-variable-synta=
x">extended variable syntax</a>.</td>
</tr>
</tbody>
</table>
<p>As the above examples show, using the <code>${SPACE}</code> variable oft=
en makes the
test data easier to understand. It is especially handy in combination with
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#extended-variable-syntax">ext=
ended variable syntax</a> when more than one space is needed.</p>
</div>
</div>
<div class=3D"section" id=3D"dividing-test-data-to-several-rows">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id523">Dividing test data to several=
 rows</a></h4>
<p>If there is more data than readily fits a row, it possible to use ellips=
is
(<code>...</code>) to continue the previous line. In test case and keyword =
tables,
the ellipsis must be preceded by at least one empty cell. In settings and
variable tables, it can be placed directly under the setting or variable na=
me.
In all tables, all empty cells before the ellipsis are ignored.</p>
<p>Also suite, test or keyword documentation and value of test suite metada=
ta
can be too long to fit into one row nicely. These values can be split into
multiple rows as well, and they will be <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#newlines-in-test-data">joined together with newlines</a>.</p>
<p>All the syntax discussed above is illustrated in the following examples.
In the first three tables test data has not been split, and
the following three illustrate how fewer columns are needed after
splitting the data to several rows.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Documentation</span><span class=3D"p">      </span><span=
 class=3D"s">This is documentation for this test suite.\nThis kind of docum=
entation can often be get quite long...</span><span class=3D"p"></span>
<span class=3D"kn">Default Tags</span><span class=3D"p">       </span><span=
 class=3D"s">default tag 1</span><span class=3D"p">    </span><span class=
=3D"s">default tag 2</span><span class=3D"p">    </span><span class=3D"s">d=
efault tag 3</span><span class=3D"p">    </span><span class=3D"s">default t=
ag 4</span><span class=3D"p">    </span><span class=3D"s">default tag 5</sp=
an><span class=3D"p"></span>

<span class=3D"gh">*** Variable ***</span><span class=3D"p"></span>
<span class=3D"p">@{</span><span class=3D"nv">LIST</span><span class=3D"p">=
}            </span><span class=3D"s">this</span><span class=3D"p">     </s=
pan><span class=3D"s">list</span><span class=3D"p">     </span><span class=
=3D"s">is</span><span class=3D"p">      </span><span class=3D"s">quite</spa=
n><span class=3D"p">    </span><span class=3D"s">long</span><span class=3D"=
p">     </span><span class=3D"s">and</span><span class=3D"p">    </span><sp=
an class=3D"s">items in it could also be long</span><span class=3D"p"></spa=
n>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Tags</span><span class=3D"=
p">]    </span><span class=3D"s">you</span><span class=3D"p">    </span><sp=
an class=3D"s">probably</span><span class=3D"p">    </span><span class=3D"s=
">do</span><span class=3D"p">    </span><span class=3D"s">not</span><span c=
lass=3D"p">    </span><span class=3D"s">have</span><span class=3D"p">    </=
span><span class=3D"s">this</span><span class=3D"p">    </span><span class=
=3D"s">many</span><span class=3D"p">    </span><span class=3D"s">tags</span=
><span class=3D"p">    </span><span class=3D"s">in</span><span class=3D"p">=
    </span><span class=3D"s">real</span><span class=3D"p">   </span><span c=
lass=3D"s">life</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do X</span><span class=3D"p=
">    </span><span class=3D"s">first argument</span><span class=3D"p">    <=
/span><span class=3D"s">second argument</span><span class=3D"p">    </span>=
<span class=3D"s">third argument</span><span class=3D"p">    </span><span c=
lass=3D"s">fourth argument</span><span class=3D"p">    </span><span class=
=3D"s">fifth argument</span><span class=3D"p">    </span><span class=3D"s">=
sixth argument</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">var</span><span class=3D"=
p">} =3D    </span><span class=3D"nf">Get X</span><span class=3D"p">    </s=
pan><span class=3D"s">first argument passed to this keyword is pretty long<=
/span><span class=3D"p">   </span><span class=3D"s">second argument passed =
to this keyword is long too</span><span class=3D"p"></span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Documentation</span><span class=3D"p">      </span><span=
 class=3D"s">This is documentation for this test suite.</span><span class=
=3D"p"></span>
<span class=3D"p">...                </span><span class=3D"s">This kind of =
documentation can often be get quite long...</span><span class=3D"p"></span=
>
<span class=3D"kn">Default Tags</span><span class=3D"p">       </span><span=
 class=3D"s">default tag 1</span><span class=3D"p">    </span><span class=
=3D"s">default tag 2</span><span class=3D"p">    </span><span class=3D"s">d=
efault tag 3</span><span class=3D"p"></span>
<span class=3D"p">...                </span><span class=3D"s">default tag 4=
</span><span class=3D"p">    </span><span class=3D"s">default tag 5</span><=
span class=3D"p"></span>

<span class=3D"gh">*** Variable ***</span><span class=3D"p"></span>
<span class=3D"p">@{</span><span class=3D"nv">LIST</span><span class=3D"p">=
}            </span><span class=3D"s">this</span><span class=3D"p">     </s=
pan><span class=3D"s">list</span><span class=3D"p">     </span><span class=
=3D"s">is</span><span class=3D"p">      </span><span class=3D"s">quite</spa=
n><span class=3D"p">    </span><span class=3D"s">long</span><span class=3D"=
p">     </span><span class=3D"s">and</span><span class=3D"p"></span>
<span class=3D"p">...                </span><span class=3D"s">items in it c=
ould also be long</span><span class=3D"p"></span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Tags</span><span class=3D"=
p">]    </span><span class=3D"s">you</span><span class=3D"p">    </span><sp=
an class=3D"s">probably</span><span class=3D"p">    </span><span class=3D"s=
">do</span><span class=3D"p">    </span><span class=3D"s">not</span><span c=
lass=3D"p">    </span><span class=3D"s">have</span><span class=3D"p">    </=
span><span class=3D"s">this</span><span class=3D"p">    </span><span class=
=3D"s">many</span><span class=3D"p"></span>
<span class=3D"p">    ...       </span><span class=3D"s">tags</span><span c=
lass=3D"p">    </span><span class=3D"s">in</span><span class=3D"p">    </sp=
an><span class=3D"s">real</span><span class=3D"p">   </span><span class=3D"=
s">life</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do X</span><span class=3D"p=
">    </span><span class=3D"s">first argument</span><span class=3D"p">    <=
/span><span class=3D"s">second argument</span><span class=3D"p">    </span>=
<span class=3D"s">third argument</span><span class=3D"p"></span>
<span class=3D"p">    ...    </span><span class=3D"s">fourth argument</span=
><span class=3D"p">    </span><span class=3D"s">fifth argument</span><span =
class=3D"p">    </span><span class=3D"s">sixth argument</span><span class=
=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">var</span><span class=3D"=
p">} =3D    </span><span class=3D"nf">Get X</span><span class=3D"p"></span>
<span class=3D"p">    ...    </span><span class=3D"s">first argument passed=
 to this keyword is pretty long</span><span class=3D"p"></span>
<span class=3D"p">    ...    </span><span class=3D"s">second argument passe=
d to this keyword is long too</span><span class=3D"p"></span>
</pre></div>
</div>
</div>
</div>
<div class=3D"section" id=3D"creating-test-cases">
<span id=3D"creating-tests"></span><h2><a class=3D"toc-backref" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#i=
d505">2.2&nbsp;&nbsp;&nbsp;Creating test cases</a></h2>
<p>This section describes the overall test case syntax. Organizing test
cases into <a class=3D"reference external" href=3D"http://robot-framework.r=
eadthedocs.org/en/master/autodoc/robot.running.html#robot.running.model.Tes=
tSuite">test suites</a> using <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#tes=
t-case-files">test case files</a> and <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#test-suite-directories">test suite
directories</a> is discussed in the next section.</p>
<p>When using Robot Framework for other automation purposes than test
automation, it is recommended to create <em>tasks</em> instead of tests.
The task syntax is for most parts identical to the test syntax,
and the differences are explained in the <a class=3D"reference internal" hr=
ef=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGui=
de.html#creating-tasks">Creating tasks</a> section.</p>
<div class=3D"contents local topic" id=3D"id50">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-case-syntax" id=3D"id524=
">2.2.1&nbsp;&nbsp;&nbsp;Test case syntax</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#basic-syntax" id=3D"id525">Ba=
sic syntax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#settings-in-the-test-case-tab=
le" id=3D"id526">Settings in the Test Case table</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-case-related-settings-in=
-the-setting-table" id=3D"id527">Test case related settings in the Setting =
table</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-arguments" id=3D"id528"=
>2.2.2&nbsp;&nbsp;&nbsp;Using arguments</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#positional-arguments" id=3D"i=
d529">Positional arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#default-values" id=3D"id530">=
Default values</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variable-number-of-arguments"=
 id=3D"id531">Variable number of arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#named-arguments" id=3D"id532"=
>Named arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#free-named-arguments" id=3D"i=
d533">Free named arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#named-only-arguments" id=3D"i=
d534">Named-only arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#arguments-embedded-to-keyword=
-names" id=3D"id535">Arguments embedded to keyword names</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#failures" id=3D"id536">2.2.3&=
nbsp;&nbsp;&nbsp;Failures</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#when-test-case-fails" id=3D"i=
d537">When test case fails</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#error-messages" id=3D"id538">=
Error messages</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-case-name-and-documentat=
ion" id=3D"id539">2.2.4&nbsp;&nbsp;&nbsp;Test case name and documentation</=
a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#tagging-test-cases" id=3D"id5=
40">2.2.5&nbsp;&nbsp;&nbsp;Tagging test cases</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#reserved-tags" id=3D"id541">R=
eserved tags</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-setup-and-teardown" id=
=3D"id542">2.2.6&nbsp;&nbsp;&nbsp;Test setup and teardown</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-templates" id=3D"id543">=
2.2.7&nbsp;&nbsp;&nbsp;Test templates</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#basic-usage" id=3D"id544">Bas=
ic usage</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#templates-with-embedded-argum=
ents" id=3D"id545">Templates with embedded arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#templates-with-for-loops" id=
=3D"id546">Templates with for loops</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#different-test-case-styles" i=
d=3D"id547">2.2.8&nbsp;&nbsp;&nbsp;Different test case styles</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#keyword-driven-style" id=3D"i=
d548">Keyword-driven style</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#data-driven-style" id=3D"id54=
9">Data-driven style</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#behavior-driven-style" id=3D"=
id550">Behavior-driven style</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"test-case-syntax">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id524">2.2.1&nbsp;&nbsp;&nbsp;Test c=
ase syntax</a></h3>
<div class=3D"section" id=3D"basic-syntax">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id525">Basic syntax</a></h4>
<p>Test cases are constructed in test case tables from the available
keywords. Keywords can be imported from <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#using-test-libraries">test libraries</a> or <a class=3D"reference in=
ternal" href=3D"http://robotframework.org/robotframework/latest/RobotFramew=
orkUserGuide.html#resource-files">resource
files</a>, or created in the <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#crea=
ting-user-keywords">keyword table</a> of the test case file
itself.</p>
<p>The first column in the test case table contains test case names. A
test case starts from the row with something in this column and
continues to the next test case name or to the end of the table. It is
an error to have something between the table headers and the first
test.</p>
<p>The second column normally has keyword names. An exception to this rule
is <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#user-keyword-return-values">se=
tting variables from keyword return values</a>, when the second and
possibly also the subsequent columns contain variable names and a keyword
name is located after them. In either case, columns after the keyword name
contain possible arguments to the specified keyword.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Valid Login</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Open Login Page</span><span=
 class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Input Username</span><span =
class=3D"p">    </span><span class=3D"s">demo</span><span class=3D"p"></spa=
n>
<span class=3D"p">    </span><span class=3D"nf">Input Password</span><span =
class=3D"p">    </span><span class=3D"s">mode</span><span class=3D"p"></spa=
n>
<span class=3D"p">    </span><span class=3D"nf">Submit Credentials</span><s=
pan class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Welcome Page Should Be Open=
</span><span class=3D"p"></span>

<span class=3D"gu">Setting Variables</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p">    </span><span class=3D"s">first argument</span><span class=3D"=
p">    </span><span class=3D"s">second argument</span><span class=3D"p"></s=
pan>
<span class=3D"p">    ${</span><span class=3D"nv">value</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Get Some Value</span><span class=
=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">value</span><span class=3D"p">=
}    </span><span class=3D"s">Expected value</span><span class=3D"p"></span=
>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Although test case names can contain any character, using=
 <code>?</code> and
especially <code>*</code> is not generally recommended because they are
considered to be <a class=3D"reference internal" href=3D"http://robotframew=
ork.org/robotframework/latest/RobotFrameworkUserGuide.html#wildcards">wildc=
ards</a> when <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#selecting-test-case=
s">selecting test cases</a>.
For example, trying to run only a test with name <span class=3D"name">Examp=
le *</span>
like <code>--test 'Example *'</code> will actually run any test starting wi=
th
<span class=3D"name">Example</span>.</p>
</div>
</div>
<div class=3D"section" id=3D"settings-in-the-test-case-table">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id526">Settings in the Test Case tab=
le</a></h4>
<p>Test cases can also have their own settings. Setting names are always
in the second column, where keywords normally are, and their values
are in the subsequent columns. Setting names have square brackets around
them to distinguish them from keywords. The available settings are listed
below and explained later in this section.</p>
<dl class=3D"docutils">
<dt><span class=3D"setting">[Documentation]</span></dt>
<dd>Used for specifying a <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-ca=
se-name-and-documentation">test case documentation</a>.</dd>
<dt><span class=3D"setting">[Tags]</span></dt>
<dd>Used for <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#tagging-test-cases">=
tagging test cases</a>.</dd>
<dt><span class=3D"setting">[Setup]</span>, <span class=3D"setting">[Teardo=
wn]</span></dt>
<dd>Specify <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#test-setup-and-teardo=
wn">test setup and teardown</a>.</dd>
<dt><span class=3D"setting">[Template]</span></dt>
<dd>Specifies the <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#test-templates"=
>template keyword</a> to use. The test itself will contain only
data to use as arguments to that keyword.</dd>
<dt><span class=3D"setting">[Timeout]</span></dt>
<dd>Used for setting a <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-case-=
timeout">test case timeout</a>. <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#t=
imeouts">Timeouts</a> are discussed in
their own section.</dd>
</dl>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Setting names are case-insensitive, but the format used a=
bove is
recommended. Prior to Robot Framework 3.1, settings were also
space-insensitive meaning that extra spaces could be added (e.g.
<code>[T a g s]</code>). This is now deprecated and only the format above,
case-insensitively, is supported. Possible space between brackets
and the name (e.g. <code>[ Tags ]</code>) is still allowed.</p>
</div>
<p>Example test case with settings:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Test With Settings</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Another dummy test</span><span cl=
ass=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Tags</span><span class=3D"=
p">]    </span><span class=3D"s">dummy</span><span class=3D"p">    </span><=
span class=3D"s">owner-johndoe</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Hello, world!</span><span class=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"test-case-related-settings-in-the-setting-tabl=
e">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id527">Test case related settings in=
 the Setting table</a></h4>
<p>The Setting table can have the following test case related
settings. These settings are mainly default values for the
test case specific settings listed earlier.</p>
<dl class=3D"docutils">
<dt><span class=3D"setting">Force Tags</span>, <span class=3D"setting">Defa=
ult Tags</span></dt>
<dd>The forced and default values for <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#tagging-test-cases">tags</a>.</dd>
<dt><span class=3D"setting">Test Setup</span>, <span class=3D"setting">Test=
 Teardown</span></dt>
<dd>The default values for <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-s=
etup-and-teardown">test setup and teardown</a>.</dd>
<dt><span class=3D"setting">Test Template</span></dt>
<dd>The default <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#test-templates">t=
emplate keyword</a> to use.</dd>
<dt><span class=3D"setting">Test Timeout</span></dt>
<dd>The default value for <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-ca=
se-timeout">test case timeout</a>. <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#timeouts">Timeouts</a> are discussed in
their own section.</dd>
</dl>
</div>
</div>
<div class=3D"section" id=3D"using-arguments">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id528">2.2.2&nbsp;&nbsp;&nbsp;Using =
arguments</a></h3>
<p>The earlier examples have already demonstrated keywords taking
different arguments, and this section discusses this important
functionality more thoroughly. How to actually implement <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#user-keyword-arguments">user
keywords</a> and <a class=3D"reference internal" href=3D"http://robotframew=
ork.org/robotframework/latest/RobotFrameworkUserGuide.html#keyword-argument=
s">library keywords</a> with different arguments is
discussed in separate sections.</p>
<p>Keywords can accept zero or more arguments, and some arguments may
have default values. What arguments a keyword accepts depends on its
implementation, and typically the best place to search this
information is keyword's documentation. In the examples in this
section the documentation is expected to be generated using the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#libdoc">Libdoc</a> tool, but the =
same information is available on
documentation generated by generic documentation tools such as
<tt class=3D"docutils literal">javadoc</tt>.</p>
<div class=3D"section" id=3D"positional-arguments">
<span id=3D"positional-argument"></span><h4><a class=3D"toc-backref" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#id529">Positional arguments</a></h4>
<p>Most keywords have a certain number of arguments that must always be
given.  In the keyword documentation this is denoted by specifying the
argument names separated with a comma like <code>first, second,
third</code>. The argument names actually do not matter in this case, excep=
t
that they should explain what the argument does, but it is important
to have exactly the same number of arguments as specified in the
documentation. Using too few or too many arguments will result in an
error.</p>
<p>The test below uses keywords <span class=3D"name">Create Directory</span=
> and <span class=3D"name">Copy
File</span> from the <a class=3D"reference external" href=3D"http://robotfr=
amework.org/robotframework/latest/libraries/OperatingSystem.html">Operating=
System</a> library. Their arguments are
specified as <code>path</code> and <code>source, destination</code>, which =
means
that they take one and two arguments, respectively. The last keyword,
<span class=3D"name">No Operation</span> from <a class=3D"reference externa=
l" href=3D"http://robotframework.org/robotframework/latest/libraries/BuiltI=
n.html">BuiltIn</a>, takes no arguments.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Create Directory</span><spa=
n class=3D"p">    ${</span><span class=3D"nv">TEMPDIR</span><span class=3D"=
p">}</span><span class=3D"s">/stuff</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Copy File</span><span class=
=3D"p">    ${</span><span class=3D"nv">CURDIR</span><span class=3D"p">}</sp=
an><span class=3D"s">/file.txt</span><span class=3D"p">    ${</span><span c=
lass=3D"nv">TEMPDIR</span><span class=3D"p">}</span><span class=3D"s">/stuf=
f</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"default-values">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id530">Default values</a></h4>
<p>Arguments often have default values which can either be given or
not. In the documentation the default value is typically separated
from the argument name with an equal sign like <code>name=3Ddefault
value</code>, but with keywords implemented using Java there may be
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#default-values-with-java">multipl=
e implementations</a> of the same keyword with different
arguments instead. It is possible that all the arguments have default
values, but there cannot be any positional arguments after arguments
with default values.</p>
<p>Using default values is illustrated by the example below that uses
<span class=3D"name">Create File</span> keyword which has arguments <code>p=
ath, content=3D,
encoding=3DUTF-8</code>. Trying to use it without any arguments or more tha=
n
three arguments would not work.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Create File</span><span cla=
ss=3D"p">    ${</span><span class=3D"nv">TEMPDIR</span><span class=3D"p">}<=
/span><span class=3D"s">/empty.txt</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Create File</span><span cla=
ss=3D"p">    ${</span><span class=3D"nv">TEMPDIR</span><span class=3D"p">}<=
/span><span class=3D"s">/utf-8.txt</span><span class=3D"p">         </span>=
<span class=3D"s">Hyv=C3=A4 esimerkki</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Create File</span><span cla=
ss=3D"p">    ${</span><span class=3D"nv">TEMPDIR</span><span class=3D"p">}<=
/span><span class=3D"s">/iso-8859-1.txt</span><span class=3D"p">    </span>=
<span class=3D"s">Hyv=C3=A4 esimerkki</span><span class=3D"p">    </span><s=
pan class=3D"s">ISO-8859-1</span><span class=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"variable-number-of-arguments">
<span id=3D"varargs"></span><h4><a class=3D"toc-backref" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#id531">V=
ariable number of arguments</a></h4>
<p>It is also possible that a keyword accepts any number of arguments.
These so called <em>varargs</em> can be combined with mandatory arguments
and arguments with default values, but they are always given after
them. In the documentation they have an asterisk before the argument
name like <code>*varargs</code>.</p>
<p>For example, <span class=3D"name">Remove Files</span> and <span class=3D=
"name">Join Paths</span> keywords from
the <a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/libraries/OperatingSystem.html">OperatingSystem</a> librar=
y have arguments <code>*paths</code> and <code>base, *parts</code>,
respectively. The former can be used with any number of arguments, but
the latter requires at least one argument.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Remove Files</span><span cl=
ass=3D"p">    ${</span><span class=3D"nv">TEMPDIR</span><span class=3D"p">}=
</span><span class=3D"s">/f1.txt</span><span class=3D"p">    ${</span><span=
 class=3D"nv">TEMPDIR</span><span class=3D"p">}</span><span class=3D"s">/f2=
.txt</span><span class=3D"p">    ${</span><span class=3D"nv">TEMPDIR</span>=
<span class=3D"p">}</span><span class=3D"s">/f3.txt</span><span class=3D"p"=
></span>
<span class=3D"p">    @{</span><span class=3D"nv">paths</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Join Paths</span><span class=3D"p=
">    ${</span><span class=3D"nv">TEMPDIR</span><span class=3D"p">}    </sp=
an><span class=3D"s">f1.txt</span><span class=3D"p">    </span><span class=
=3D"s">f2.txt</span><span class=3D"p">    </span><span class=3D"s">f3.txt</=
span><span class=3D"p">    </span><span class=3D"s">f4.txt</span><span clas=
s=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"named-arguments">
<span id=3D"named-argument-syntax"></span><h4><a class=3D"toc-backref" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#id532">Named arguments</a></h4>
<p>The named argument syntax makes using arguments with <a class=3D"referen=
ce internal" href=3D"http://robotframework.org/robotframework/latest/RobotF=
rameworkUserGuide.html#default-values">default values</a> more
flexible, and allows explicitly labeling what a certain argument value mean=
s.
Technically named arguments work exactly like <a class=3D"reference externa=
l" href=3D"http://docs.python.org/tutorial/controlflow.html#keyword-argumen=
ts">keyword arguments</a> in Python.</p>
<div class=3D"section" id=3D"id55">
<h5>Basic syntax</h5>
<p>It is possible to name an argument given to a keyword by prefixing the v=
alue
with the name of the argument like <code>arg=3Dvalue</code>. This is especi=
ally
useful when multiple arguments have default values, as it is
possible to name only some the arguments and let others use their defaults.
For example, if a keyword accepts arguments <code>arg1=3Da, arg2=3Db, arg3=
=3Dc</code>,
and it is called with one argument <code>arg3=3Doverride</code>, arguments
<code>arg1</code> and <code>arg2</code> get their default values, but <code=
>arg3</code>
gets value <code>override</code>. If this sounds complicated, the <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#named-arguments-example">named arguments
example</a> below hopefully makes it more clear.</p>
<p>The named argument syntax is both case and space sensitive. The former
means that if you have an argument <code>arg</code>, you must use it like
<code>arg=3Dvalue</code>, and neither <code>Arg=3Dvalue</code> nor <code>AR=
G=3Dvalue</code>
works.  The latter means that spaces are not allowed before the <code>=3D</=
code>
sign, and possible spaces after it are considered part of the given value.<=
/p>
<p>When the named argument syntax is used with <a class=3D"reference intern=
al" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#creating-user-keywords">user keywords</a>, the argument
names must be given without the <code>${}</code> decoration. For example, u=
ser
keyword with arguments <code>${arg1}=3Dfirst, ${arg2}=3Dsecond</code> must =
be used
like <code>arg2=3Doverride</code>.</p>
<p>Using normal positional arguments after named arguments like, for exampl=
e,
<code>| Keyword | arg=3Dvalue | positional |</code>, does not work.
The relative order of the named arguments does not matter.</p>
</div>
<div class=3D"section" id=3D"named-arguments-with-variables">
<h5>Named arguments with variables</h5>
<p>It is possible to use <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable=
s">variables</a> in both named argument names and values.
If the value is a single <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#scalar-v=
ariable">scalar variable</a>, it is passed to the keyword as-is.
This allows using any objects, not only strings, as values also when using
the named argument syntax. For example, calling a keyword like <code>arg=3D=
${object}</code>
will pass the variable <code>${object}</code> to the keyword without conver=
ting it to
a string.</p>
<p>If variables are used in named argument names, variables are resolved be=
fore
matching them against argument names.</p>
<p>The named argument syntax requires the equal sign to be written literall=
y
in the keyword call. This means that variable alone can never trigger the
named argument syntax, not even if it has a value like <code>foo=3Dbar</cod=
e>. This is
important to remember especially when wrapping keywords into other keywords=
.
If, for example, a keyword takes a <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#variable-number-of-arguments">variable number of arguments</a> like
<code>@{args}</code> and passes all of them to another keyword using the sa=
me <code>@{args}</code>
syntax, possible <code>named=3Darg</code> syntax used in the calling side i=
s not recognized.
This is illustrated by the example below.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Run Program</span><span cla=
ss=3D"p">    </span><span class=3D"s">shell=3DTrue</span><span class=3D"p">=
    </span><span class=3D"c"># This will not come as a named argument to Ru=
n Process</span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">Run Program</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{</span><span class=3D"nv">args</span><span class=3D"p">}</sp=
an>
<span class=3D"p">    </span><span class=3D"nf">Run Process</span><span cla=
ss=3D"p">    </span><span class=3D"s">program.py</span><span class=3D"p">  =
  @{</span><span class=3D"nv">args</span><span class=3D"p">}    </span><spa=
n class=3D"c"># Named arguments are not recognized from inside @{args}</spa=
n>
</pre></div>
<p>If keyword needs to accept and pass forward any named arguments, it must=
 be
changed to accept <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#free-named-argu=
ments">free named arguments</a>. See <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#free-named-argument-examples">free named argument examples</a>
for a wrapper keyword version that can pass both positional and named
arguments forward.</p>
</div>
<div class=3D"section" id=3D"escaping-named-arguments-syntax">
<h5>Escaping named arguments syntax</h5>
<p>The named argument syntax is used only when the part of the argument
before the equal sign matches one of the keyword's arguments. It is possibl=
e
that there is a positional argument with a literal value like <code>foo=3Dq=
uux</code>,
and also an unrelated argument with name <code>foo</code>. In this case the=
 argument
<code>foo</code> either incorrectly gets the value <code>quux</code> or, mo=
re likely,
there is a syntax error.</p>
<p>In these rare cases where there are accidental matches, it is possible t=
o
use the backslash character to <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#es=
caping">escape</a> the syntax like <code>foo\=3Dquux</code>.
Now the argument will get a literal value <code>foo=3Dquux</code>. Note tha=
t escaping
is not needed if there are no arguments with name <code>foo</code>, but bec=
ause it
makes the situation more explicit, it may nevertheless be a good idea.</p>
</div>
<div class=3D"section" id=3D"where-named-arguments-are-supported">
<h5>Where named arguments are supported</h5>
<p>As already explained, the named argument syntax works with keywords. In
addition to that, it also works when <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#importing-libraries">importing libraries</a>.</p>
<p>Naming arguments is supported by <a class=3D"reference internal" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#creating-user-keywords">user keywords</a> and by most <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#using-test-libraries">test libraries</a>.
The only exception are Java based libraries that use the <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#creating-static-keywords">static library API</a>.
Library documentation generated with <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#libdoc">Libdoc</a> has a note does the library
support named arguments or not.</p>
</div>
<div class=3D"section" id=3D"named-arguments-example">
<h5>Named arguments example</h5>
<p>The following example demonstrates using the named arguments syntax with
library keywords, user keywords, and when importing the <a class=3D"referen=
ce external" href=3D"http://robotframework.org/robotframework/latest/librar=
ies/Telnet.html">Telnet</a> test library.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">Telnet</span><span class=3D"p">    </span><span class=3D"s">prompt=
=3D$</span><span class=3D"p">    </span><span class=3D"s">default_log_level=
=3DDEBUG</span><span class=3D"p"></span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Open connection</span><span=
 class=3D"p">    </span><span class=3D"s">10.0.0.42</span><span class=3D"p"=
>    </span><span class=3D"s">port=3D</span><span class=3D"p">${</span><spa=
n class=3D"nv">PORT</span><span class=3D"p">}    </span><span class=3D"s">a=
lias=3Dexample</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">List files</span><span clas=
s=3D"p">    </span><span class=3D"s">options=3D-lh</span><span class=3D"p">=
</span>
<span class=3D"p">    </span><span class=3D"nf">List files</span><span clas=
s=3D"p">    </span><span class=3D"s">path=3D/tmp</span><span class=3D"p">  =
  </span><span class=3D"s">options=3D-l</span><span class=3D"p"></span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">List files</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">path</span><span class=3D"p">}</sp=
an><span class=3D"s">=3D.</span><span class=3D"p">    ${</span><span class=
=3D"nv">options</span><span class=3D"p">}</span><span class=3D"s">=3D</span=
><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Execute command</span><span=
 class=3D"p">    </span><span class=3D"s">ls </span><span class=3D"p">${</s=
pan><span class=3D"nv">options</span><span class=3D"p">}</span><span class=
=3D"s"> </span><span class=3D"p">${</span><span class=3D"nv">path</span><sp=
an class=3D"p">}</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"free-named-arguments">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id533">Free named arguments</a></h4>
<p>Robot Framework supports <em>free named arguments</em>, often also calle=
d <em>free
keyword arguments</em> or <em>kwargs</em>, similarly as <a class=3D"referen=
ce external" href=3D"http://docs.python.org/tutorial/controlflow.html#keywo=
rd-arguments">Python supports **kwargs</a>.
What this means is that a keyword can receive all arguments that use
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#named-argument-syntax">named =
argument syntax</a> (<code>name=3Dvalue</code>) and do not match any argume=
nts
specified in the signature of the keyword.</p>
<p>Free named arguments are supported by same keyword types than <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#where-named-arguments-are-supported">norm=
al named
arguments</a>. How keywords specify that they accept free named arguments
depends on the keyword type. For example, <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#free-keyword-arguments-kwargs">Python based keywords</a> simply us=
e
<code>**kwargs</code> and <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#free-na=
med-arguments-with-user-keywords">user keywords</a> use <code>&amp;{kwargs}=
</code>.</p>
<p>Free named arguments support variables similarly as <a class=3D"referenc=
e internal" href=3D"http://robotframework.org/robotframework/latest/RobotFr=
ameworkUserGuide.html#named-arguments-with-variables">named arguments</a>. =
In practice that means that variables
can be used both in names and values, but the escape sign must always be
visible literally. For example, both <code>foo=3D${bar}</code> and <code>${=
foo}=3D${bar}</code> are
valid, as long as the variables that are used exist. An extra limitation is
that free argument names must always be strings.</p>
<div class=3D"section" id=3D"examples">
<span id=3D"free-named-argument-examples"></span><h5>Examples</h5>
<p>As the first example of using free named arguments, let's take a look at
<span class=3D"name">Run Process</span> keyword in the <a class=3D"referenc=
e external" href=3D"http://robotframework.org/robotframework/latest/librari=
es/Process.html">Process</a> library. It has a signature
<code>command, *arguments, **configuration</code>, which means that it take=
s the command
to execute (<code>command</code>), its arguments as <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#variable-number-of-arguments">variable number of argumen=
ts</a>
(<code>*arguments</code>) and finally optional configuration parameters as =
free named
arguments (<code>**configuration</code>). The example below also shows that=
 variables
work with free keyword arguments exactly like when <a class=3D"reference in=
ternal" href=3D"http://robotframework.org/robotframework/latest/RobotFramew=
orkUserGuide.html#named-arguments-with-variables">using the named argument
syntax</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Free Named Arguments</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Run Process</span><span cla=
ss=3D"p">    </span><span class=3D"s">program.py</span><span class=3D"p">  =
  </span><span class=3D"s">arg1</span><span class=3D"p">    </span><span cl=
ass=3D"s">arg2</span><span class=3D"p">    </span><span class=3D"s">cwd=3D/=
home/user</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Run Process</span><span cla=
ss=3D"p">    </span><span class=3D"s">program.py</span><span class=3D"p">  =
  </span><span class=3D"s">argument</span><span class=3D"p">    </span><spa=
n class=3D"s">shell=3DTrue</span><span class=3D"p">    </span><span class=
=3D"s">env=3D</span><span class=3D"p">${</span><span class=3D"nv">ENVIRON</=
span><span class=3D"p">}</span>
</pre></div>
<p>See <a class=3D"reference internal" href=3D"http://robotframework.org/ro=
botframework/latest/RobotFrameworkUserGuide.html#free-keyword-arguments-kwa=
rgs">Free keyword arguments (**kwargs)</a> section under <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#creating-test-libraries">Creating test
libraries</a> for more information about using the free named arguments syn=
tax
in your custom test libraries.</p>
<p>As the second example, let's create a wrapper <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#creating-user-keywords">user keyword</a> for running the
<code>program.py</code> in the above example. The wrapper keyword <span cla=
ss=3D"name">Run Program</span>
accepts all positional and named arguments and passes them forward to
<span class=3D"name">Run Process</span> along with the name of the command =
to execute.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Free Named Arguments</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Run Program</span><span cla=
ss=3D"p">    </span><span class=3D"s">arg1</span><span class=3D"p">    </sp=
an><span class=3D"s">arg2</span><span class=3D"p">    </span><span class=3D=
"s">cwd=3D/home/user</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Run Program</span><span cla=
ss=3D"p">    </span><span class=3D"s">argument</span><span class=3D"p">    =
</span><span class=3D"s">shell=3DTrue</span><span class=3D"p">    </span><s=
pan class=3D"s">env=3D</span><span class=3D"p">${</span><span class=3D"nv">=
ENVIRON</span><span class=3D"p">}</span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">Run Program</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{</span><span class=3D"nv">args</span><span class=3D"p">}    =
&amp;{</span><span class=3D"nv">config</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Run Process</span><span cla=
ss=3D"p">    </span><span class=3D"s">program.py</span><span class=3D"p">  =
  @{</span><span class=3D"nv">args</span><span class=3D"p">}    &amp;{</spa=
n><span class=3D"nv">config</span><span class=3D"p">}</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"named-only-arguments">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id534">Named-only arguments</a></h4>
<p>Starting from Robot Framework 3.1, keywords can accept argument that mus=
t
always be named using the <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#named-a=
rgument-syntax">named argument syntax</a>. If, for example,
a keyword would accept a single named-only argument <code>example</code>, i=
t would
always need to be used like <code>example=3Dvalue</code> and using just <co=
de>value</code> would
not work. This syntax is inspired by the <a class=3D"reference external" hr=
ef=3D"https://www.python.org/dev/peps/pep-3102">keyword-only arguments</a>
syntax supported by Python 3.</p>
<p>For most parts named-only arguments work the same way as <a class=3D"ref=
erence internal" href=3D"http://robotframework.org/robotframework/latest/Ro=
botFrameworkUserGuide.html#named-arguments">named arguments</a>.
The main difference is that libraries implemented with Python 2 using
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-static-keywords">sta=
tic library API</a> <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#keyword-only-=
arguments">do not support this syntax</a>.</p>
<p>As an example of using the <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#nam=
ed-only-arguments-with-user-keywords">named-only arguments with user keywor=
ds</a>, here
is a variation of the <span class=3D"name">Run Program</span> in the above =
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#free-named-argument-examples">fre=
e named argument
examples</a> that only supports configuring <code>shell</code>:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Named-only Arguments</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Run Program</span><span cla=
ss=3D"p">    </span><span class=3D"s">arg1</span><span class=3D"p">    </sp=
an><span class=3D"s">arg2</span><span class=3D"p">              </span><spa=
n class=3D"c"># 'shell' is False (default)</span>
<span class=3D"p">    </span><span class=3D"nf">Run Program</span><span cla=
ss=3D"p">    </span><span class=3D"s">argument</span><span class=3D"p">    =
</span><span class=3D"s">shell=3DTrue</span><span class=3D"p">    </span><s=
pan class=3D"c"># 'shell' is True</span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">Run Program</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{</span><span class=3D"nv">args</span><span class=3D"p">}    =
${</span><span class=3D"nv">shell</span><span class=3D"p">}</span><span cla=
ss=3D"s">=3DFalse</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Run Process</span><span cla=
ss=3D"p">    </span><span class=3D"s">program.py</span><span class=3D"p">  =
  @{</span><span class=3D"nv">args</span><span class=3D"p">}    </span><spa=
n class=3D"s">shell=3D</span><span class=3D"p">${</span><span class=3D"nv">=
shell</span><span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"arguments-embedded-to-keyword-names">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id535">Arguments embedded to keyword=
 names</a></h4>
<p>A totally different approach to specify arguments is embedding them
into keyword names. This syntax is supported by both <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#embedding-arguments-into-keyword-names">test library ke=
ywords</a>
and <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#embedding-arguments-into-keyw=
ord-name">user keywords</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"failures">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id536">2.2.3&nbsp;&nbsp;&nbsp;Failur=
es</a></h3>
<div class=3D"section" id=3D"when-test-case-fails">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id537">When test case fails</a></h4>
<p>A test case fails if any of the keyword it uses fails. Normally this mea=
ns that
execution of that test case is stopped, possible <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#test-setup-and-teardown">test teardown</a> is executed,
and then execution continues from the next test case. It is also possible t=
o
use special <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#continue-on-failure">=
continuable failures</a> if stopping test execution is not desired.</p>
</div>
<div class=3D"section" id=3D"error-messages">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id538">Error messages</a></h4>
<p>The error message assigned to a failed test case is got directly from th=
e
failed keyword. Often the error message is created by the keyword itself, b=
ut
some keywords allow configuring them.</p>
<p>In some circumstances, for example when continuable failures are used,
a test case can fail multiple times. In that case the final error message
is got by combining the individual errors. Very long error messages are
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#limiting-error-message-length-in-=
reports">automatically cut from the middle</a> to keep <a class=3D"referenc=
e internal" href=3D"http://robotframework.org/robotframework/latest/RobotFr=
ameworkUserGuide.html#report-file">reports</a> easier to read, but
full error messages are always visible in <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#log-file">log files</a> as messages of
the failed keywords.</p>
<p>By default error messages are normal text, but
they can <a class=3D"reference internal" href=3D"http://robotframework.org/=
robotframework/latest/RobotFrameworkUserGuide.html#html-in-error-messages">=
contain HTML formatting</a>. This
is enabled by starting the error message with marker string <code>*HTML*</c=
ode>.
This marker will be removed from the final error message shown in reports
and logs. Using HTML in a custom message is shown in the second example bel=
ow.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Normal Error</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Fail</span><span class=3D"p=
">    </span><span class=3D"s">This is a rather boring example...</span><sp=
an class=3D"p"></span>

<span class=3D"gu">HTML Error</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">number</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Get Number</span><span class=3D"p=
"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">number</span><span class=3D"p"=
>}    </span><span class=3D"s">42</span><span class=3D"p">    </span><span =
class=3D"s">*HTML* Number is not my &lt;b&gt;MAGIC&lt;/b&gt; number.</span>=
<span class=3D"p"></span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"test-case-name-and-documentation">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id539">2.2.4&nbsp;&nbsp;&nbsp;Test c=
ase name and documentation</a></h3>
<p>The test case name comes directly from the Test Case table: it is
exactly what is entered into the test case column. Test cases in one
test suite should have unique names.  Pertaining to this, you can also
use the <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#automatic-variables">auto=
matic variable</a> <code>${TEST_NAME}</code> within the test
itself to refer to the test name. It is available whenever a test is
being executed, including all user keywords, as well as the test setup
and the test teardown.</p>
<p>The <span class=3D"setting">[Documentation]</span> setting allows you to=
 set a free
documentation for a test case. That text is shown in the command line
output, as well as the resulting test logs and test reports.
It is possible to use simple <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#docu=
mentation-formatting">HTML formatting</a> in documentation and
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#variables">variables</a> can be u=
sed to make the documentation dynamic.</p>
<p>If documentation is split into multiple columns, cells in one row are
concatenated together with spaces. This is mainly be useful when using
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#html-format">HTML format</a> =
and columns are narrow. If documentation is <a class=3D"reference internal"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#dividing-test-data-to-several-rows">split
into multiple rows</a>, the created documentation lines themselves are
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#newlines-in-test-data">concatenat=
ed using newlines</a>. Newlines are not added if a line
already ends with a newline or an <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#escaping">escaping backslash</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Simple</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Simple documentation</span><span =
class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Formatting</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">*This is bold*, _this is italic_<=
/span><span class=3D"p">  </span><span class=3D"s">and here is a link: http=
://robotframework.org</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Variables</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Executed at </span><span class=3D=
"p">${</span><span class=3D"nv">HOST</span><span class=3D"p">}</span><span =
class=3D"s"> by </span><span class=3D"p">${</span><span class=3D"nv">USER</=
span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Splitting</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">This documentation</span><span cl=
ass=3D"p">    </span><span class=3D"s">is split</span><span class=3D"p">   =
 </span><span class=3D"s">into multiple columns</span><span class=3D"p"></s=
pan>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Many lines</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Here we have</span><span class=3D=
"p"></span>
<span class=3D"p">    ...                </span><span class=3D"s">an automa=
tic newline</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>
</pre></div>
<p>It is important that test cases have clear and descriptive names, and
in that case they normally do not need any documentation. If the logic
of the test case needs documenting, it is often a sign that keywords
in the test case need better names and they are to be enhanced,
instead of adding extra documentation. Finally, metadata, such as the
environment and user information in the last example above, is often
better specified using <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#tagging-te=
st-cases">tags</a>.</p>
</div>
<div class=3D"section" id=3D"tagging-test-cases">
<span id=3D"test-case-tags"></span><h3><a class=3D"toc-backref" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#i=
d540">2.2.5&nbsp;&nbsp;&nbsp;Tagging test cases</a></h3>
<p>Using tags in Robot Framework is a simple, yet powerful mechanism for
classifying test cases. Tags are free text and they can be used at
least for the following purposes:</p>
<ul class=3D"simple">
<li>Tags are shown in test <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#report=
-file">reports</a>, <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#log-file">log=
s</a> and, of course, in the test
data, so they provide metadata to test cases.</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#configuring-statistics">Stati=
stics</a> about test cases (total, passed, failed  are
automatically collected based on tags).</li>
<li>With tags, you can <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#by-tag-nam=
es">include or exclude</a> test cases to be executed.</li>
<li>With tags, you can specify which test cases are considered <a class=3D"=
reference internal" href=3D"http://robotframework.org/robotframework/latest=
/RobotFrameworkUserGuide.html#setting-criticality">critical</a>.</li>
</ul>
<p>In this section it is only explained how to set tags for test
cases, and different ways to do it are listed below. These
approaches can naturally be used together.</p>
<dl class=3D"docutils">
<dt><span class=3D"setting">Force Tags</span> in the Setting table</dt>
<dd>All test cases in a test case file with this setting always get
specified tags. If it is used in the <code>test suite initialization file</=
code>,
all test cases in sub test suites get these tags.</dd>
<dt><span class=3D"setting">Default Tags</span> in the Setting table</dt>
<dd>Test cases that do not have a <span class=3D"setting">[Tags]</span> set=
ting of their own
get these tags. Default tags are not supported in test suite initialization
files.</dd>
<dt><span class=3D"setting">[Tags]</span> in the Test Case table</dt>
<dd>A test case always gets these tags. Additionally, it does not get the
possible tags specified with <span class=3D"setting">Default Tags</span>, s=
o it is possible
to override the <span class=3D"setting">Default Tags</span> by using empty =
value. It is
also possible to use value <code>NONE</code> to override default tags.</dd>
<dt><span class=3D"option">--settag</span> command line option</dt>
<dd>All executed test cases get tags set with this option in addition
to tags they got elsewhere.</dd>
<dt><span class=3D"name">Set Tags</span>, <span class=3D"name">Remove Tags<=
/span>, <span class=3D"name">Fail</span> and <span class=3D"name">Pass Exec=
ution</span> keywords</dt>
<dd>These <a class=3D"reference external" href=3D"http://robotframework.org=
/robotframework/latest/libraries/BuiltIn.html">BuiltIn</a> keywords can be =
used to manipulate tags dynamically
during the test execution.</dd>
</dl>
<p>Tags are free text, but they are normalized so that they are converted
to lowercase and all spaces are removed. If a test case gets the same tag
several times, other occurrences than the first one are removed. Tags
can be created using variables, assuming that those variables exist.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Force Tags</span><span class=3D"p">      </span><span cl=
ass=3D"s">req-42</span><span class=3D"p"></span>
<span class=3D"kn">Default Tags</span><span class=3D"p">    </span><span cl=
ass=3D"s">owner-john</span><span class=3D"p">    </span><span class=3D"s">s=
moke</span><span class=3D"p"></span>

<span class=3D"gh">*** Variables ***</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">HOST</span><span class=3D"p">=
}         </span><span class=3D"s">10.0.1.42</span><span class=3D"p"></span=
>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">No own tags</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">This test has tags owner-john, sm=
oke and req-42.</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">With own tags</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">This test has tags not_ready, own=
er-mrx and req-42.</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Tags</span><span class=3D"=
p">]    </span><span class=3D"s">owner-mrx</span><span class=3D"p">    </sp=
an><span class=3D"s">not_ready</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Own tags with variables</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">This test has tags host-10.0.1.42=
 and req-42.</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Tags</span><span class=3D"=
p">]    </span><span class=3D"s">host-</span><span class=3D"p">${</span><sp=
an class=3D"nv">HOST</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Empty own tags</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">This test has only tag req-42.</s=
pan><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Tags</span><span class=3D"=
p">]</span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Set Tags and Remove Tags Keywords</span><span class=3D"p=
"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">This test has tags mytag and owne=
r-john.</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Set Tags</span><span class=
=3D"p">    </span><span class=3D"s">mytag</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Remove Tags</span><span cla=
ss=3D"p">    </span><span class=3D"s">smoke</span><span class=3D"p">    </s=
pan><span class=3D"s">req-*</span><span class=3D"p"></span>
</pre></div>
<div class=3D"section" id=3D"reserved-tags">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id541">Reserved tags</a></h4>
<p>Users are generally free to use whatever tags that work in their context=
.
There are, however, certain tags that have a predefined meaning for Robot
Framework itself, and using them for other purposes can have unexpected
results. All special tags Robot Framework has and will have in the future
have the <code>robot:</code> prefix. To avoid problems, users should thus n=
ot use any
tag with this prefixes unless actually activating the special functionality=
.</p>
<p>At the time of writing, the only special tags are <code>robot:exit</code=
>, that is
automatically added to tests when <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#stopping-test-execution-gracefully">stopping test execution gracefully</a>=
,
and <code>robot:no-dry-run</code>, that can be used to disable the <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#dry-run">dry run</a> mode.
More usages are likely to be added in the future.</p>
</div>
</div>
<div class=3D"section" id=3D"test-setup-and-teardown">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id542">2.2.6&nbsp;&nbsp;&nbsp;Test s=
etup and teardown</a></h3>
<p>Robot Framework has similar test setup and teardown functionality as man=
y
other test automation frameworks. In short, a test setup is something
that is executed before a test case, and a test teardown is executed
after a test case. In Robot Framework setups and teardowns are just
normal keywords with possible arguments.</p>
<p>Setup and teardown are always a single keyword. If they need to take car=
e
of multiple separate tasks, it is possible to create higher-level <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#creating-user-keywords">user
keywords</a> for that purpose. An alternative solution is executing multipl=
e
keywords using the <a class=3D"reference external" href=3D"http://robotfram=
ework.org/robotframework/latest/libraries/BuiltIn.html">BuiltIn</a> keyword=
 <span class=3D"name">Run Keywords</span>.</p>
<p>The test teardown is special in two ways. First of all, it is executed a=
lso
when a test case fails, so it can be used for clean-up activities that must=
 be
done regardless of the test case status. In addition, all the keywords in t=
he
teardown are also executed even if one of them fails. This <a class=3D"refe=
rence internal" href=3D"http://robotframework.org/robotframework/latest/Rob=
otFrameworkUserGuide.html#continue-on-failure">continue on failure</a>
functionality can be used also with normal keywords, but inside teardowns i=
t is
on by default.</p>
<p>The easiest way to specify a setup or a teardown for test cases in a
test case file is using the <span class=3D"setting">Test Setup</span> and <=
span class=3D"setting">Test
Teardown</span> settings in the Setting table. Individual test cases can
also have their own setup or teardown. They are defined with the
<span class=3D"setting">[Setup]</span> or <span class=3D"setting">[Teardown=
]</span> settings in the test case
table and they override possible <span class=3D"setting">Test Setup</span> =
and
<span class=3D"setting">Test Teardown</span> settings. Having no keyword af=
ter a
<span class=3D"setting">[Setup]</span> or <span class=3D"setting">[Teardown=
]</span> setting means having no
setup or teardown. It is also possible to use value <code>NONE</code> to in=
dicate that
a test has no setup/teardown.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Test Setup</span><span class=3D"p">       </span><span c=
lass=3D"nf">Open Application</span><span class=3D"p">    </span><span class=
=3D"s">App A</span><span class=3D"p"></span>
<span class=3D"kn">Test Teardown</span><span class=3D"p">    </span><span c=
lass=3D"nf">Close Application</span><span class=3D"p"></span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">Default values</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Setup and teardown from setting t=
able</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Overridden setup</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Own setup, teardown from setting =
table</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Setup</span><span class=3D=
"p">]    </span><span class=3D"nf">Open Application</span><span class=3D"p"=
>    </span><span class=3D"s">App B</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">No teardown</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Default setup, no teardown at all=
</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Teardown</span><span class=
=3D"p">]</span>

<span class=3D"gu">No teardown 2</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Setup and teardown can be disable=
d also with special value NONE</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Teardown</span><span class=
=3D"p">]    </span><span class=3D"nf">NONE</span><span class=3D"p"></span>

<span class=3D"gu">Using variables</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Setup and teardown specified usin=
g variables</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Setup</span><span class=3D=
"p">]    ${</span><span class=3D"nv">SETUP</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Teardown</span><span class=
=3D"p">]    ${</span><span class=3D"nv">TEARDOWN</span><span class=3D"p">}<=
/span>
</pre></div>
<p>The name of the keyword to be executed as a setup or a teardown can be a
variable. This facilitates having different setups or teardowns in
different environments by giving the keyword name as a variable from
the command line.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#suite-setup-and=
-teardown">Test suites can have a setup and teardown of their
own</a>. A suite setup is executed before any test cases or sub test
suites in that test suite, and similarly a suite teardown is
executed after them.</p>
</div>
</div>
<div class=3D"section" id=3D"test-templates">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id543">2.2.7&nbsp;&nbsp;&nbsp;Test t=
emplates</a></h3>
<p>Test templates convert normal <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
keyword-driven-style">keyword-driven</a> test cases into
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#data-driven-style">data-driven</a=
> tests. Whereas the body of a keyword-driven test case
is constructed from keywords and their possible arguments, test cases with
template contain only the arguments for the template keyword.
Instead of repeating the same keyword multiple times per test and/or with a=
ll
tests in a file, it is possible to use it only per test or just once per fi=
le.</p>
<p>Template keywords can accept both normal positional and named arguments,=
 as
well as arguments embedded to the keyword name. Unlike with other settings,
it is not possible to define a template using a variable.</p>
<div class=3D"section" id=3D"basic-usage">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id544">Basic usage</a></h4>
<p>How a keyword accepting normal positional arguments can be used as a tem=
plate
is illustrated by the following example test cases. These two tests are
functionally fully identical.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s **</span><span class=3D"p"></span>
<span class=3D"gu">Normal test case</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Example keyword</span><span=
 class=3D"p">    </span><span class=3D"s">first argument</span><span class=
=3D"p">    </span><span class=3D"s">second argument</span><span class=3D"p"=
></span>

<span class=3D"gu">Templated test case</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Template</span><span class=
=3D"p">]    </span><span class=3D"nf">Example keyword</span><span class=3D"=
p"></span>
<span class=3D"p">    </span><span class=3D"s">first argument</span><span c=
lass=3D"p">    </span><span class=3D"s">second argument</span><span class=
=3D"p"></span>
</pre></div>
<p>As the example illustrates, it is possible to specify the
template for an individual test case using the <span class=3D"setting">[Tem=
plate]</span>
setting. An alternative approach is using the <span class=3D"setting">Test =
Template</span>
setting in the Setting table, in which case the template is applied
for all test cases in that test case file. The <span class=3D"setting">[Tem=
plate]</span>
setting overrides the possible template set in the Setting table, and
an empty value for <span class=3D"setting">[Template]</span> means that the=
 test has no
template even when <span class=3D"setting">Test Template</span> is used. It=
 is also possible
to use value <code>NONE</code> to indicate that a test has no template.</p>
<p>If a templated test case has multiple data rows in its body, the templat=
e
is applied for all the rows one by one. This
means that the same keyword is executed multiple times, once with data
on each row. Templated tests are also special so that all the rounds
are executed even if one or more of them fails. It is possible to use this
kind of <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#continue-on-failure">cont=
inue on failure</a> mode with normal tests too, but with
the templated tests the mode is on automatically.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Test Template</span><span class=3D"p">    </span><span c=
lass=3D"nf">Example keyword</span><span class=3D"p"></span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">Templated test case</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"s">first round 1</span><span cl=
ass=3D"p">     </span><span class=3D"s">first round 2</span><span class=3D"=
p"></span>
<span class=3D"p">    </span><span class=3D"s">second round 1</span><span c=
lass=3D"p">    </span><span class=3D"s">second round 2</span><span class=3D=
"p"></span>
<span class=3D"p">    </span><span class=3D"s">third round 1</span><span cl=
ass=3D"p">     </span><span class=3D"s">third round 2</span><span class=3D"=
p"></span>
</pre></div>
<p>Using arguments with <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#default-v=
alues">default values</a> or <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#vara=
rgs">varargs</a>, as well as using
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#named-arguments">named arguments<=
/a> and <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#free-named-arguments">fre=
e named arguments</a>, work with templates
exactly like they work otherwise. Using <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#variables">variables</a> in arguments is also
supported normally.</p>
</div>
<div class=3D"section" id=3D"templates-with-embedded-arguments">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id545">Templates with embedded argum=
ents</a></h4>
<p>Templates support a variation of
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#embedded-argument-syntax">emb=
edded argument syntax</a>. With templates this syntax works so
that if the template keyword has variables in its name, they are considered
placeholders for arguments and replaced with the actual arguments
used with the template. The resulting keyword is then used without position=
al
arguments. This is best illustrated with an example:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Normal test case with embedded arguments</span><span cla=
ss=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">The result of 1 + 1 should =
be 2</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">The result of 1 + 2 should =
be 3</span><span class=3D"p"></span>

<span class=3D"gu">Template with embedded arguments</span><span class=3D"p"=
></span>
<span class=3D"p">    [</span><span class=3D"kn">Template</span><span class=
=3D"p">]    </span><span class=3D"nf">The result of </span><span class=3D"p=
">${</span><span class=3D"nv">calculation</span><span class=3D"p">}</span><=
span class=3D"nf"> should be </span><span class=3D"p">${</span><span class=
=3D"nv">expected</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"s">1 + 1</span><span class=3D"p=
">    </span><span class=3D"s">2</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"s">1 + 2</span><span class=3D"p=
">    </span><span class=3D"s">3</span><span class=3D"p"></span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">The result of </span><span class=3D"p">${</span><span cl=
ass=3D"nv">calculation</span><span class=3D"p">}</span><span class=3D"gu"> =
should be </span><span class=3D"p">${</span><span class=3D"nv">expected</sp=
an><span class=3D"p">}</span>
<span class=3D"p">    ${</span><span class=3D"nv">result</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Calculate</span><span class=3D"p"=
>    ${</span><span class=3D"nv">calculation</span><span class=3D"p">}</spa=
n>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">result</span><span class=3D"p"=
>}     ${</span><span class=3D"nv">expected</span><span class=3D"p">}</span=
>
</pre></div>
<p>When embedded arguments are used with templates, the number of arguments=
 in
the template keyword name must match the number of arguments it is used wit=
h.
The argument names do not need to match the arguments of the original keywo=
rd,
though, and it is also possible to use different arguments altogether:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Different argument names</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Template</span><span class=
=3D"p">]    </span><span class=3D"nf">The result of </span><span class=3D"p=
">${</span><span class=3D"nv">foo</span><span class=3D"p">}</span><span cla=
ss=3D"nf"> should be </span><span class=3D"p">${</span><span class=3D"nv">b=
ar</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"s">1 + 1</span><span class=3D"p=
">    </span><span class=3D"s">2</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"s">1 + 2</span><span class=3D"p=
">    </span><span class=3D"s">3</span><span class=3D"p"></span>

<span class=3D"gu">Only some arguments</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Template</span><span class=
=3D"p">]    </span><span class=3D"nf">The result of </span><span class=3D"p=
">${</span><span class=3D"nv">calculation</span><span class=3D"p">}</span><=
span class=3D"nf"> should be 3</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"s">1 + 2</span><span class=3D"p=
"></span>
<span class=3D"p">    </span><span class=3D"s">4 - 1</span><span class=3D"p=
"></span>

<span class=3D"gu">New arguments</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Template</span><span class=
=3D"p">]    </span><span class=3D"nf">The </span><span class=3D"p">${</span=
><span class=3D"nv">meaning</span><span class=3D"p">}</span><span class=3D"=
nf"> of </span><span class=3D"p">${</span><span class=3D"nv">life</span><sp=
an class=3D"p">}</span><span class=3D"nf"> should be 42</span><span class=
=3D"p"></span>
<span class=3D"p">    </span><span class=3D"s">result</span><span class=3D"=
p">    </span><span class=3D"s">21 * 2</span><span class=3D"p"></span>
</pre></div>
<p>The main benefit of using embedded arguments with templates is that
argument names are specified explicitly. When using normal arguments,
the same effect can be achieved by naming the columns that contain
arguments. This is illustrated by the <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#data-driven-style">data-driven style</a> example in
the next section.</p>
</div>
<div class=3D"section" id=3D"templates-with-for-loops">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id546">Templates with for loops</a><=
/h4>
<p>If templates are used with <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#for=
-loops">for loops</a>, the template is applied for
all the steps inside the loop. The continue on failure mode is in use
also in this case, which means that all the steps are executed with
all the looped elements even if there are failures.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Template and for</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Template</span><span class=
=3D"p">]    </span><span class=3D"nf">Example keyword</span><span class=3D"=
p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">item</span><span c=
lass=3D"p">}    IN    @{</span><span class=3D"nv">ITEMS</span><span class=
=3D"p">}</span>
<span class=3D"p">        ${</span><span class=3D"nv">item</span><span clas=
s=3D"p">}    </span><span class=3D"s">2nd arg</span><span class=3D"p"></spa=
n>
<span class=3D"p">    END</span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">index</span><span =
class=3D"p">}    IN RANGE    </span><span class=3D"s">42</span><span class=
=3D"p"></span>
<span class=3D"p">        </span><span class=3D"s">1st arg</span><span clas=
s=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">}</sp=
an>
<span class=3D"p">    END</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"different-test-case-styles">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id547">2.2.8&nbsp;&nbsp;&nbsp;Differ=
ent test case styles</a></h3>
<p>There are several different ways in which test cases may be written. Tes=
t
cases that describe some kind of <em>workflow</em> may be written either in
keyword-driven or behavior-driven style. Data-driven style can be used to t=
est
the same workflow with varying input data.</p>
<div class=3D"section" id=3D"keyword-driven-style">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id548">Keyword-driven style</a></h4>
<p>Workflow tests, such as the <span class=3D"name">Valid Login</span> test=
 described
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#example-tests">earlier</a>, are c=
onstructed from several keywords and their possible
arguments. Their normal structure is that first the system is taken
into the initial state (<span class=3D"name">Open Login Page</span> in the =
<span class=3D"name">Valid
Login</span> example), then something is done to the system (<span class=3D=
"name">Input
Name</span>, <span class=3D"name">Input Password</span>, <span class=3D"nam=
e">Submit Credentials</span>), and
finally it is verified that the system behaved as expected
(<span class=3D"name">Welcome Page Should Be Open</span>).</p>
</div>
<div class=3D"section" id=3D"data-driven-style">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id549">Data-driven style</a></h4>
<p>Another style to write test cases is the <em>data-driven</em> approach w=
here
test cases use only one higher-level keyword, often created as a
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#creating-user-keywords">user keyw=
ord</a>, that hides the actual test workflow. These tests are
very useful when there is a need to test the same scenario with
different input and/or output data. It would be possible to repeat the
same keyword with every test, but the <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#test-templates">test template</a> functionality
allows specifying the keyword to use only once.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Test Template</span><span class=3D"p">    </span><span c=
lass=3D"nf">Login with invalid credentials should fail</span><span class=3D=
"p"></span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p">             =
   </span><span class=3D"gh">USERNAME</span><span class=3D"p">         </sp=
an><span class=3D"gh">PASSWORD</span><span class=3D"p"></span>
<span class=3D"gu">Invalid User Name</span><span class=3D"p">              =
   </span><span class=3D"s">invalid</span><span class=3D"p">          ${</s=
pan><span class=3D"nv">VALID PASSWORD</span><span class=3D"p">}</span>
<span class=3D"gu">Invalid Password</span><span class=3D"p">               =
   ${</span><span class=3D"nv">VALID USER</span><span class=3D"p">}    </sp=
an><span class=3D"s">invalid</span><span class=3D"p"></span>
<span class=3D"gu">Invalid User Name and Password</span><span class=3D"p"> =
   </span><span class=3D"s">invalid</span><span class=3D"p">          </spa=
n><span class=3D"s">invalid</span><span class=3D"p"></span>
<span class=3D"gu">Empty User Name</span><span class=3D"p">                =
   ${</span><span class=3D"nv">EMPTY</span><span class=3D"p">}         ${</=
span><span class=3D"nv">VALID PASSWORD</span><span class=3D"p">}</span>
<span class=3D"gu">Empty Password</span><span class=3D"p">                 =
   ${</span><span class=3D"nv">VALID USER</span><span class=3D"p">}    ${</=
span><span class=3D"nv">EMPTY</span><span class=3D"p">}</span>
<span class=3D"gu">Empty User Name and Password</span><span class=3D"p">   =
   ${</span><span class=3D"nv">EMPTY</span><span class=3D"p">}         ${</=
span><span class=3D"nv">EMPTY</span><span class=3D"p">}</span>
</pre></div>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p class=3D"last">Naming columns like in the example above makes tests easi=
er to
understand. This is possible because on the header row other
cells except the first one <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-d=
ata-sections">are ignored</a>.</p>
</div>
<p>The above example has six separate tests, one for each invalid
user/password combination, and the example below illustrates how to
have only one test with all the combinations. When using <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#test-templates">test
templates</a>, all the rounds in a test are executed even if there are
failures, so there is no real functional difference between these two
styles. In the above example separate combinations are named so it is
easier to see what they test, but having potentially large number of
these tests may mess-up statistics. Which style to use depends on the
context and personal preferences.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Invalid Password</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Template</span><span class=
=3D"p">]    </span><span class=3D"nf">Login with invalid credentials should=
 fail</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"s">invalid</span><span class=3D=
"p">          ${</span><span class=3D"nv">VALID PASSWORD</span><span class=
=3D"p">}</span>
<span class=3D"p">    ${</span><span class=3D"nv">VALID USER</span><span cl=
ass=3D"p">}    </span><span class=3D"s">invalid</span><span class=3D"p"></s=
pan>
<span class=3D"p">    </span><span class=3D"s">invalid</span><span class=3D=
"p">          </span><span class=3D"s">whatever</span><span class=3D"p"></s=
pan>
<span class=3D"p">    ${</span><span class=3D"nv">EMPTY</span><span class=
=3D"p">}         ${</span><span class=3D"nv">VALID PASSWORD</span><span cla=
ss=3D"p">}</span>
<span class=3D"p">    ${</span><span class=3D"nv">VALID USER</span><span cl=
ass=3D"p">}    ${</span><span class=3D"nv">EMPTY</span><span class=3D"p">}<=
/span>
<span class=3D"p">    ${</span><span class=3D"nv">EMPTY</span><span class=
=3D"p">}         ${</span><span class=3D"nv">EMPTY</span><span class=3D"p">=
}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"behavior-driven-style">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id550">Behavior-driven style</a></h4=
>
<p>It is also possible to write test cases as requirements that also non-te=
chnical
project stakeholders must understand. These <em>executable requirements</em=
> are a
corner stone of a process commonly called <a class=3D"reference external" h=
ref=3D"http://testobsessed.com/2008/12/08/acceptance-test-driven-developmen=
t-atdd-an-overview">Acceptance Test Driven Development</a>
(ATDD) or <a class=3D"reference external" href=3D"http://en.wikipedia.org/w=
iki/Specification_by_example">Specification by Example</a>.</p>
<p>One way to write these requirements/tests is <em>Given-When-Then</em> st=
yle
popularized by <a class=3D"reference external" href=3D"http://en.wikipedia.=
org/wiki/Behavior_Driven_Development">Behavior Driven Development</a> (BDD)=
. When writing test cases in
this style, the initial state is usually expressed with a keyword starting =
with
word <span class=3D"name">Given</span>, the actions are described with keyw=
ord starting with
<span class=3D"name">When</span> and the expectations with a keyword starti=
ng with <span class=3D"name">Then</span>.
Keyword starting with <span class=3D"name">And</span> or <span class=3D"nam=
e">But</span> may be used if a step has more
than one action.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Valid Login</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"ge">Given </span><span class=3D=
"nf">login page is open</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"ge">When </span><span class=3D"=
nf">valid username and password are inserted</span><span class=3D"p"></span=
>
<span class=3D"p">    </span><span class=3D"ge">and </span><span class=3D"n=
f">credentials are submitted</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"ge">Then </span><span class=3D"=
nf">welcome page should be open</span><span class=3D"p"></span>
</pre></div>
<div class=3D"section" id=3D"ignoring-given-when-then-and-but-prefixes">
<h5>Ignoring <span class=3D"name">Given/When/Then/And/But</span> prefixes</=
h5>
<p>Prefixes <span class=3D"name">Given</span>, <span class=3D"name">When</s=
pan>, <span class=3D"name">Then</span>, <span class=3D"name">And</span> and=
 <span class=3D"name">But</span>
are dropped when matching keywords are searched, if no match with the full =
name
is found. This works for both user keywords and library keywords. For examp=
le,
<span class=3D"name">Given login page is open</span> in the above example c=
an be implemented as
user keyword either with or without the word <span class=3D"name">Given</sp=
an>. Ignoring prefixes
also allows using the same keyword with different prefixes. For example
<span class=3D"name">Welcome page should be open</span> could also used as =
<span class=3D"name">And welcome page
should be open</span>.</p>
</div>
<div class=3D"section" id=3D"embedding-data-to-keywords">
<h5>Embedding data to keywords</h5>
<p>When writing concrete examples it is useful to be able pass actual data =
to
keyword implementations. User keywords support this by allowing <a class=3D=
"reference internal" href=3D"http://robotframework.org/robotframework/lates=
t/RobotFrameworkUserGuide.html#embedding-arguments-into-keyword-name">embed=
ding
arguments into keyword name</a>.</p>
</div>
</div>
</div>
</div>
<div class=3D"section" id=3D"creating-tasks">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id506">2.3&nbsp;&nbsp;&nbsp;Creating=
 tasks</a></h2>
<p>In addition to test automation, Robot Framework can be used for other
automation purposes, including <a class=3D"reference external" href=3D"http=
s://en.wikipedia.org/wiki/Robotic_process_automation">robotic process autom=
ation</a> (RPA).
It has been always been possible, bu Robot Framework 3.1 added official
support for automating <em>tasks</em>, not only tests. For most parts creat=
ing
tasks works the same way as <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#creat=
ing-tests">creating tests</a> and the only real difference
is in terminology. Tasks can also be organized into <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#creating-test-suites">suites</a> exactly like
test cases.</p>
<div class=3D"contents local topic" id=3D"id81">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#task-syntax" id=3D"id551">2.3=
.1&nbsp;&nbsp;&nbsp;Task syntax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#task-related-settings" id=3D"=
id552">2.3.2&nbsp;&nbsp;&nbsp;Task related settings</a></li>
</ul>
</div>
<div class=3D"section" id=3D"task-syntax">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id551">2.3.1&nbsp;&nbsp;&nbsp;Task s=
yntax</a></h3>
<p>Tasks are created based on the available keywords exactly like test case=
s,
and the task syntax is in general identical to the <a class=3D"reference in=
ternal" href=3D"http://robotframework.org/robotframework/latest/RobotFramew=
orkUserGuide.html#test-case-syntax">test case syntax</a>.
The main difference is that tasks are created in task sections (or tables)
instead of test case sections:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Tasks ***=
</span><span class=3D"p"></span>
<span class=3D"gu">Process invoice</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Read information from PDF</=
span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Validate information</span>=
<span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Submit information to backe=
nd system</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Validate information is vis=
ible in web UI</span><span class=3D"p"></span>
</pre></div>
<p>It is an error to have both tests and tasks in same file.</p>
</div>
<div class=3D"section" id=3D"task-related-settings">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id552">2.3.2&nbsp;&nbsp;&nbsp;Task r=
elated settings</a></h3>
<p>Settings that can be used in the task section are exactly the same as in
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#settings-in-the-test-case-tab=
le">test case section</a>. In the <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#test-case-related-settings-in-the-setting-table">setting section</a> it is=
 possible to use
<span class=3D"setting">Task Setup</span>, <span class=3D"setting">Task Tea=
rdown</span>, <span class=3D"setting">Task Template</span>
and <span class=3D"setting">Task Timeout</span> instead of their <span clas=
s=3D"setting">Test</span> variants.</p>
</div>
</div>
<div class=3D"section" id=3D"creating-test-suites">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id507">2.4&nbsp;&nbsp;&nbsp;Creating=
 test suites</a></h2>
<p>Robot Framework <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-test-=
cases">test cases</a> are created in test case files, which can
be organized into directories. These files and directories create a
hierarchical test suite structure. Same concepts apply also when
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#creating-tasks">creating tasks</a=
>, but the terminology differs.</p>
<div class=3D"contents local topic" id=3D"id85">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-case-files" id=3D"id553"=
>2.4.1&nbsp;&nbsp;&nbsp;Test case files</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-suite-directories" id=3D=
"id554">2.4.2&nbsp;&nbsp;&nbsp;Test suite directories</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#initialization-files" id=3D"i=
d555">Initialization files</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-suite-name-and-documenta=
tion" id=3D"id556">2.4.3&nbsp;&nbsp;&nbsp;Test suite name and documentation=
</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#free-test-suite-metadata" id=
=3D"id557">2.4.4&nbsp;&nbsp;&nbsp;Free test suite metadata</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#suite-setup-and-teardown" id=
=3D"id558">2.4.5&nbsp;&nbsp;&nbsp;Suite setup and teardown</a></li>
</ul>
</div>
<div class=3D"section" id=3D"test-case-files">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id553">2.4.1&nbsp;&nbsp;&nbsp;Test c=
ase files</a></h3>
<p>Robot Framework test cases <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#cre=
ating-test-cases">are created</a> using test case tables in
test case files. Such a file automatically creates a test suite from
all the test cases it contains. There is no upper limit for how many
test cases there can be, but it is recommended to have less than ten,
unless the <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#data-driven-style">dat=
a-driven approach</a> is used, where one test case consists of
only one high-level keyword.</p>
<p>The following settings in the Setting table can be used to customize the
test suite:</p>
<dl class=3D"docutils">
<dt><span class=3D"setting">Documentation</span></dt>
<dd>Used for specifying a <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-su=
ite-name-and-documentation">test suite documentation</a></dd>
<dt><span class=3D"setting">Metadata</span></dt>
<dd>Used for setting <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#free-test-su=
ite-metadata">free test suite metadata</a> as name-value
pairs.</dd>
<dt><span class=3D"setting">Suite Setup</span>, <span class=3D"setting">Sui=
te Teardown</span></dt>
<dd>Specify <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#suite-setup-and-teard=
own">suite setup and teardown</a>.</dd>
</dl>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">All setting names can optionally include a colon at the e=
nd, for
example <span class=3D"setting">Documentation:</span>. This can make readin=
g the settings easier
especially when using the plain text format.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Setting names are case-insensitive, but the format used a=
bove is
recommended. Prior to Robot Framework 3.1, settings were also
space-insensitive meaning that spaces could be removed (e.g.
<code>SuiteSetup</code>) or extra spaces added (e.g. <code>M e t a d a t a<=
/code>). This is
now deprecated and only the format above, case-insensitively, is
supported.</p>
</div>
</div>
<div class=3D"section" id=3D"test-suite-directories">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id554">2.4.2&nbsp;&nbsp;&nbsp;Test s=
uite directories</a></h3>
<p>Test case files can be organized into directories, and these
directories create higher-level test suites. A test suite created from
a directory cannot have any test cases directly, but it contains
other test suites with test cases, instead. These directories can then be
placed into other directories creating an even higher-level suite. There
are no limits for the structure, so test cases can be organized
as needed.</p>
<p>When a test directory is executed, the files and directories it
contains are processed recursively as follows:</p>
<ul class=3D"simple">
<li>Files and directories with names starting with a dot (<span class=3D"fi=
le">.</span>) or an
underscore (<span class=3D"file">_</span>) are ignored.</li>
<li>Directories with the name <span class=3D"file">CVS</span> are ignored (=
case-sensitive).</li>
<li>Files in <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#supported-file-forma=
ts">supported file formats</a> are processed.</li>
<li>Other files are ignored.</li>
</ul>
<p>If a file or directory that is processed does not contain any test
cases, it is silently ignored (a message is written to the <a class=3D"refe=
rence internal" href=3D"http://robotframework.org/robotframework/latest/Rob=
otFrameworkUserGuide.html#system-log">syslog</a>)
and the processing continues.</p>
<div class=3D"section" id=3D"initialization-files">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id555">Initialization files</a></h4>
<p>A test suite created from a directory can have similar settings as a sui=
te
created from a test case file. Because a directory alone cannot have that
kind of information, it must be placed into a special test suite initializa=
tion
file. An initialization file name must always be of the format
<span class=3D"file">__init__.ext</span>, where the extension must be one o=
f the <a class=3D"reference internal" href=3D"http://robotframework.org/rob=
otframework/latest/RobotFrameworkUserGuide.html#supported-file-formats">sup=
ported
file formats</a> (typically <span class=3D"file">__init__.robot</span>).
The name format is borrowed from Python, where files named in this manner
denote that a directory is a module.</p>
<p>Initialization files have the same structure and syntax as test case fil=
es,
except that they cannot have test case tables and not all settings are
supported. Variables and keywords created or imported in initialization fil=
es
<em>are not</em> available in the lower level test suites. If you need to s=
hare
variables or keywords, you can put them into <a class=3D"reference internal=
" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUse=
rGuide.html#resource-files">resource files</a> that can be
imported both by initialization and test case files.</p>
<p>The main usage for initialization files is specifying test suite related
settings similarly as in <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-cas=
e-files">test case files</a>, but setting some <a class=3D"reference intern=
al" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#test-case-related-settings-in-the-setting-table">test case
related settings</a> is also possible. How to use different settings in the
initialization files is explained below.</p>
<dl class=3D"docutils">
<dt><span class=3D"setting">Documentation</span>, <span class=3D"setting">M=
etadata</span>, <span class=3D"setting">Suite Setup</span>, <span class=3D"=
setting">Suite Teardown</span></dt>
<dd>These test suite specific settings work the same way as in test case fi=
les.</dd>
<dt><span class=3D"setting">Force Tags</span></dt>
<dd>Specified tags are unconditionally set to all test cases in all test ca=
se files
this directory contains directly or recursively.</dd>
<dt><span class=3D"setting">Test Setup</span>, <span class=3D"setting">Test=
 Teardown</span>, <span class=3D"setting">Test Timeout</span></dt>
<dd>Set the default value for test setup/teardown or test timeout to all te=
st
cases this directory contains. Can be overridden on lower level.
Notice that keywords used as setups and teardowns must be available in
test case files where tests using them are. Defining keywords in the
initialization file itself is not enough.</dd>
<dt><span class=3D"setting">Task Setup</span>, <span class=3D"setting">Task=
 Teardown</span>, <span class=3D"setting">Task Timeout</span></dt>
<dd>Aliases for <span class=3D"setting">Test Setup</span>, <span class=3D"s=
etting">Test Teardown</span>,
and <span class=3D"setting">Test Timeout</span>, respectively, that can be =
used when
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#creating-tasks">creating tasks</a=
>, not tests.</dd>
<dt><span class=3D"setting">Default Tags</span>, <span class=3D"setting">Te=
st Template</span></dt>
<dd>Not supported in initialization files.</dd>
</dl>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Documentation</span><span class=3D"p">    </span><span c=
lass=3D"s">Example suite</span><span class=3D"p"></span>
<span class=3D"kn">Suite Setup</span><span class=3D"p">      </span><span c=
lass=3D"nf">Do Something</span><span class=3D"p">    ${</span><span class=
=3D"nv">MESSAGE</span><span class=3D"p">}</span>
<span class=3D"kn">Force Tags</span><span class=3D"p">       </span><span c=
lass=3D"s">example</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">          </span><span c=
lass=3D"nn">SomeLibrary</span><span class=3D"p"></span>

<span class=3D"gh">*** Variables ***</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">MESSAGE</span><span class=3D"=
p">}       </span><span class=3D"s">Hello, world!</span><span class=3D"p"><=
/span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">Do Something</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">args</span><span class=3D"p">}</sp=
an>
<span class=3D"p">    </span><span class=3D"nf">Some Keyword</span><span cl=
ass=3D"p">    ${</span><span class=3D"nv">arg</span><span class=3D"p">}</sp=
an>
<span class=3D"p">    </span><span class=3D"nf">Another Keyword</span><span=
 class=3D"p"></span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"test-suite-name-and-documentation">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id556">2.4.3&nbsp;&nbsp;&nbsp;Test s=
uite name and documentation</a></h3>
<p>The test suite name is constructed from the file or directory name. The =
name
is created so that the extension is ignored, possible underscores are
replaced with spaces, and names fully in lower case are title cased. For
example, <span class=3D"file">some_tests.robot</span> becomes <span class=
=3D"name">Some Tests</span> and
<span class=3D"file">My_test_directory</span> becomes <span class=3D"name">=
My test directory</span>.</p>
<p>The file or directory name can contain a prefix to control the <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#execution-order">execution
order</a> of the suites. The prefix is separated from the base name by two
underscores and, when constructing the actual test suite name, both
the prefix and underscores are removed. For example files
<span class=3D"file">01__some_tests.robot</span> and <span class=3D"file">0=
2__more_tests.robot</span> create test
suites <span class=3D"name">Some Tests</span> and <span class=3D"name">More=
 Tests</span>, respectively, and
the former is executed before the latter.</p>
<p>The documentation for a test suite is set using the <span class=3D"setti=
ng">Documentation</span>
setting in the Setting table. It can be used in test case files
or, with higher-level suites, in test suite initialization files. Test
suite documentation has exactly the same characteristics regarding to where
it is shown and how it can be created as <a class=3D"reference internal" hr=
ef=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGui=
de.html#test-case-name-and-documentation">test case
documentation</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Documentation</span><span class=3D"p">    </span><span c=
lass=3D"s">An example test suite documentation with *some* _formatting_.</s=
pan><span class=3D"p"></span>
<span class=3D"p">...              </span><span class=3D"s">See test docume=
ntation for more documentation examples.</span><span class=3D"p"></span>
</pre></div>
<p>Both the name and documentation of the top-level test suite can be
overridden in test execution. This can be done with the command line
options <span class=3D"option">--name</span> and <span class=3D"option">--d=
oc</span>, respectively, as
explained in section <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-meta=
data">Setting metadata</a>.</p>
</div>
<div class=3D"section" id=3D"free-test-suite-metadata">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id557">2.4.4&nbsp;&nbsp;&nbsp;Free t=
est suite metadata</a></h3>
<p>Test suites can also have other metadata than the documentation. This me=
tadata
is defined in the Setting table using the <span class=3D"setting">Metadata<=
/span> setting. Metadata
set in this manner is shown in test reports and logs.</p>
<p>The name and value for the metadata are located in the columns following
<span class=3D"setting">Metadata</span>. The value is handled similarly as =
documentation, which means
that it can be split <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#dividing-tes=
t-data-to-several-rows">into several cells</a> (joined together with spaces=
)
or <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#newlines-in-test-data">into se=
veral rows</a> (joined together with newlines),
simple <a class=3D"reference internal" href=3D"http://robotframework.org/ro=
botframework/latest/RobotFrameworkUserGuide.html#documentation-formatting">=
HTML formatting</a> works and even <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#variables">variables</a> can be used.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Metadata</span><span class=3D"p">    </span><span class=
=3D"s">Version</span><span class=3D"p">        </span><span class=3D"s">2.0=
</span><span class=3D"p"></span>
<span class=3D"kn">Metadata</span><span class=3D"p">    </span><span class=
=3D"s">More Info</span><span class=3D"p">      </span><span class=3D"s">For=
 more information about *Robot Framework* see http://robotframework.org</sp=
an><span class=3D"p"></span>
<span class=3D"kn">Metadata</span><span class=3D"p">    </span><span class=
=3D"s">Executed At</span><span class=3D"p">    ${</span><span class=3D"nv">=
HOST</span><span class=3D"p">}</span>
</pre></div>
<p>For top-level test suites, it is possible to set metadata also with the
<span class=3D"option">--metadata</span> command line option. This is discu=
ssed in more
detail in section <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-metadat=
a">Setting metadata</a>.</p>
</div>
<div class=3D"section" id=3D"suite-setup-and-teardown">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id558">2.4.5&nbsp;&nbsp;&nbsp;Suite =
setup and teardown</a></h3>
<p>Not only <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#test-setup-and-teardo=
wn">test cases</a> but also test suites can have a setup and
a teardown. A suite setup is executed before running any of the suite's
test cases or child test suites, and a test teardown is executed after
them. All test suites can have a setup and a teardown; with suites created
from a directory they must be specified in a <a class=3D"reference internal=
" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUse=
rGuide.html#initialization-files">test suite
initialization file</a>.</p>
<p>Similarly as with test cases, a suite setup and teardown are keywords
that may take arguments. They are defined in the Setting table with
<span class=3D"setting">Suite Setup</span> and <span class=3D"setting">Suit=
e Teardown</span> settings,
respectively. Keyword names and possible arguments are located in
the columns after the setting name.</p>
<p>If a suite setup fails, all test cases in it and its child test suites
are immediately assigned a fail status and they are not actually
executed. This makes suite setups ideal for checking preconditions
that must be met before running test cases is possible.</p>
<p>A suite teardown is normally used for cleaning up after all the test
cases have been executed. It is executed even if the setup of the same
suite fails. If the suite teardown fails, all test cases in the
suite are marked failed, regardless of their original execution status.
Note that all the keywords in suite teardowns are executed even if one
of them fails.</p>
<p>The name of the keyword to be executed as a setup or a teardown can be
a variable. This facilitates having different setups or teardowns
in different environments by giving the keyword name as a variable
from the command line.</p>
</div>
</div>
<div class=3D"section" id=3D"using-test-libraries">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id508">2.5&nbsp;&nbsp;&nbsp;Using te=
st libraries</a></h2>
<p>Test libraries contain those lowest-level keywords, often called
<em>library keywords</em>, which actually interact with the system under
test. All test cases always use keywords from some library, often
through higher-level <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-use=
r-keywords">user keywords</a>. This section explains how to
take test libraries into use and how to use the keywords they
provide. <a class=3D"reference internal" href=3D"http://robotframework.org/=
robotframework/latest/RobotFrameworkUserGuide.html#creating-test-libraries"=
>Creating test libraries</a> is described in a separate
section.</p>
<div class=3D"contents local topic" id=3D"id91">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#importing-libraries" id=3D"id=
559">2.5.1&nbsp;&nbsp;&nbsp;Importing libraries</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-library-setting" id=3D"=
id560">Using <code>Library</code> setting</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-import-library-keyword"=
 id=3D"id561">Using <code>Import Library</code> keyword</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#specifying-library-to-import"=
 id=3D"id562">2.5.2&nbsp;&nbsp;&nbsp;Specifying library to import</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-library-name" id=3D"id5=
63">Using library name</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-physical-path-to-librar=
y" id=3D"id564">Using physical path to library</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-custom-name-to-test-l=
ibrary" id=3D"id565">2.5.3&nbsp;&nbsp;&nbsp;Setting custom name to test lib=
rary</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#standard-libraries" id=3D"id5=
66">2.5.4&nbsp;&nbsp;&nbsp;Standard libraries</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#normal-standard-libraries" id=
=3D"id567">Normal standard libraries</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#remote-library" id=3D"id568">=
Remote library</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#external-libraries" id=3D"id5=
69">2.5.5&nbsp;&nbsp;&nbsp;External libraries</a></li>
</ul>
</div>
<div class=3D"section" id=3D"importing-libraries">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id559">2.5.1&nbsp;&nbsp;&nbsp;Import=
ing libraries</a></h3>
<p>Test libraries are typically imported using the <span class=3D"setting">=
Library</span> setting,
but it is also possible to use the <span class=3D"name">Import Library</spa=
n> keyword.</p>
<div class=3D"section" id=3D"using-library-setting">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id560">Using <code>Library</code> se=
tting</a></h4>
<p>Test libraries are normally imported using the <span class=3D"setting">L=
ibrary</span>
setting in the Setting table and having the library name in the
subsequent column. Unlike most of the other data, the library name
is both case- and space-sensitive. If a library is in a package,
the full name including the package name must be used.</p>
<p>In those cases where the library needs arguments, they are listed in
the columns after the library name. It is possible to use default
values, variable number of arguments, and named arguments in test
library imports similarly as with <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#using-arguments">arguments to keywords</a>.  Both the
library name and arguments can be set using variables.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">OperatingSystem</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">my.package.TestLibrary</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">MyLibrary</span><span class=3D"p">    </span><span class=3D"s">arg1=
</span><span class=3D"p">    </span><span class=3D"s">arg2</span><span clas=
s=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    ${</span><span class=
=3D"nv">LIBRARY</span><span class=3D"p">}</span>
</pre></div>
<p>It is possible to import test libraries in <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#test-case-files">test case files</a>,
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#resource-files">resource files</a=
> and <a class=3D"reference internal" href=3D"http://robotframework.org/rob=
otframework/latest/RobotFrameworkUserGuide.html#initialization-files">test =
suite initialization files</a>. In all these
cases, all the keywords in the imported library are available in that
file. With resource files, those keywords are also available in other
files using them.</p>
</div>
<div class=3D"section" id=3D"using-import-library-keyword">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id561">Using <code>Import Library</c=
ode> keyword</a></h4>
<p>Another possibility to take a test library into use is using the
keyword <span class=3D"name">Import Library</span> from the <a class=3D"ref=
erence external" href=3D"http://robotframework.org/robotframework/latest/li=
braries/BuiltIn.html">BuiltIn</a> library. This keyword
takes the library name and possible arguments similarly as the
<span class=3D"setting">Library</span> setting. Keywords from the imported =
library are
available in the test suite where the <span class=3D"name">Import Library</=
span> keyword was
used. This approach is useful in cases where the library is not
available when the test execution starts and only some other keywords
make it available.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Import Library</span><span =
class=3D"p">    </span><span class=3D"s">MyLibrary</span><span class=3D"p">=
    </span><span class=3D"s">arg1</span><span class=3D"p">    </span><span =
class=3D"s">arg2</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">KW From MyLibrary</span><sp=
an class=3D"p"></span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"specifying-library-to-import">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id562">2.5.2&nbsp;&nbsp;&nbsp;Specif=
ying library to import</a></h3>
<p>Libraries to import can be specified either by using the library name
or the path to the library. These approaches work the same way regardless
is the library imported using the <span class=3D"setting">Library</span> se=
tting or the
<span class=3D"name">Import Library</span> keyword.</p>
<div class=3D"section" id=3D"using-library-name">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id563">Using library name</a></h4>
<p>The most common way to specify a test library to import is using its
name, like it has been done in all the examples in this section. In
these cases Robot Framework tries to find the class or module
implementing the library from the <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#module-search-path">module search path</a>. Libraries that
are installed somehow ought to be in the module search path automatically,
but with other libraries the search path may need to be configured separate=
ly.</p>
<p>The biggest benefit of this approach is that when the module search
path has been configured, often using a custom <a class=3D"reference intern=
al" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#start-up-script">start-up script</a>,
normal users do not need to think where libraries actually are
installed. The drawback is that getting your own, possible
very simple, libraries into the search path may require some
additional configuration.</p>
</div>
<div class=3D"section" id=3D"using-physical-path-to-library">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id564">Using physical path to librar=
y</a></h4>
<p>Another mechanism for specifying the library to import is using a
path to it in the file system. This path is considered relative to the
directory where current test data file is situated similarly as paths
to <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#resource-and-variable-files">r=
esource and variable files</a>. The main benefit of this approach
is that there is no need to configure the module search path.</p>
<p>If the library is a file, the path to it must contain extension. For
Python libraries the extension is naturally <span class=3D"file">.py</span>=
 and for Java
libraries it can either be <span class=3D"file">.class</span> or <span clas=
s=3D"file">.java</span>, but the
class file must always be available. If Python library is implemented
as a directory, the path to it must have a trailing forward slash (<code>/<=
/code>)
if the path is relative. With absolute paths the trailing slash is optional=
.
Following examples demonstrate these different usages.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">PythonLibrary.py</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">/absolute/path/JavaLibrary.java</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">relative/path/PythonDirLib/</span><span class=3D"p">    </span><spa=
n class=3D"s">possible</span><span class=3D"p">    </span><span class=3D"s"=
>arguments</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    ${</span><span class=
=3D"nv">RESOURCES</span><span class=3D"p">}</span><span class=3D"nn">/Examp=
le.class</span><span class=3D"p"></span>
</pre></div>
<p>A limitation of this approach is that libraries implemented as Python cl=
asses <a class=3D"reference internal" href=3D"http://robotframework.org/rob=
otframework/latest/RobotFrameworkUserGuide.html#test-library-names">must
be in a module with the same name as the class</a>. Additionally, importing
libraries distributed in JAR or ZIP packages is not possible with this mech=
anism.</p>
</div>
</div>
<div class=3D"section" id=3D"setting-custom-name-to-test-library">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id565">2.5.3&nbsp;&nbsp;&nbsp;Settin=
g custom name to test library</a></h3>
<p>The library name is shown in test logs before keyword names, and if
multiple keywords have the same name, they must be used so that the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#handling-keywords-with-same-names=
">keyword name is prefixed with the library name</a>. The library name
is got normally from the module or class name implementing it, but
there are some situations where changing it is desirable:</p>
<ul class=3D"simple">
<li>There is a need to import the same library several times with
different arguments. This is not possible otherwise.</li>
<li>The library name is inconveniently long. This can happen, for
example, if a Java library has a long package name.</li>
<li>You want to use variables to import different libraries in
different environments, but refer to them with the same name.</li>
<li>The library name is misleading or otherwise poor. In this case,
changing the actual name is, of course, a better solution.</li>
</ul>
<p>The basic syntax for specifying the new name is having the text
<code>WITH NAME</code> (case-sensitive) after the library name and then
having the new name in the next cell. The specified name is shown in
logs and must be used in the test data when using keywords' full name
(<span class=3D"name">LibraryName.Keyword Name</span>).</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">com.company.TestLib</span><span class=3D"p">    </span><span class=
=3D"s">WITH NAME</span><span class=3D"p">    </span><span class=3D"s">TestL=
ib</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    ${</span><span class=
=3D"nv">LIBRARY</span><span class=3D"p">}             </span><span class=3D=
"s">WITH NAME</span><span class=3D"p">    </span><span class=3D"s">MyName</=
span><span class=3D"p"></span>
</pre></div>
<p>Possible arguments to the library are placed into cells between the
original library name and the <code>WITH NAME</code> text. The following ex=
ample
illustrates how the same library can be imported several times with
different arguments:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">SomeLibrary</span><span class=3D"p">    </span><span class=3D"s">lo=
calhost</span><span class=3D"p">        </span><span class=3D"s">1234</span=
><span class=3D"p">    </span><span class=3D"s">WITH NAME</span><span class=
=3D"p">    </span><span class=3D"s">LocalLib</span><span class=3D"p"></span=
>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">SomeLibrary</span><span class=3D"p">    </span><span class=3D"s">se=
rver.domain</span><span class=3D"p">    </span><span class=3D"s">8080</span=
><span class=3D"p">    </span><span class=3D"s">WITH NAME</span><span class=
=3D"p">    </span><span class=3D"s">RemoteLib</span><span class=3D"p"></spa=
n>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">My Test</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">LocalLib.Some Keyword</span=
><span class=3D"p">     </span><span class=3D"s">some arg</span><span class=
=3D"p">       </span><span class=3D"s">second arg</span><span class=3D"p"><=
/span>
<span class=3D"p">    </span><span class=3D"nf">RemoteLib.Some Keyword</spa=
n><span class=3D"p">    </span><span class=3D"s">another arg</span><span cl=
ass=3D"p">    </span><span class=3D"s">whatever</span><span class=3D"p"></s=
pan>
<span class=3D"p">    </span><span class=3D"nf">LocalLib.Another Keyword</s=
pan><span class=3D"p"></span>
</pre></div>
<p>Setting a custom name to a test library works both when importing a
library in the Setting table and when using the <span class=3D"name">Import=
 Library</span> keyword.</p>
</div>
<div class=3D"section" id=3D"standard-libraries">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id566">2.5.4&nbsp;&nbsp;&nbsp;Standa=
rd libraries</a></h3>
<p>Some test libraries are distributed with Robot Framework and these
libraries are called <em>standard libraries</em>. The <a class=3D"reference=
 external" href=3D"http://robotframework.org/robotframework/latest/librarie=
s/BuiltIn.html">BuiltIn</a> library is special,
because it is taken into use automatically and thus its keywords are always
available. Other standard libraries need to be imported in the same way
as any other libraries, but there is no need to install them.</p>
<div class=3D"section" id=3D"normal-standard-libraries">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id567">Normal standard libraries</a>=
</h4>
<p>The available normal standard libraries are listed below with links to t=
heir
documentations:</p>
<blockquote>
<ul class=3D"simple">
<li><a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/libraries/BuiltIn.html">BuiltIn</a></li>
<li><a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/libraries/Collections.html">Collections</a></li>
<li><a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/libraries/DateTime.html">DateTime</a></li>
<li><a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/libraries/Dialogs.html">Dialogs</a></li>
<li><a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/libraries/OperatingSystem.html">OperatingSystem</a></li>
<li><a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/libraries/Process.html">Process</a></li>
<li><a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/libraries/Screenshot.html">Screenshot</a></li>
<li><a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/libraries/String.html">String</a></li>
<li><a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/libraries/Telnet.html">Telnet</a></li>
<li><a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/libraries/XML.html">XML</a></li>
</ul>
</blockquote>
</div>
<div class=3D"section" id=3D"remote-library">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id568">Remote library</a></h4>
<p>In addition to the normal standard libraries listed above, there is
also <span class=3D"name">Remote</span> library that is totally different t=
han the other standard
libraries. It does not have any keywords of its own but it works as a
proxy between Robot Framework and actual test library implementations.
These libraries can be running on other machines than the core
framework and can even be implemented using languages not supported by
Robot Framework natively.</p>
<p>See separate <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#remote-library-in=
terface">Remote library interface</a> section for more information
about this concept.</p>
</div>
</div>
<div class=3D"section" id=3D"external-libraries">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id569">2.5.5&nbsp;&nbsp;&nbsp;Extern=
al libraries</a></h3>
<p>Any test library that is not one of the standard libraries is, by
definition, <em>an external library</em>. The Robot Framework open source c=
ommunity
has implemented several generic libraries, such as <a class=3D"reference ex=
ternal" href=3D"https://github.com/robotframework/SeleniumLibrary">Selenium=
Library</a> and
<a class=3D"reference external" href=3D"https://github.com/robotframework/S=
wingLibrary">SwingLibrary</a>, which are not packaged with the core framewo=
rk. A list of
publicly available libraries can be found from <a class=3D"reference extern=
al" href=3D"http://robotframework.org/">http://robotframework.org</a>.</p>
<p>Generic and custom libraries can obviously also be implemented by teams =
using
Robot Framework. See <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-tes=
t-libraries">Creating test libraries</a> section for more information
about that topic.</p>
<p>Different external libraries can have a totally different mechanism
for installing them and taking them into use. Sometimes they may also requi=
re
some other dependencies to be installed separately. All libraries
should have clear installation and usage documentation and they should
preferably automate the installation process.</p>
</div>
</div>
<div class=3D"section" id=3D"variables">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id509">2.6&nbsp;&nbsp;&nbsp;Variable=
s</a></h2>
<div class=3D"contents local topic" id=3D"id95">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id96" id=3D"id570">2.6.1&nbsp=
;&nbsp;&nbsp;Introduction</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-variables" id=3D"id571"=
>2.6.2&nbsp;&nbsp;&nbsp;Using variables</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#scalar-variable-syntax" id=3D=
"id572">Scalar variable syntax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#list-variable-syntax" id=3D"i=
d573">List variable syntax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#dictionary-variable-syntax" i=
d=3D"id574">Dictionary variable syntax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#accessing-list-and-dictionary=
-items" id=3D"id575">Accessing list and dictionary items</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#environment-variables" id=3D"=
id576">Environment variables</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#java-system-properties" id=3D=
"id577">Java system properties</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-variables" id=3D"id5=
78">2.6.3&nbsp;&nbsp;&nbsp;Creating variables</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variable-table" id=3D"id579">=
Variable table</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variable-file" id=3D"id580">V=
ariable file</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-variables-in-command-=
line" id=3D"id581">Setting variables in command line</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#return-values-from-keywords" =
id=3D"id582">Return values from keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-set-test-suite-global-v=
ariable-keywords" id=3D"id583">Using <span class=3D"name">Set Test/Suite/Gl=
obal Variable</span> keywords</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#built-in-variables" id=3D"id5=
84">2.6.4&nbsp;&nbsp;&nbsp;Built-in variables</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#operating-system-variables" i=
d=3D"id585">Operating-system variables</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#number-variables" id=3D"id586=
">Number variables</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#boolean-and-none-null-variabl=
es" id=3D"id587">Boolean and None/null variables</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#space-and-empty-variables" id=
=3D"id588">Space and empty variables</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#automatic-variables" id=3D"id=
589">Automatic variables</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variable-priorities-and-scope=
s" id=3D"id590">2.6.5&nbsp;&nbsp;&nbsp;Variable priorities and scopes</a><u=
l>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variable-priorities" id=3D"id=
591">Variable priorities</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variable-scopes" id=3D"id592"=
>Variable scopes</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#advanced-variable-features" i=
d=3D"id593">2.6.6&nbsp;&nbsp;&nbsp;Advanced variable features</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#extended-variable-syntax" id=
=3D"id594">Extended variable syntax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#extended-variable-assignment"=
 id=3D"id595">Extended variable assignment</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variables-inside-variables" i=
d=3D"id596">Variables inside variables</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"id96">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id570">2.6.1&nbsp;&nbsp;&nbsp;Introd=
uction</a></h3>
<p>Variables are an integral feature of Robot Framework, and they can be
used in most places in test data. Most commonly, they are used in
arguments for keywords in test case tables and keyword tables, but
also all settings allow variables in their values. A normal keyword
name <em>cannot</em> be specified with a variable, but the <a class=3D"refe=
rence external" href=3D"http://robotframework.org/robotframework/latest/lib=
raries/BuiltIn.html">BuiltIn</a> keyword
<span class=3D"name">Run Keyword</span> can be used to get the same effect.=
</p>
<p>Robot Framework has its own variables that can be used as <a class=3D"re=
ference internal" href=3D"http://robotframework.org/robotframework/latest/R=
obotFrameworkUserGuide.html#scalar-variables">scalars</a>, <a class=3D"refe=
rence internal" href=3D"http://robotframework.org/robotframework/latest/Rob=
otFrameworkUserGuide.html#list-variables">lists</a>
or <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#dictionary-variables">dictiona=
ries</a> using syntax <code>${SCALAR}</code>, <code>@{LIST}</code> and <cod=
e>&amp;{DICT}</code>,
respectively. In addition to this, <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#environment-variables">environment variables</a> can be used
directly with syntax <code>%{ENV_VAR}</code>.</p>
<p>Variables are useful, for example, in these cases:</p>
<ul class=3D"simple">
<li>When strings change often in the test data. With variables you only
need to make these changes in one place.</li>
<li>When creating system-independent and operating-system-independent test
data. Using variables instead of hard-coded strings eases that considerably
(for example, <code>${RESOURCES}</code> instead of <code>c:\resources</code=
>, or <code>${HOST}</code>
instead of <code>10.0.0.1:8080</code>). Because variables can be <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#setting-variables-in-command-line">set fr=
om the
command line</a> when tests are started, changing system-specific
variables is easy (for example, <code>--variable HOST:10.0.0.2:1234
--variable RESOURCES:/opt/resources</code>). This also facilitates
localization testing, which often involves running the same tests
with different strings.</li>
<li>When there is a need to have objects other than strings as arguments
for keywords. This is not possible without variables.</li>
<li>When different keywords, even in different test libraries, need to
communicate. You can assign a return value from one keyword to a
variable and pass it as an argument to another.</li>
<li>When values in the test data are long or otherwise complicated. For
example, <code>${URL}</code> is shorter than
<code>http://long.domain.name:8080/path/to/service?foo=3D1&amp;bar=3D2&amp;=
zap=3D42</code>.</li>
</ul>
<p>If a non-existent variable is used in the test data, the keyword using
it fails. If the same syntax that is used for variables is needed as a
literal string, it must be <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#escapi=
ng">escaped with a backslash</a> as in <code>\${NAME}</code>.</p>
</div>
<div class=3D"section" id=3D"using-variables">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id571">2.6.2&nbsp;&nbsp;&nbsp;Using =
variables</a></h3>
<p>This section explains how to use variables, including the normal scalar
variable syntax <code>${var}</code>, how to use variables in list and dicti=
onary
contexts like <code>@{var}</code> and <code>&amp;{var}</code>, respectively=
, and how to use environment
variables like <code>%{var}</code>. Different ways how to create variables =
are discussed
in the subsequent sections.</p>
<p>Robot Framework variables, similarly as keywords, are
case-insensitive, and also spaces and underscores are
ignored. However, it is recommended to use capital letters with
global variables (for example, <code>${PATH}</code> or <code>${TWO WORDS}</=
code>)
and small letters with local variables that are only available in certain
test cases or user keywords (for example, <code>${my var}</code>). Much mor=
e
importantly, though, case should be used consistently.</p>
<p>Variable name consists of the variable type identifier (<code>$</code>, =
<code>@</code>, <code>&amp;</code>, <code>%</code>),
curly braces (<code>{</code>, <code>}</code>) and the actual variable name =
between the braces.
Unlike in some programming languages where similar variable syntax is
used, curly braces are always mandatory. Variable names can basically have
any characters between the curly braces. However, using only alphabetic
characters from a to z, numbers, underscore and space is recommended, and
it is even a requirement for using the <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#extended-variable-syntax">extended variable syntax</a>.</p>
<div class=3D"section" id=3D"scalar-variable-syntax">
<span id=3D"scalar-variables"></span><span id=3D"scalar-variable"></span><h=
4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframework=
/latest/RobotFrameworkUserGuide.html#id572">Scalar variable syntax</a></h4>
<p>The most common way to use variables in Robot Framework test data is usi=
ng
the scalar variable syntax like <code>${var}</code>. When this syntax is us=
ed, the
variable name is replaced with its value as-is. Most of the time variable
values are strings, but variables can contain any object, including numbers=
,
lists, dictionaries, or even custom objects.</p>
<p>The example below illustrates the usage of scalar variables. Assuming
that the variables <code>${GREET}</code> and <code>${NAME}</code> are avail=
able
and assigned to strings <code>Hello</code> and <code>world</code>, respecti=
vely,
both the example test cases are equivalent.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Constants</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Hello</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Hello, world!!</span><span class=3D"p"></span=
>

<span class=3D"gu">Variables</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    ${</span><span class=3D"nv">GREET</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    ${</span><span class=3D"nv">GREET</span><span class=3D"p">}</span><spa=
n class=3D"s">, </span><span class=3D"p">${</span><span class=3D"nv">NAME</=
span><span class=3D"p">}</span><span class=3D"s">!!</span><span class=3D"p"=
></span>
</pre></div>
<p>When a scalar variable is used alone without any text or other variables
around it, like in <code>${GREET}</code> above, the variable is replaced wi=
th
its value as-is and the value can be any object. If the variable is not use=
d
alone, like <code>${GREER}, ${NAME}!!</code> above, its value is first conv=
erted into
a string and then concatenated with the other data.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Variable values are used as-is without conversions also w=
hen
passing arguments to keywords using the <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#named-arguments">named arguments</a>
syntax like <code>argname=3D${var}</code>.</p>
</div>
<p>The example below demonstrates the difference between having a
variable in alone or with other content. First, let us assume
that we have a variable <code>${STR}</code> set to a string <code>Hello,
world!</code> and <code>${OBJ}</code> set to an instance of the following J=
ava
object:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">MyObj</span> <span clas=
s=3D"o">{</span>

    <span class=3D"kd">public</span> <span class=3D"n">String</span> <span =
class=3D"nf">toString</span><span class=3D"o">()</span> <span class=3D"o">{=
</span>
        <span class=3D"k">return</span> <span class=3D"s">"Hi, terra!"</spa=
n><span class=3D"o">;</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
<p>With these two variables set, we then have the following test data:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Objects</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">KW 1</span><span class=3D"p=
">    ${</span><span class=3D"nv">STR</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">KW 2</span><span class=3D"p=
">    ${</span><span class=3D"nv">OBJ</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">KW 3</span><span class=3D"p=
">    </span><span class=3D"s">I said "</span><span class=3D"p">${</span><s=
pan class=3D"nv">STR</span><span class=3D"p">}</span><span class=3D"s">"</s=
pan><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">KW 4</span><span class=3D"p=
">    </span><span class=3D"s">You said "</span><span class=3D"p">${</span>=
<span class=3D"nv">OBJ</span><span class=3D"p">}</span><span class=3D"s">"<=
/span><span class=3D"p"></span>
</pre></div>
<p>Finally, when this test data is executed, different keywords receive
the arguments as explained below:</p>
<ul class=3D"simple">
<li><span class=3D"name">KW 1</span> gets a string <code>Hello, world!</cod=
e></li>
<li><span class=3D"name">KW 2</span> gets an object stored to variable <cod=
e>${OBJ}</code></li>
<li><span class=3D"name">KW 3</span> gets a string <code>I said "Hello, wor=
ld!"</code></li>
<li><span class=3D"name">KW 4</span> gets a string <code>You said "Hi, terr=
a!"</code></li>
</ul>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Converting variables to Unicode obviously fails if the va=
riable
cannot be represented as Unicode. This can happen, for example,
if you try to use byte sequences as arguments to keywords so that
you catenate the values together like <code>${byte1}${byte2}</code>.
A workaround is creating a variable that contains the whole value
and using it alone in the cell (e.g. <code>${bytes}</code>) because then
the value is used as-is.</p>
</div>
</div>
<div class=3D"section" id=3D"list-variable-syntax">
<span id=3D"list-variables"></span><span id=3D"list-variable"></span><h4><a=
 class=3D"toc-backref" href=3D"http://robotframework.org/robotframework/lat=
est/RobotFrameworkUserGuide.html#id573">List variable syntax</a></h4>
<p>When a variable is used as a scalar like <code>${EXAMPLE}</code>, its va=
lue is be
used as-is. If a variable value is a list or list-like, it is also possible
to use it as a list variable like <code>@{EXAMPLE}</code>. In this case ind=
ividual list
items are passed in as arguments separately. This is easiest to explain wit=
h
an example. Assuming that a variable <code>@{USER}</code> has value <code>[=
'robot', 'secret']</code>,
the following two test cases are equivalent:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Constants</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Login</span><span class=3D"=
p">    </span><span class=3D"s">robot</span><span class=3D"p">    </span><s=
pan class=3D"s">secret</span><span class=3D"p"></span>

<span class=3D"gu">List Variable</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Login</span><span class=3D"=
p">    @{</span><span class=3D"nv">USER</span><span class=3D"p">}</span>
</pre></div>
<p>Robot Framework stores its own variables in one internal storage and all=
ows
using them as scalars, lists or dictionaries. Using a variable as a list
requires its value to be a Python list or list-like object. Robot Framework
does not allow strings to be used as lists, but other iterable objects such
as tuples or dictionaries are accepted.</p>
<p>Prior to Robot Framework 2.9, scalar and list variables were stored sepa=
rately,
but it was possible to use list variables as scalars and scalar variables a=
s
lists. This caused lot of confusion when there accidentally was a scalar
variable and a list variable with same name but different value.</p>
<div class=3D"section" id=3D"using-list-variables-with-other-data">
<h5>Using list variables with other data</h5>
<p>It is possible to use list variables with other arguments, including
other list variables.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Keyword</span><span class=
=3D"p">    @{</span><span class=3D"nv">LIST</span><span class=3D"p">}    </=
span><span class=3D"s">more</span><span class=3D"p">    </span><span class=
=3D"s">args</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Keyword</span><span class=
=3D"p">    ${</span><span class=3D"nv">SCALAR</span><span class=3D"p">}    =
@{</span><span class=3D"nv">LIST</span><span class=3D"p">}    </span><span =
class=3D"s">constant</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Keyword</span><span class=
=3D"p">    @{</span><span class=3D"nv">LIST</span><span class=3D"p">}    @{=
</span><span class=3D"nv">ANOTHER</span><span class=3D"p">}    @{</span><sp=
an class=3D"nv">ONE MORE</span><span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"using-list-variables-with-settings">
<h5>Using list variables with settings</h5>
<p>List variables can be used only with some of the <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#all-available-settings-in-test-data">settings</a>. They =
can
be used in arguments to imported libraries and variable files, but
library and variable file names themselves cannot be list
variables. Also with setups and teardowns list variable can not be used
as the name of the keyword, but can be used in arguments. With tag related
settings they can be used freely. Using scalar variables is possible in
those places where list variables are not supported.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">         </span><span cl=
ass=3D"nn">ExampleLibrary</span><span class=3D"p">      @{</span><span clas=
s=3D"nv">LIB ARGS</span><span class=3D"p">}    </span><span class=3D"c"># T=
his works</span>
<span class=3D"kn">Library</span><span class=3D"p">         ${</span><span =
class=3D"nv">LIBRARY</span><span class=3D"p">}          @{</span><span clas=
s=3D"nv">LIB ARGS</span><span class=3D"p">}    </span><span class=3D"c"># T=
his works</span>
<span class=3D"kn">Library</span><span class=3D"p">         @{</span><span =
class=3D"nv">LIBRARY AND ARGS</span><span class=3D"p">}                </sp=
an><span class=3D"c"># This does not work</span>
<span class=3D"kn">Suite Setup</span><span class=3D"p">     </span><span cl=
ass=3D"nf">Some Keyword</span><span class=3D"p">        @{</span><span clas=
s=3D"nv">KW ARGS</span><span class=3D"p">}     </span><span class=3D"c"># T=
his works</span>
<span class=3D"kn">Suite Setup</span><span class=3D"p">     ${</span><span =
class=3D"nv">KEYWORD</span><span class=3D"p">}          @{</span><span clas=
s=3D"nv">KW ARGS</span><span class=3D"p">}     </span><span class=3D"c"># T=
his works</span>
<span class=3D"kn">Suite Setup</span><span class=3D"p">     @{</span><span =
class=3D"nv">KEYWORD AND ARGS</span><span class=3D"p">}                </sp=
an><span class=3D"c"># This does not work</span>
<span class=3D"kn">Default Tags</span><span class=3D"p">    @{</span><span =
class=3D"nv">TAGS</span><span class=3D"p">}                            </sp=
an><span class=3D"c"># This works</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"dictionary-variable-syntax">
<span id=3D"dictionary-variables"></span><span id=3D"dictionary-variable"><=
/span><h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#id574">Dictionary variable syn=
tax</a></h4>
<p>As discussed above, a variable containing a list can be used as a <a cla=
ss=3D"reference internal" href=3D"http://robotframework.org/robotframework/=
latest/RobotFrameworkUserGuide.html#list-variable">list
variable</a> to pass list items to a keyword as individual arguments.
Similarly a variable containing a Python dictionary or a dictionary-like
object can be used as a dictionary variable like <code>&amp;{EXAMPLE}</code=
>. In practice
this means that individual items of the dictionary are passed as
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#named-arguments">named arguments<=
/a> to the keyword. Assuming that a variable <code>&amp;{USER}</code> has
value <code>{'name': 'robot', 'password': 'secret'}</code>, the following t=
wo test cases
are equivalent.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Constants</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Login</span><span class=3D"=
p">    </span><span class=3D"s">name=3Drobot</span><span class=3D"p">    </=
span><span class=3D"s">password=3Dsecret</span><span class=3D"p"></span>

<span class=3D"gu">Dict Variable</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Login</span><span class=3D"=
p">    &amp;{</span><span class=3D"nv">USER</span><span class=3D"p">}</span=
>
</pre></div>
<p>Dictionary variables are new in Robot Framework 2.9.</p>
<div class=3D"section" id=3D"using-dictionary-variables-with-other-data">
<h5>Using dictionary variables with other data</h5>
<p>It is possible to use dictionary variables with other arguments, includi=
ng
other dictionary variables. Because <a class=3D"reference internal" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#named-argument-syntax">named argument syntax</a> requires positional
arguments to be before named argument, dictionaries can only be followed by
named arguments or other dictionaries.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Keyword</span><span class=
=3D"p">    &amp;{</span><span class=3D"nv">DICT</span><span class=3D"p">}  =
  </span><span class=3D"s">named=3Darg</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Keyword</span><span class=
=3D"p">    </span><span class=3D"s">positional</span><span class=3D"p">    =
@{</span><span class=3D"nv">LIST</span><span class=3D"p">}    &amp;{</span>=
<span class=3D"nv">DICT</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Keyword</span><span class=
=3D"p">    &amp;{</span><span class=3D"nv">DICT</span><span class=3D"p">}  =
  &amp;{</span><span class=3D"nv">ANOTHER</span><span class=3D"p">}    &amp=
;{</span><span class=3D"nv">ONE MORE</span><span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"using-dictionary-variables-with-settings">
<h5>Using dictionary variables with settings</h5>
<p>Dictionary variables cannot generally be used with settings. The only ex=
ception
are imports, setups and teardowns where dictionaries can be used as argumen=
ts.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">        </span><span cla=
ss=3D"nn">ExampleLibrary</span><span class=3D"p">    &amp;{</span><span cla=
ss=3D"nv">LIB ARGS</span><span class=3D"p">}</span>
<span class=3D"kn">Suite Setup</span><span class=3D"p">    </span><span cla=
ss=3D"nf">Some Keyword</span><span class=3D"p">      &amp;{</span><span cla=
ss=3D"nv">KW ARGS</span><span class=3D"p">}     </span><span class=3D"s">na=
med=3Darg</span><span class=3D"p"></span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"accessing-list-and-dictionary-items">
<span id=3D"environment-variable"></span><h4><a class=3D"toc-backref" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#id575">Accessing list and dictionary items</a></h4>
<p>It is possible to access items of lists and dictionaries using special
syntax <code>${var}[item]</code>. Accessing items is an old feature, but pr=
ior to
Robot Framework 3.1 the syntax was <code>@{var}[item]</code> with lists and
<code>&amp;{var}[item]</code> with dictionaries. The old syntax still works=
 in Robot
Framework 3.1, but it <a class=3D"reference external" href=3D"https://githu=
b.com/robotframework/robotframework/issues/2973">will be deprecated in Robo=
t Framework 3.2</a> and
its meaning will change in Robot Framework 3.3.</p>
<div class=3D"section" id=3D"accessing-list-items">
<h5>Accessing list items</h5>
<p>It is possible to access a certain item of a list variable with the synt=
ax
<code>${var}[index]</code>, where <code>index</code> is the index of the se=
lected value. Indices
start from zero, negative indices can be used to access items from the end,
and trying to access an item with too large an index causes an error.
Indices are automatically converted to integers, and it is also possible to
use variables as indices. List items accessed in this manner can be used
similarly as scalar variables.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">List variable item</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Login</span><span class=3D"=
p">    ${</span><span class=3D"nv">USER</span><span class=3D"p">}[</span><s=
pan class=3D"nv">0</span><span class=3D"p">]    ${</span><span class=3D"nv"=
>USER</span><span class=3D"p">}[</span><span class=3D"nv">1</span><span cla=
ss=3D"p">]</span>
<span class=3D"p">    </span><span class=3D"nf">Title Should Be</span><span=
 class=3D"p">    </span><span class=3D"s">Welcome </span><span class=3D"p">=
${</span><span class=3D"nv">USER</span><span class=3D"p">}[</span><span cla=
ss=3D"nv">0</span><span class=3D"p">]</span><span class=3D"s">!</span><span=
 class=3D"p"></span>

<span class=3D"gu">Negative index</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    ${</span><span class=3D"nv">LIST</span><span class=3D"p">}[</span><spa=
n class=3D"nv">-1</span><span class=3D"p">]</span>

<span class=3D"gu">Index defined as variable</span><span class=3D"p"></span=
>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    ${</span><span class=3D"nv">LIST</span><span class=3D"p">}[${</span><s=
pan class=3D"nv">INDEX</span><span class=3D"p">}]</span>
</pre></div>
<p>List item access supports also the <a class=3D"reference external" href=
=3D"https://docs.python.org/glossary.html#term-slice">same "slice" function=
ality as Python</a>
with syntax like <code>${var}[1:]</code>. With this syntax you do not get a=
 single
item but a slice of the original list. Same way as with Python you can
specify the start index, the end index, and the step:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Start index</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Keyword</span><span class=
=3D"p">    ${</span><span class=3D"nv">LIST</span><span class=3D"p">}[</spa=
n><span class=3D"nv">1:</span><span class=3D"p">]</span>

<span class=3D"gu">End index</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Keyword</span><span class=
=3D"p">    ${</span><span class=3D"nv">LIST</span><span class=3D"p">}[</spa=
n><span class=3D"nv">:4</span><span class=3D"p">]</span>

<span class=3D"gu">Start and end</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Keyword</span><span class=
=3D"p">    ${</span><span class=3D"nv">LIST</span><span class=3D"p">}[</spa=
n><span class=3D"nv">2:-1</span><span class=3D"p">]</span>

<span class=3D"gu">Step</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Keyword</span><span class=
=3D"p">    ${</span><span class=3D"nv">LIST</span><span class=3D"p">}[</spa=
n><span class=3D"nv">::2</span><span class=3D"p">]</span>
<span class=3D"p">    </span><span class=3D"nf">Keyword</span><span class=
=3D"p">    ${</span><span class=3D"nv">LIST</span><span class=3D"p">}[</spa=
n><span class=3D"nv">2:-1:2</span><span class=3D"p">]</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The slice syntax is new in Robot Framework 3.1 and does n=
ot work
with the old <code>@{var}[index]</code> syntax.</p>
</div>
</div>
<div class=3D"section" id=3D"accessing-individual-dictionary-items">
<h5>Accessing individual dictionary items</h5>
<p>It is possible to access a certain value of a dictionary variable
with the syntax <code>${NAME}[key]</code>, where <code>key</code> is the na=
me of the
selected value. Keys are considered to be strings, but non-strings
keys can be used as variables. Dictionary values accessed in this
manner can be used similarly as scalar variables.</p>
<p>If a key is a string, it is possible to access its value also using
attribute access syntax <code>${NAME.key}</code>. See <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#creating-dictionary-variables">Creating dictionary var=
iables</a>
for more details about this syntax.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Dictionary variable item</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Login</span><span class=3D"=
p">    ${</span><span class=3D"nv">USER</span><span class=3D"p">}[</span><s=
pan class=3D"nv">name</span><span class=3D"p">]    ${</span><span class=3D"=
nv">USER</span><span class=3D"p">}[</span><span class=3D"nv">password</span=
><span class=3D"p">]</span>
<span class=3D"p">    </span><span class=3D"nf">Title Should Be</span><span=
 class=3D"p">    </span><span class=3D"s">Welcome </span><span class=3D"p">=
${</span><span class=3D"nv">USER</span><span class=3D"p">}[</span><span cla=
ss=3D"nv">name</span><span class=3D"p">]</span><span class=3D"s">!</span><s=
pan class=3D"p"></span>

<span class=3D"gu">Key defined as variable</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    ${</span><span class=3D"nv">DICT</span><span class=3D"p">}[${</s=
pan><span class=3D"nv">KEY</span><span class=3D"p">}]    ${</span><span cla=
ss=3D"nv">DICT</span><span class=3D"p">}[${</span><span class=3D"nv">42</sp=
an><span class=3D"p">}]</span>

<span class=3D"gu">Attribute access</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Login</span><span class=3D"=
p">    ${</span><span class=3D"nv">USER.name</span><span class=3D"p">}    $=
{</span><span class=3D"nv">USER.password</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Title Should Be</span><span=
 class=3D"p">    </span><span class=3D"s">Welcome </span><span class=3D"p">=
${</span><span class=3D"nv">USER.name</span><span class=3D"p">}</span><span=
 class=3D"s">!</span><span class=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"nested-item-access">
<h5>Nested item access</h5>
<p>Also nested list and dictionary structures can be accessed using the sam=
e
item access syntax like <code>${var}[item1][item2]</code>. This is especial=
ly useful
when working with JSON data often returned by REST services. For example,
if a variable <code>${DATA}</code> contains <code>[{'id': 1, 'name': 'Robot=
'},
{'id': 2, 'name': 'Mr. X'}]</code>, this tests would pass:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Nested item access</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">DATA</span><span class=3D"p">}=
[</span><span class=3D"nv">0</span><span class=3D"p">][</span><span class=
=3D"nv">name</span><span class=3D"p">]    </span><span class=3D"s">Robot</s=
pan><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">DATA</span><span class=3D"p">}=
[</span><span class=3D"nv">1</span><span class=3D"p">][</span><span class=
=3D"nv">id</span><span class=3D"p">]      ${</span><span class=3D"nv">2</sp=
an><span class=3D"p">}</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"environment-variables">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id576">Environment variables</a></h4=
>
<p>Robot Framework allows using environment variables in the test
data using the syntax <code>%{ENV_VAR_NAME}</code>. They are limited to str=
ing
values.</p>
<p>Environment variables set in the operating system before the test execut=
ion are
available during it, and it is possible to create new ones with the keyword
<span class=3D"name">Set Environment Variable</span> or delete existing one=
s with the
keyword <span class=3D"name">Delete Environment Variable</span>, both avail=
able in the
<a class=3D"reference external" href=3D"http://robotframework.org/robotfram=
ework/latest/libraries/OperatingSystem.html">OperatingSystem</a> library. B=
ecause environment variables are global,
environment variables set in one test case can be used in other test
cases executed after it. However, changes to environment variables are
not effective after the test execution.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Environment variables</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Current user: </span><span class=3D"p">%{</sp=
an><span class=3D"nv">USER</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Run</span><span class=3D"p"=
>    %{</span><span class=3D"nv">JAVA_HOME</span><span class=3D"p">}${</spa=
n><span class=3D"nv">/</span><span class=3D"p">}</span><span class=3D"s">ja=
vac</span><span class=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"java-system-properties">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id577">Java system properties</a></h=
4>
<p>When running tests with Jython, it is possible to access <a class=3D"ref=
erence external" href=3D"http://docs.oracle.com/javase/tutorial/essential/e=
nvironment/sysprop.html">Java system properties</a>
using same syntax as <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#environment-=
variables">environment variables</a>. If an environment variable and a
system property with same name exist, the environment variable will be used=
.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">System properties</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    %{</span><span class=3D"nv">user.name</span><span class=3D"p">}</span>=
<span class=3D"s"> running tests on </span><span class=3D"p">%{</span><span=
 class=3D"nv">os.name</span><span class=3D"p">}</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"creating-variables">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id578">2.6.3&nbsp;&nbsp;&nbsp;Creati=
ng variables</a></h3>
<p>Variables can spring into existence from different sources.</p>
<div class=3D"section" id=3D"variable-table">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id579">Variable table</a></h4>
<p>The most common source for variables are Variable tables in <a class=3D"=
reference internal" href=3D"http://robotframework.org/robotframework/latest=
/RobotFrameworkUserGuide.html#test-case-files">test case
files</a> and <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#resource-files">res=
ource files</a>. Variable tables are convenient, because they
allow creating variables in the same place as the rest of the test
data, and the needed syntax is very simple. Their main disadvantages are
that values are always strings and they cannot be created dynamically.
If either of these is a problem, <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
variable-files">variable files</a> can be used instead.</p>
<div class=3D"section" id=3D"creating-scalar-variables">
<h5>Creating scalar variables</h5>
<p>The simplest possible variable assignment is setting a string into a
scalar variable. This is done by giving the variable name (including
<code>${}</code>) in the first column of the Variable table and the value i=
n
the second one. If the second column is empty, an empty string is set
as a value. Also an already defined variable can be used in the value.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Variables=
 ***</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">NAME</span><span class=3D"p">=
}         </span><span class=3D"s">Robot Framework</span><span class=3D"p">=
</span>
<span class=3D"p">${</span><span class=3D"nv">VERSION</span><span class=3D"=
p">}      </span><span class=3D"s">2.0</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">ROBOT</span><span class=3D"p"=
>}        ${</span><span class=3D"nv">NAME</span><span class=3D"p">}</span>=
<span class=3D"s"> </span><span class=3D"p">${</span><span class=3D"nv">VER=
SION</span><span class=3D"p">}</span>
</pre></div>
<p>It is also possible, but not obligatory,
to use the equals sign <code>=3D</code> after the variable name to make ass=
igning
variables slightly more explicit.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Variables=
 ***</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">NAME</span><span class=3D"p">=
} =3D       </span><span class=3D"s">Robot Framework</span><span class=3D"p=
"></span>
<span class=3D"p">${</span><span class=3D"nv">VERSION</span><span class=3D"=
p">} =3D    </span><span class=3D"s">2.0</span><span class=3D"p"></span>
</pre></div>
<p>If a scalar variable has a long value, it can be split to multiple colum=
ns and
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#dividing-test-data-to-several-row=
s">rows</a>. By default cells are catenated together using a space, but thi=
s
can be changed by having <code>SEPARATOR=3D&lt;sep&gt;</code> in the first =
cell.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Variables=
 ***</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">EXAMPLE</span><span class=3D"=
p">}      </span><span class=3D"s">This value is joined</span><span class=
=3D"p">    </span><span class=3D"s">together with a space</span><span class=
=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">MULTILINE</span><span class=
=3D"p">}    </span><span class=3D"s">SEPARATOR=3D\n</span><span class=3D"p"=
>    </span><span class=3D"s">First line</span><span class=3D"p"></span>
<span class=3D"p">...             </span><span class=3D"s">Second line</spa=
n><span class=3D"p">     </span><span class=3D"s">Third line</span><span cl=
ass=3D"p"></span>
</pre></div>
<p>Joining long values like above is a new feature in Robot Framework 2.9.<=
/p>
</div>
<div class=3D"section" id=3D"creating-list-variables">
<h5>Creating list variables</h5>
<p>Creating list variables is as easy as creating scalar variables. Again, =
the
variable name is in the first column of the Variable table and
values in the subsequent columns. A list variable can have any number
of values, starting from zero, and if many values are needed, they
can be <a class=3D"reference internal" href=3D"http://robotframework.org/ro=
botframework/latest/RobotFrameworkUserGuide.html#dividing-test-data-to-seve=
ral-rows">split into several rows</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Variables=
 ***</span><span class=3D"p"></span>
<span class=3D"p">@{</span><span class=3D"nv">NAMES</span><span class=3D"p"=
>}        </span><span class=3D"s">Matti</span><span class=3D"p">       </s=
pan><span class=3D"s">Teppo</span><span class=3D"p"></span>
<span class=3D"p">@{</span><span class=3D"nv">NAMES2</span><span class=3D"p=
">}       @{</span><span class=3D"nv">NAMES</span><span class=3D"p">}    </=
span><span class=3D"s">Seppo</span><span class=3D"p"></span>
<span class=3D"p">@{</span><span class=3D"nv">NOTHING</span><span class=3D"=
p">}</span>
<span class=3D"p">@{</span><span class=3D"nv">MANY</span><span class=3D"p">=
}         </span><span class=3D"s">one</span><span class=3D"p">         </s=
pan><span class=3D"s">two</span><span class=3D"p">      </span><span class=
=3D"s">three</span><span class=3D"p">      </span><span class=3D"s">four</s=
pan><span class=3D"p"></span>
<span class=3D"p">...             </span><span class=3D"s">five</span><span=
 class=3D"p">        </span><span class=3D"s">six</span><span class=3D"p"> =
     </span><span class=3D"s">seven</span><span class=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"creating-dictionary-variables">
<h5>Creating dictionary variables</h5>
<p>Dictionary variables can be created in the variable table similarly as
list variables. The difference is that items need to be created using
<code>name=3Dvalue</code> syntax or existing dictionary variables. If there=
 are multiple
items with same name, the last value has precedence. If a name contains
a literal equal sign, it can be <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#e=
scaping">escaped</a> with a backslash like <code>\=3D</code>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Variables=
 ***</span><span class=3D"p"></span>
<span class=3D"p">&amp;{</span><span class=3D"nv">USER 1</span><span class=
=3D"p">}       </span><span class=3D"s">name=3DMatti</span><span class=3D"p=
">    </span><span class=3D"s">address=3Dxxx</span><span class=3D"p">      =
   </span><span class=3D"s">phone=3D123</span><span class=3D"p"></span>
<span class=3D"p">&amp;{</span><span class=3D"nv">USER 2</span><span class=
=3D"p">}       </span><span class=3D"s">name=3DTeppo</span><span class=3D"p=
">    </span><span class=3D"s">address=3Dyyy</span><span class=3D"p">      =
   </span><span class=3D"s">phone=3D456</span><span class=3D"p"></span>
<span class=3D"p">&amp;{</span><span class=3D"nv">MANY</span><span class=3D=
"p">}         </span><span class=3D"s">first=3D1</span><span class=3D"p">  =
     </span><span class=3D"s">second=3D</span><span class=3D"p">${</span><s=
pan class=3D"nv">2</span><span class=3D"p">}         ${</span><span class=
=3D"nv">3</span><span class=3D"p">}</span><span class=3D"s">=3Dthird</span>=
<span class=3D"p"></span>
<span class=3D"p">&amp;{</span><span class=3D"nv">EVEN MORE</span><span cla=
ss=3D"p">}    &amp;{</span><span class=3D"nv">MANY</span><span class=3D"p">=
}       </span><span class=3D"s">first=3Doverride</span><span class=3D"p"> =
     </span><span class=3D"s">empty=3D</span><span class=3D"p"></span>
<span class=3D"p">...             </span><span class=3D"s">=3Dempty</span><=
span class=3D"p">        </span><span class=3D"s">key\=3Dhere=3Dvalue</span=
><span class=3D"p"></span>
</pre></div>
<p>Dictionary variables have two extra properties
compared to normal Python dictionaries. First of all, values of these
dictionaries can be accessed like attributes, which means that it is possib=
le
to use <a class=3D"reference internal" href=3D"http://robotframework.org/ro=
botframework/latest/RobotFrameworkUserGuide.html#extended-variable-syntax">=
extended variable syntax</a> like <code>${VAR.key}</code>. This only works =
if the
key is a valid attribute name and does not match any normal attribute
Python dictionaries have. For example, individual value <code>&amp;{USER}[n=
ame]</code> can
also be accessed like <code>${USER.name}</code> (notice that <code>$</code>=
 is needed in this
context), but using <code>${MANY.3}</code> is not possible.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Starting from Robot Framework 3.0.3, dictionary variable =
keys are
accessible recursively like <code>${VAR.nested.key}</code>. This eases work=
ing
with nested data structures.</p>
</div>
<p>Another special property of dictionary variables is
that they are ordered. This means that if these dictionaries are iterated,
their items always come in the order they are defined. This can be useful
if dictionaries are used as <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#list-=
variables">list variables</a> with <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#for-loops">for loops</a> or otherwise.
When a dictionary is used as a list variable, the actual value contains
dictionary keys. For example, <code>@{MANY}</code> variable would have valu=
e <code>['first',
'second', 3]</code>.</p>
</div>
</div>
<div class=3D"section" id=3D"variable-file">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id580">Variable file</a></h4>
<p>Variable files are the most powerful mechanism for creating different
kind of variables. It is possible to assign variables to any object
using them, and they also enable creating variables dynamically. The
variable file syntax and taking variable files into use is explained
in section <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#resource-and-variable-=
files">Resource and variable files</a>.</p>
</div>
<div class=3D"section" id=3D"setting-variables-in-command-line">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id581">Setting variables in command =
line</a></h4>
<p>Variables can be set from the command line either individually with
the <span class=3D"option">--variable (-v)</span> option or using a variabl=
e file with the
<span class=3D"option">--variablefile (-V)</span> option. Variables set fro=
m the command line
are globally available for all executed test data files, and they also
override possible variables with the same names in the Variable table and i=
n
variable files imported in the test data.</p>
<p>The syntax for setting individual variables is <span class=3D"option">--=
variable
name:value</span>, where <code>name</code> is the name of the variable with=
out
<code>${}</code> and <code>value</code> is its value. Several variables can=
 be
set by using this option several times. Only scalar variables can be
set using this syntax and they can only get string values.</p>
<div class=3D"highlight"><pre><span></span>--variable EXAMPLE:value
--variable HOST:localhost:7272 --variable USER:robot
</pre></div>
<p>In the examples above, variables are set so that</p>
<ul class=3D"simple">
<li><code>${EXAMPLE}</code> gets the value <code>value</code></li>
<li><code>${HOST}</code> and <code>${USER}</code> get the values
<code>localhost:7272</code> and <code>robot</code></li>
<li><code>${ESCAPED}</code> gets the value <code>"quotes and spaces"</code>=
</li>
</ul>
<p>The basic syntax for taking <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#va=
riable-files">variable files</a> into use from the command line
is <span class=3D"option">--variablefile path/to/variables.py</span>, and <=
a class=3D"reference internal" href=3D"http://robotframework.org/robotframe=
work/latest/RobotFrameworkUserGuide.html#taking-variable-files-into-use">Ta=
king variable files into
use</a> section has more details. What variables actually are created depen=
ds on
what variables there are in the referenced variable file.</p>
<p>If both variable files and individual variables are given from the comma=
nd line,
the latter have <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-prioriti=
es-and-scopes">higher priority</a>.</p>
</div>
<div class=3D"section" id=3D"return-values-from-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id582">Return values from keywords</=
a></h4>
<p>Return values from keywords can also be set into variables. This
allows communication between different keywords even in different test
libraries.</p>
<p>Variables set in this manner are otherwise similar to any other
variables, but they are available only in the <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#local-scope">local scope</a>
where they are created. Thus it is not possible, for example, to set
a variable like this in one test case and use it in another. This is
because, in general, automated test cases should not depend on each
other, and accidentally setting a variable that is used elsewhere
could cause hard-to-debug errors. If there is a genuine need for
setting a variable in one test case and using it in another, it is
possible to use <a class=3D"reference external" href=3D"http://robotframewo=
rk.org/robotframework/latest/libraries/BuiltIn.html">BuiltIn</a> keywords a=
s explained in the next section.</p>
<div class=3D"section" id=3D"assigning-scalar-variables">
<h5>Assigning scalar variables</h5>
<p>Any value returned by a keyword can be assigned to a <a class=3D"referen=
ce internal" href=3D"http://robotframework.org/robotframework/latest/RobotF=
rameworkUserGuide.html#scalar-variable">scalar variable</a>.
As illustrated by the example below, the required syntax is very simple:</p=
>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Returning</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">x</span><span class=3D"p"=
>} =3D    </span><span class=3D"nf">Get X</span><span class=3D"p">    </spa=
n><span class=3D"s">an argument</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">We got </span><span class=3D"p">${</span><spa=
n class=3D"nv">x</span><span class=3D"p">}</span><span class=3D"s">!</span>=
<span class=3D"p"></span>
</pre></div>
<p>In the above example the value returned by the <span class=3D"name">Get =
X</span> keyword
is first set into the variable <code>${x}</code> and then used by the <span=
 class=3D"name">Log</span>
keyword. Having the equals sign <code>=3D</code> after the variable name is
not obligatory, but it makes the assignment more explicit. Creating
local variables like this works both in test case and user keyword level.</=
p>
<p>Notice that although a value is assigned to a scalar variable, it can
be used as a <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#list-variable">list =
variable</a> if it has a list-like value and as a <a class=3D"reference int=
ernal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewo=
rkUserGuide.html#dictionary-variable">dictionary
variable</a> if it has a dictionary-like value.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">list</span><span class=3D=
"p">} =3D    </span><span class=3D"nf">Create List</span><span class=3D"p">=
    </span><span class=3D"s">first</span><span class=3D"p">    </span><span=
 class=3D"s">second</span><span class=3D"p">    </span><span class=3D"s">th=
ird</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Length Should Be</span><spa=
n class=3D"p">    ${</span><span class=3D"nv">list</span><span class=3D"p">=
}    </span><span class=3D"s">3</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    @{</span><span class=3D"nv">list</span><span class=3D"p">}</span=
>
</pre></div>
</div>
<div class=3D"section" id=3D"assigning-list-variables">
<h5>Assigning list variables</h5>
<p>If a keyword returns a list or any list-like object, it is possible to
assign it to a <a class=3D"reference internal" href=3D"http://robotframewor=
k.org/robotframework/latest/RobotFrameworkUserGuide.html#list-variable">lis=
t variable</a>:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    @{</span><span class=3D"nv">list</span><span class=3D=
"p">} =3D    </span><span class=3D"nf">Create List</span><span class=3D"p">=
    </span><span class=3D"s">first</span><span class=3D"p">    </span><span=
 class=3D"s">second</span><span class=3D"p">    </span><span class=3D"s">th=
ird</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Length Should Be</span><spa=
n class=3D"p">    ${</span><span class=3D"nv">list</span><span class=3D"p">=
}    </span><span class=3D"s">3</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    @{</span><span class=3D"nv">list</span><span class=3D"p">}</span=
>
</pre></div>
<p>Because all Robot Framework variables are stored in the same namespace, =
there is
not much difference between assigning a value to a scalar variable or a lis=
t
variable. This can be seen by comparing the last two examples above. The ma=
in
differences are that when creating a list variable, Robot Framework
automatically verifies that the value is a list or list-like, and the store=
d
variable value will be a new list created from the return value. When
assigning to a scalar variable, the return value is not verified and the
stored value will be the exact same object that was returned.</p>
</div>
<div class=3D"section" id=3D"assigning-dictionary-variables">
<h5>Assigning dictionary variables</h5>
<p>If a keyword returns a dictionary or any dictionary-like object, it is p=
ossible
to assign it to a <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#dictionary-vari=
able">dictionary variable</a>:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    &amp;{</span><span class=3D"nv">dict</span><span clas=
s=3D"p">} =3D    </span><span class=3D"nf">Create Dictionary</span><span cl=
ass=3D"p">    </span><span class=3D"s">first=3D1</span><span class=3D"p">  =
  </span><span class=3D"s">second=3D</span><span class=3D"p">${</span><span=
 class=3D"nv">2</span><span class=3D"p">}    ${</span><span class=3D"nv">3<=
/span><span class=3D"p">}</span><span class=3D"s">=3Dthird</span><span clas=
s=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Length Should Be</span><spa=
n class=3D"p">    ${</span><span class=3D"nv">dict</span><span class=3D"p">=
}    </span><span class=3D"s">3</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p">    &amp;{</span><span class=3D"nv">dict</span><span class=3D"p">=
}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    ${</span><span class=3D"nv">dict.first</span><span class=3D"p">}</span=
>
</pre></div>
<p>Because all Robot Framework variables are stored in the same namespace, =
it would
also be possible to assign a dictionary into a scalar variable and use it
later as a dictionary when needed. There are, however, some actual benefits
in creating a dictionary variable explicitly. First of all, Robot Framework
verifies that the returned value is a dictionary or dictionary-like similar=
ly
as it verifies that list variables can only get a list-like value.</p>
<p>A bigger benefit is that the value is converted into a special dictionar=
y
that it uses also when <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-d=
ictionary-variables">creating dictionary variables</a> in the variable tabl=
e.
Values in these dictionaries can be accessed using attribute access like
<code>${dict.first}</code> in the above example. These dictionaries are als=
o ordered, but
if the original dictionary was not ordered, the resulting order is arbitrar=
y.</p>
</div>
<div class=3D"section" id=3D"assigning-multiple-variables">
<h5>Assigning multiple variables</h5>
<p>If a keyword returns a list or a list-like object, it is possible to ass=
ign
individual values into multiple scalar variables or into scalar variables a=
nd
a list variable.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Assign multiple</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">a</span><span class=3D"p"=
>}    ${</span><span class=3D"nv">b</span><span class=3D"p">}    ${</span><=
span class=3D"nv">c</span><span class=3D"p">} =3D    </span><span class=3D"=
nf">Get Three</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">first</span><span class=
=3D"p">}    @{</span><span class=3D"nv">rest</span><span class=3D"p">} =3D =
   </span><span class=3D"nf">Get Three</span><span class=3D"p"></span>
<span class=3D"p">    @{</span><span class=3D"nv">before</span><span class=
=3D"p">}    ${</span><span class=3D"nv">last</span><span class=3D"p">} =3D =
   </span><span class=3D"nf">Get Three</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">begin</span><span class=
=3D"p">}    @{</span><span class=3D"nv">middle</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">end</span><span class=3D"p">} =3D    </span><s=
pan class=3D"nf">Get Three</span><span class=3D"p"></span>
</pre></div>
<p>Assuming that the keyword <span class=3D"name">Get Three</span> returns =
a list <code>[1, 2, 3]</code>,
the following variables are created:</p>
<ul class=3D"simple">
<li><code>${a}</code>, <code>${b}</code> and <code>${c}</code> with values =
<code>1</code>, <code>2</code>, and <code>3</code>, respectively.</li>
<li><code>${first}</code> with value <code>1</code>, and <code>@{rest}</cod=
e> with value <code>[2, 3]</code>.</li>
<li><code>@{before}</code> with value <code>[1, 2]</code> and <code>${last}=
</code> with value <code>3</code>.</li>
<li><code>${begin}</code> with value <code>1</code>, <code>@{middle}</code>=
 with value <code>[2]</code> and ${end} with
value <code>3</code>.</li>
</ul>
<p>It is an error if the returned list has more or less values than there a=
re
scalar variables to assign. Additionally, only one list variable is allowed
and dictionary variables can only be assigned alone.</p>
<p>The support for assigning multiple variables was slightly changed in
Robot Framework 2.9. Prior to it a list variable was only allowed as
the last assigned variable, but nowadays it can be used anywhere.
Additionally, it was possible to return more values than scalar variables.
In that case the last scalar variable was magically turned into a list
containing the extra values.</p>
</div>
</div>
<div class=3D"section" id=3D"using-set-test-suite-global-variable-keywords"=
>
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id583">Using <span class=3D"name">Se=
t Test/Suite/Global Variable</span> keywords</a></h4>
<p>The <a class=3D"reference external" href=3D"http://robotframework.org/ro=
botframework/latest/libraries/BuiltIn.html">BuiltIn</a> library has keyword=
s <span class=3D"name">Set Test Variable</span>,
<span class=3D"name">Set Suite Variable</span> and <span class=3D"name">Set=
 Global Variable</span> which can
be used for setting variables dynamically during the test
execution. If a variable already exists within the new scope, its
value will be overwritten, and otherwise a new variable is created.</p>
<p>Variables set with <span class=3D"name">Set Test Variable</span> keyword=
 are available
everywhere within the scope of the currently executed test case. For
example, if you set a variable in a user keyword, it is available both
in the test case level and also in all other user keywords used in the
current test. Other test cases will not see variables set with this
keyword.</p>
<p>Variables set with <span class=3D"name">Set Suite Variable</span> keywor=
d are available
everywhere within the scope of the currently executed test
suite. Setting variables with this keyword thus has the same effect as
creating them using the <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-=
table">Variable table</a> in the test data file or
importing them from <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-file=
s">variable files</a>. Other test suites, including
possible child test suites, will not see variables set with this
keyword.</p>
<p>Variables set with <span class=3D"name">Set Global Variable</span> keywo=
rd are globally
available in all test cases and suites executed after setting
them. Setting variables with this keyword thus has the same effect as
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#setting-variables-in-command-line=
">creating from the command line</a> using the options <span class=3D"optio=
n">--variable</span> or
<span class=3D"option">--variablefile</span>. Because this keyword can chan=
ge variables
everywhere, it should be used with care.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><span class=3D"name">Set Test/Suite/Global Variable</span=
> keywords set named
variables directly into <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-=
scopes">test, suite or global variable scope</a>
and return nothing. On the other hand, another <a class=3D"reference extern=
al" href=3D"http://robotframework.org/robotframework/latest/libraries/Built=
In.html">BuiltIn</a> keyword
<span class=3D"name">Set Variable</span> sets local variables using <a clas=
s=3D"reference internal" href=3D"http://robotframework.org/robotframework/l=
atest/RobotFrameworkUserGuide.html#return-values-from-keywords">return valu=
es</a>.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"built-in-variables">
<span id=3D"built-in-variable"></span><h3><a class=3D"toc-backref" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#id584">2.6.4&nbsp;&nbsp;&nbsp;Built-in variables</a></h3>
<p>Robot Framework provides some built-in variables that are available
automatically.</p>
<div class=3D"section" id=3D"operating-system-variables">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id585">Operating-system variables</a=
></h4>
<p>Built-in variables related to the operating system ease making the test =
data
operating-system-agnostic.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Available operating-system-related built-in variables</caption>
<colgroup>
<col width=3D"15%">
<col width=3D"85%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Variable</th>
<th class=3D"head">Explanation</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>${CURDIR}</td>
<td>An absolute path to the directory where the test data
file is located. This variable is case-sensitive.</td>
</tr>
<tr><td>${TEMPDIR}</td>
<td>An absolute path to the system temporary directory. In UNIX-like
systems this is typically <span class=3D"file">/tmp</span>, and in Windows
<span class=3D"file">c:\Documents and Settings\&lt;user&gt;\Local Settings\=
Temp</span>.</td>
</tr>
<tr><td>${EXECDIR}</td>
<td>An absolute path to the directory where test execution was
started from.</td>
</tr>
<tr><td>${/}</td>
<td>The system directory path separator. <code>/</code> in UNIX-like
systems and <span class=3D"codesc">\</span> in Windows.</td>
</tr>
<tr><td>${:}</td>
<td>The system path element separator. <code>:</code> in UNIX-like
systems and <code>;</code> in Windows.</td>
</tr>
<tr><td>${\n}</td>
<td>The system line separator. <span class=3D"codesc">\n</span> in UNIX-lik=
e systems
and <span class=3D"codesc">\r\n</span> in Windows.</td>
</tr>
</tbody>
</table>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Create Binary File</span><s=
pan class=3D"p">    ${</span><span class=3D"nv">CURDIR</span><span class=3D=
"p">}${</span><span class=3D"nv">/</span><span class=3D"p">}</span><span cl=
ass=3D"s">input.data</span><span class=3D"p">    </span><span class=3D"s">S=
ome text here</span><span class=3D"p">${</span><span class=3D"nv">\n</span>=
<span class=3D"p">}</span><span class=3D"s">on two lines</span><span class=
=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Set Environment Variable</s=
pan><span class=3D"p">    </span><span class=3D"s">CLASSPATH</span><span cl=
ass=3D"p">    ${</span><span class=3D"nv">TEMPDIR</span><span class=3D"p">}=
${</span><span class=3D"nv">:</span><span class=3D"p">}${</span><span class=
=3D"nv">CURDIR</span><span class=3D"p">}${</span><span class=3D"nv">/</span=
><span class=3D"p">}</span><span class=3D"s">foo.jar</span><span class=3D"p=
"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"number-variables">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id586">Number variables</a></h4>
<p>The variable syntax can be used for creating both integers and
floating point numbers, as illustrated in the example below. This is
useful when a keyword expects to get an actual number, and not a
string that just looks like a number, as an argument.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example 1A</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Connect</span><span class=
=3D"p">    </span><span class=3D"s">example.com</span><span class=3D"p">   =
 </span><span class=3D"s">80</span><span class=3D"p">       </span><span cl=
ass=3D"c"># Connect gets two strings as arguments</span>

<span class=3D"gu">Example 1B</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Connect</span><span class=
=3D"p">    </span><span class=3D"s">example.com</span><span class=3D"p">   =
 ${</span><span class=3D"nv">80</span><span class=3D"p">}    </span><span c=
lass=3D"c"># Connect gets a string and an integer</span>

<span class=3D"gu">Example 2</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do X</span><span class=3D"p=
">    ${</span><span class=3D"nv">3.14</span><span class=3D"p">}    ${</spa=
n><span class=3D"nv">-1e-4</span><span class=3D"p">}        </span><span cl=
ass=3D"c"># Do X gets floating point numbers 3.14 and -0.0001</span>
</pre></div>
<p>It is possible to create integers also from binary, octal, and
hexadecimal values using <code>0b</code>, <code>0o</code> and <code>0x</cod=
e> prefixes, respectively.
The syntax is case insensitive.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">0b1011</span><span class=3D"p"=
>}    ${</span><span class=3D"nv">11</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">0o10</span><span class=3D"p">}=
      ${</span><span class=3D"nv">8</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">0xff</span><span class=3D"p">}=
      ${</span><span class=3D"nv">255</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">0B1010</span><span class=3D"p"=
>}    ${</span><span class=3D"nv">0XA</span><span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"boolean-and-none-null-variables">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id587">Boolean and None/null variabl=
es</a></h4>
<p>Also Boolean values and Python <code>None</code> and Java <code>null</co=
de> can
be created using the variable syntax similarly as numbers.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Boolean</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Set Status</span><span clas=
s=3D"p">    ${</span><span class=3D"nv">true</span><span class=3D"p">}     =
          </span><span class=3D"c"># Set Status gets Boolean true as an arg=
ument</span>
<span class=3D"p">    </span><span class=3D"nf">Create Y</span><span class=
=3D"p">    </span><span class=3D"s">something</span><span class=3D"p">   ${=
</span><span class=3D"nv">false</span><span class=3D"p">}    </span><span c=
lass=3D"c"># Create Y gets a string and Boolean false</span>

<span class=3D"gu">None</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do XYZ</span><span class=3D=
"p">    ${</span><span class=3D"nv">None</span><span class=3D"p">}         =
          </span><span class=3D"c"># Do XYZ gets Python None as an argument=
</span>

<span class=3D"gu">Null</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">ret</span><span class=3D"=
p">} =3D    </span><span class=3D"nf">Get Value</span><span class=3D"p">   =
 </span><span class=3D"s">arg</span><span class=3D"p">        </span><span =
class=3D"c"># Checking that Get Value returns Java null</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">ret</span><span class=3D"p">} =
   ${</span><span class=3D"nv">null</span><span class=3D"p">}</span>
</pre></div>
<p>These variables are case-insensitive, so for example <code>${True}</code=
> and
<code>${true}</code> are equivalent. Additionally, <code>${None}</code> and
<code>${null}</code> are synonyms, because when running tests on the Jython
interpreter, Jython automatically converts <code>None</code> and
<code>null</code> to the correct format when necessary.</p>
</div>
<div class=3D"section" id=3D"space-and-empty-variables">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id588">Space and empty variables</a>=
</h4>
<p>It is possible to create spaces and empty strings using variables
<code>${SPACE}</code> and <code>${EMPTY}</code>, respectively. These variab=
les are
useful, for example, when there would otherwise be a need to <a class=3D"re=
ference internal" href=3D"http://robotframework.org/robotframework/latest/R=
obotFrameworkUserGuide.html#escaping">escape
spaces or empty cells</a> with a backslash. If more than one space is
needed, it is possible to use the <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#extended-variable-syntax">extended variable syntax</a> like
<code>${SPACE * 5}</code>.  In the following example, <span class=3D"name">=
Should Be
Equal</span> keyword gets identical arguments but those using variables are
easier to understand than those using backslashes.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">One space</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">SPACE</span><span class=3D"p">=
}          </span><span class=3D"s">\ \</span><span class=3D"p"></span>

<span class=3D"gu">Four spaces</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">SPACE * 4</span><span class=3D=
"p">}      </span><span class=3D"s">\ \ \ \ \</span><span class=3D"p"></spa=
n>

<span class=3D"gu">Ten spaces</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">SPACE * 10</span><span class=
=3D"p">}     </span><span class=3D"s">\ \ \ \ \ \ \ \ \ \ \</span><span cla=
ss=3D"p"></span>

<span class=3D"gu">Quoted space</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    </span><span class=3D"s">"</span><span class=3D"p">${</spa=
n><span class=3D"nv">SPACE</span><span class=3D"p">}</span><span class=3D"s=
">"</span><span class=3D"p">        </span><span class=3D"s">" "</span><spa=
n class=3D"p"></span>

<span class=3D"gu">Quoted spaces</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    </span><span class=3D"s">"</span><span class=3D"p">${</spa=
n><span class=3D"nv">SPACE * 2</span><span class=3D"p">}</span><span class=
=3D"s">"</span><span class=3D"p">    </span><span class=3D"s">" \ "</span><=
span class=3D"p"></span>

<span class=3D"gu">Empty</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">EMPTY</span><span class=3D"p">=
}          </span><span class=3D"s">\</span><span class=3D"p"></span>
</pre></div>
<p>There is also an empty <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#list-va=
riable">list variable</a> <code>@{EMPTY}</code> and an empty <a class=3D"re=
ference internal" href=3D"http://robotframework.org/robotframework/latest/R=
obotFrameworkUserGuide.html#dictionary-variable">dictionary
variable</a> <code>&amp;{EMPTY}</code>. Because they have no content, they =
basically
vanish when used somewhere in the test data. They are useful, for example,
with <a class=3D"reference internal" href=3D"http://robotframework.org/robo=
tframework/latest/RobotFrameworkUserGuide.html#test-templates">test templat=
es</a> when the <a class=3D"reference external" href=3D"https://groups.goog=
le.com/group/robotframework-users/browse_thread/thread/ccc9e1cd77870437/457=
7836fe946e7d5?lnk=3Dgst&amp;q=3Dtemplates#4577836fe946e7d5">template keywor=
d is used without
arguments</a> or when overriding list or dictionary variables in different
scopes. Modifying the value of <code>@{EMPTY}</code> or <code>&amp;{EMPTY}<=
/code> is not possible.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Template</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Template</span><span class=
=3D"p">]    </span><span class=3D"nf">Some keyword</span><span class=3D"p">=
</span>
<span class=3D"p">    @{</span><span class=3D"nv">EMPTY</span><span class=
=3D"p">}</span>

<span class=3D"gu">Override</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Set Global Variable</span><=
span class=3D"p">    @{</span><span class=3D"nv">LIST</span><span class=3D"=
p">}    @{</span><span class=3D"nv">EMPTY</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Set Suite Variable</span><s=
pan class=3D"p">     &amp;{</span><span class=3D"nv">DICT</span><span class=
=3D"p">}    &amp;{</span><span class=3D"nv">EMPTY</span><span class=3D"p">}=
</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><code>${SPACE}</code> represents the ASCII space (<code>\=
x20</code>) and <a class=3D"reference external" href=3D"http://jkorpela.fi/=
chars/spaces.html">other spaces</a>
should be specified using the <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#esc=
aping">escape sequences</a> like <code>\xA0</code>
(NO-BREAK SPACE) and <code>\u3000</code> (IDEOGRAPHIC SPACE).</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><code>&amp;{EMPTY}</code> is new in Robot Framework 2.9.<=
/p>
</div>
</div>
<div class=3D"section" id=3D"automatic-variables">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id589">Automatic variables</a></h4>
<p>Some automatic variables can also be used in the test data. These
variables can have different values during the test execution and some
of them are not even available all the time. Altering the value of
these variables does not affect the original values, but some values
can be changed dynamically using keywords from the <a class=3D"reference ex=
ternal" href=3D"http://robotframework.org/robotframework/latest/libraries/B=
uiltIn.html">BuiltIn</a> library.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Available automatic variables</caption>
<colgroup>
<col width=3D"26%">
<col width=3D"60%">
<col width=3D"13%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Variable</th>
<th class=3D"head">Explanation</th>
<th class=3D"head">Available</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>${TEST NAME}</td>
<td>The name of the current test case.</td>
<td>Test case</td>
</tr>
<tr><td>@{TEST TAGS}</td>
<td>Contains the tags of the current test case in
alphabetical order. Can be modified dynamically using
<span class=3D"name">Set Tags</span> and <span class=3D"name">Remove Tags</=
span> keywords.</td>
<td>Test case</td>
</tr>
<tr><td>${TEST DOCUMENTATION}</td>
<td>The documentation of the current test case. Can be set
dynamically using using <span class=3D"name">Set Test Documentation</span>
keyword.</td>
<td>Test case</td>
</tr>
<tr><td>${TEST STATUS}</td>
<td>The status of the current test case, either PASS or
FAIL.</td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-setup-and-teardown">Test
teardown</a></td>
</tr>
<tr><td>${TEST MESSAGE}</td>
<td>The message of the current test case.</td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-setup-and-teardown">Test
teardown</a></td>
</tr>
<tr><td>${PREV TEST NAME}</td>
<td>The name of the previous test case, or an empty string
if no tests have been executed yet.</td>
<td>Everywhere</td>
</tr>
<tr><td>${PREV TEST STATUS}</td>
<td>The status of the previous test case: either PASS,
FAIL, or an empty string when no tests have been
executed.</td>
<td>Everywhere</td>
</tr>
<tr><td>${PREV TEST MESSAGE}</td>
<td>The possible error message of the previous test case.</td>
<td>Everywhere</td>
</tr>
<tr><td>${SUITE NAME}</td>
<td>The full name of the current test suite.</td>
<td>Everywhere</td>
</tr>
<tr><td>${SUITE SOURCE}</td>
<td>An absolute path to the suite file or directory.</td>
<td>Everywhere</td>
</tr>
<tr><td>${SUITE DOCUMENTATION}</td>
<td>The documentation of the current test suite. Can be
set dynamically using using <span class=3D"name">Set Suite
Documentation</span> keyword.</td>
<td>Everywhere</td>
</tr>
<tr><td>&amp;{SUITE METADATA}</td>
<td>The free metadata of the current test suite. Can be
set using <span class=3D"name">Set Suite Metadata</span> keyword.</td>
<td>Everywhere</td>
</tr>
<tr><td>${SUITE STATUS}</td>
<td>The status of the current test suite, either PASS or
FAIL.</td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#suite-setup-and-teardown">Sui=
te
teardown</a></td>
</tr>
<tr><td>${SUITE MESSAGE}</td>
<td>The full message of the current test suite, including
statistics.</td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#suite-setup-and-teardown">Sui=
te
teardown</a></td>
</tr>
<tr><td>${KEYWORD STATUS}</td>
<td>The status of the current keyword, either PASS or
FAIL.</td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#user-keyword-teardown">User
keyword
teardown</a></td>
</tr>
<tr><td>${KEYWORD MESSAGE}</td>
<td>The possible error message of the current keyword.</td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#user-keyword-teardown">User
keyword
teardown</a></td>
</tr>
<tr><td>${LOG LEVEL}</td>
<td>Current <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#log-levels">log level=
</a>.</td>
<td>Everywhere</td>
</tr>
<tr><td>${OUTPUT FILE}</td>
<td>An absolute path to the <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#outpu=
t-file">output file</a>.</td>
<td>Everywhere</td>
</tr>
<tr><td>${LOG FILE}</td>
<td>An absolute path to the <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#log-f=
ile">log file</a> or string NONE
when no log file is created.</td>
<td>Everywhere</td>
</tr>
<tr><td>${REPORT FILE}</td>
<td>An absolute path to the <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#repor=
t-file">report file</a> or string NONE
when no report is created.</td>
<td>Everywhere</td>
</tr>
<tr><td>${DEBUG FILE}</td>
<td>An absolute path to the <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#debug=
-file">debug file</a> or string NONE
when no debug file is created.</td>
<td>Everywhere</td>
</tr>
<tr><td>${OUTPUT DIR}</td>
<td>An absolute path to the <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#outpu=
t-directory">output directory</a>.</td>
<td>Everywhere</td>
</tr>
</tbody>
</table>
<p>Suite related variables <code>${SUITE SOURCE}</code>, <code>${SUITE NAME=
}</code>,
<code>${SUITE DOCUMENTATION}</code> and <code>&amp;{SUITE METADATA}</code> =
are
available already when test libraries and variable files are imported.
Possible variables in these automatic variables are not yet resolved
at the import time, though.</p>
</div>
</div>
<div class=3D"section" id=3D"variable-priorities-and-scopes">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id590">2.6.5&nbsp;&nbsp;&nbsp;Variab=
le priorities and scopes</a></h3>
<p>Variables coming from different sources have different priorities and
are available in different scopes.</p>
<div class=3D"section" id=3D"variable-priorities">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id591">Variable priorities</a></h4>
<p><em>Variables from the command line</em></p>
<blockquote>
<p>Variables <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#setting-variables-in=
-command-line">set in the command line</a> have the highest priority of all
variables that can be set before the actual test execution starts. They
override possible variables created in Variable tables in test case
files, as well as in resource and variable files imported in the
test data.</p>
<p>Individually set variables (<span class=3D"option">--variable</span> opt=
ion) override the
variables set using <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-file=
s">variable files</a> (<span class=3D"option">--variablefile</span> option)=
.
If you specify same individual variable multiple times, the one specified
last will override earlier ones. This allows setting default values for
variables in a <a class=3D"reference internal" href=3D"http://robotframewor=
k.org/robotframework/latest/RobotFrameworkUserGuide.html#start-up-script">s=
tart-up script</a> and overriding them from the command line.
Notice, though, that if multiple variable files have same variables, the
ones in the file specified first have the highest priority.</p>
</blockquote>
<p><em>Variable table in a test case file</em></p>
<blockquote>
<p>Variables created using the <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#va=
riable-table">Variable table</a> in a test case file
are available for all the test cases in that file. These variables
override possible variables with same names in imported resource and
variable files.</p>
<p>Variables created in the variable tables are available in all other tabl=
es
in the file where they are created. This means that they can be used also
in the Setting table, for example, for importing more variables from
resource and variable files.</p>
</blockquote>
<p><em>Imported resource and variable files</em></p>
<blockquote>
<p>Variables imported from the <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#re=
source-and-variable-files">resource and variable files</a> have the
lowest priority of all variables created in the test data.
Variables from resource files and variable files have the same
priority. If several resource and/or variable file have same
variables, the ones in the file imported first are taken into use.</p>
<p>If a resource file imports resource files or variable files,
variables in its own Variable table have a higher priority than
variables it imports. All these variables are available for files that
import this resource file.</p>
<p>Note that variables imported from resource and variable files are not
available in the Variable table of the file that imports them. This
is due to the Variable table being processed before the Setting table
where the resource files and variable files are imported.</p>
</blockquote>
<p><em>Variables set during test execution</em></p>
<blockquote>
Variables set during the test execution either using <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#return-values-from-keywords">return values
from keywords</a> or <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#using-set-te=
st-suite-global-variable-keywords">using Set Test/Suite/Global Variable key=
words</a>
always override possible existing
variables in the scope where they are set. In a sense they thus
have the highest priority, but on the other hand they do not affect
variables outside the scope they are defined.</blockquote>
<p><em>Built-in variables</em></p>
<blockquote>
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#built-in-variables">Built-in vari=
ables</a> like <code>${TEMPDIR}</code> and <code>${TEST_NAME}</code>
have the highest priority of all variables. They cannot be overridden
using Variable table or from command line, but even they can be reset durin=
g
the test execution. An exception to this rule are <a class=3D"reference int=
ernal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewo=
rkUserGuide.html#number-variables">number variables</a>, which
are resolved dynamically if no variable is found otherwise. They can thus b=
e
overridden, but that is generally a bad idea. Additionally <code>${CURDIR}<=
/code>
is special because it is replaced already during the test data processing t=
ime.</blockquote>
</div>
<div class=3D"section" id=3D"variable-scopes">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id592">Variable scopes</a></h4>
<p>Depending on where and how they are created, variables can have a
global, test suite, test case or local scope.</p>
<div class=3D"section" id=3D"global-scope">
<h5>Global scope</h5>
<p>Global variables are available everywhere in the test data. These
variables are normally <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-va=
riables-in-command-line">set from the command line</a> with the
<span class=3D"option">--variable</span> and <span class=3D"option">--varia=
blefile</span> options, but it is also
possible to create new global variables or change the existing ones
with the <a class=3D"reference external" href=3D"http://robotframework.org/=
robotframework/latest/libraries/BuiltIn.html">BuiltIn</a> keyword <span cla=
ss=3D"name">Set Global Variable</span> anywhere in
the test data. Additionally also <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
built-in-variables">built-in variables</a> are global.</p>
<p>It is recommended to use capital letters with all global variables.</p>
</div>
<div class=3D"section" id=3D"test-suite-scope">
<h5>Test suite scope</h5>
<p>Variables with the test suite scope are available anywhere in the
test suite where they are defined or imported. They can be created
in Variable tables, imported from <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#resource-and-variable-files">resource and variable files</a>,
or set during the test execution using the <a class=3D"reference external" =
href=3D"http://robotframework.org/robotframework/latest/libraries/BuiltIn.h=
tml">BuiltIn</a> keyword
<span class=3D"name">Set Suite Variable</span>.</p>
<p>The test suite scope <em>is not recursive</em>, which means that variabl=
es
available in a higher-level test suite <em>are not available</em> in
lower-level suites. If necessary, <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#resource-and-variable-files">resource and variable files</a> can
be used for sharing variables.</p>
<p>Since these variables can be considered global in the test suite where
they are used, it is recommended to use capital letters also with them.</p>
</div>
<div class=3D"section" id=3D"test-case-scope">
<h5>Test case scope</h5>
<p>Variables with the test case scope are visible in a test case and in
all user keywords the test uses. Initially there are no variables in
this scope, but it is possible to create them by using the <a class=3D"refe=
rence external" href=3D"http://robotframework.org/robotframework/latest/lib=
raries/BuiltIn.html">BuiltIn</a>
keyword <span class=3D"name">Set Test Variable</span> anywhere in a test ca=
se.</p>
<p>Also variables in the test case scope are to some extend global. It is
thus generally recommended to use capital letters with them too.</p>
</div>
<div class=3D"section" id=3D"local-scope">
<h5>Local scope</h5>
<p>Test cases and user keywords have a local variable scope that is not
seen by other tests or keywords. Local variables can be created using
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#return-values-from-keywords">retu=
rn values</a> from executed keywords and user keywords also get
them as <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#user-keyword-arguments">a=
rguments</a>.</p>
<p>It is recommended to use lower-case letters with local variables.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 2.9 variables in the local scope
<a class=3D"reference external" href=3D"https://github.com/robotframework/r=
obotframework/issues/532">leaked to lower level user keywords</a>. This was=
 never an
intended feature, and variables should be set or passed
explicitly also with earlier versions.</p>
</div>
</div>
</div>
</div>
<div class=3D"section" id=3D"advanced-variable-features">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id593">2.6.6&nbsp;&nbsp;&nbsp;Advanc=
ed variable features</a></h3>
<div class=3D"section" id=3D"extended-variable-syntax">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id594">Extended variable syntax</a><=
/h4>
<p>Extended variable syntax allows accessing attributes of an object assign=
ed
to a variable (for example, <code>${object.attribute}</code>) and even call=
ing
its methods (for example, <code>${obj.getName()}</code>). It works both wit=
h
scalar and list variables, but is mainly useful with the former</p>
<p>Extended variable syntax is a powerful feature, but it should
be used with care. Accessing attributes is normally not a problem, on
the contrary, because one variable containing an object with several
attributes is often better than having several variables. On the
other hand, calling methods, especially when they are used with
arguments, can make the test data pretty complicated to understand.
If that happens, it is recommended to move the code into a test library.</p=
>
<p>The most common usages of extended variable syntax are illustrated
in the example below. First assume that we have the following <a class=3D"r=
eference internal" href=3D"http://robotframework.org/robotframework/latest/=
RobotFrameworkUserGuide.html#variable-file">variable file</a>
and test case:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">MyObject</span><span class=3D"p">:</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">name</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">name</span> <span class=3D"o">=3D</span> <span class=3D"n">name</spa=
n>

    <span class=3D"k">def</span> <span class=3D"nf">eat</span><span class=
=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> <sp=
an class=3D"n">what</span><span class=3D"p">):</span>
        <span class=3D"k">return</span> <span class=3D"s1">'</span><span cl=
ass=3D"si">%s</span><span class=3D"s1"> eats </span><span class=3D"si">%s</=
span><span class=3D"s1">'</span> <span class=3D"o">%</span> <span class=3D"=
p">(</span><span class=3D"bp">self</span><span class=3D"o">.</span><span cl=
ass=3D"n">name</span><span class=3D"p">,</span> <span class=3D"n">what</spa=
n><span class=3D"p">)</span>

    <span class=3D"k">def</span> <span class=3D"fm">__str__</span><span cla=
ss=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"k">return</span> <span class=3D"bp">self</span><span=
 class=3D"o">.</span><span class=3D"n">name</span>

<span class=3D"n">OBJECT</span> <span class=3D"o">=3D</span> <span class=3D=
"n">MyObject</span><span class=3D"p">(</span><span class=3D"s1">'Robot'</sp=
an><span class=3D"p">)</span>
<span class=3D"n">DICTIONARY</span> <span class=3D"o">=3D</span> <span clas=
s=3D"p">{</span><span class=3D"mi">1</span><span class=3D"p">:</span> <span=
 class=3D"s1">'one'</span><span class=3D"p">,</span> <span class=3D"mi">2</=
span><span class=3D"p">:</span> <span class=3D"s1">'two'</span><span class=
=3D"p">,</span> <span class=3D"mi">3</span><span class=3D"p">:</span> <span=
 class=3D"s1">'three'</span><span class=3D"p">}</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">KW 1</span><span class=3D"p=
">    ${</span><span class=3D"nv">OBJECT.name</span><span class=3D"p">}</sp=
an>
<span class=3D"p">    </span><span class=3D"nf">KW 2</span><span class=3D"p=
">    ${</span><span class=3D"nv">OBJECT.eat('Cucumber')</span><span class=
=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">KW 3</span><span class=3D"p=
">    ${</span><span class=3D"nv">DICTIONARY[2]</span><span class=3D"p">}</=
span>
</pre></div>
<p>When this test data is executed, the keywords get the arguments as
explained below:</p>
<ul class=3D"simple">
<li><span class=3D"name">KW 1</span> gets string <code>Robot</code></li>
<li><span class=3D"name">KW 2</span> gets string <code>Robot eats Cucumber<=
/code></li>
<li><span class=3D"name">KW 3</span> gets string <code>two</code></li>
</ul>
<p>The extended variable syntax is evaluated in the following order:</p>
<ol class=3D"arabic simple">
<li>The variable is searched using the full variable name. The extended
variable syntax is evaluated only if no matching variable
is found.</li>
<li>The name of the base variable is created. The body of the name
consists of all the characters after the opening <code>{</code> until
the first occurrence of a character that is not an alphanumeric character
or a space. For example, base variables of <code>${OBJECT.name}</code>
and <code>${DICTIONARY[2]}</code>) are <code>OBJECT</code> and <code>DICTIO=
NARY</code>,
respectively.</li>
<li>A variable matching the body is searched. If there is no match, an
exception is raised and the test case fails.</li>
<li>The expression inside the curly brackets is evaluated as a Python
expression, so that the base variable name is replaced with its
value. If the evaluation fails because of an invalid syntax or that
the queried attribute does not exist, an exception is raised and
the test fails.</li>
<li>The whole extended variable is replaced with the value returned
from the evaluation.</li>
</ol>
<p>If the object that is used is implemented with Java, the extended
variable syntax allows you to access attributes using so-called bean
properties. In essence, this means that if you have an object with the
<code>getName</code>  method set into a variable <code>${OBJ}</code>, then =
the
syntax <code>${OBJ.name}</code> is equivalent to but clearer than
<code>${OBJ.getName()}</code>. The Python object used in the previous examp=
le
could thus be replaced with the following Java implementation:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">MyObject</span><span cl=
ass=3D"o">:</span>

    <span class=3D"kd">private</span> <span class=3D"n">String</span> <span=
 class=3D"n">name</span><span class=3D"o">;</span>

    <span class=3D"kd">public</span> <span class=3D"nf">MyObject</span><spa=
n class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">nam=
e</span><span class=3D"o">)</span> <span class=3D"o">{</span>
        <span class=3D"n">name</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">name</span><span class=3D"o">;</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"n">String</span> <span =
class=3D"nf">getName</span><span class=3D"o">()</span> <span class=3D"o">{<=
/span>
        <span class=3D"k">return</span> <span class=3D"n">name</span><span =
class=3D"o">;</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"n">String</span> <span =
class=3D"nf">eat</span><span class=3D"o">(</span><span class=3D"n">String</=
span> <span class=3D"n">what</span><span class=3D"o">)</span> <span class=
=3D"o">{</span>
        <span class=3D"k">return</span> <span class=3D"n">name</span> <span=
 class=3D"o">+</span> <span class=3D"s">" eats "</span> <span class=3D"o">+=
</span> <span class=3D"n">what</span><span class=3D"o">;</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"n">String</span> <span =
class=3D"nf">toString</span><span class=3D"o">()</span> <span class=3D"o">{=
</span>
        <span class=3D"k">return</span> <span class=3D"n">name</span><span =
class=3D"o">;</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
<p>Many standard Python objects, including strings and numbers, have
methods that can be used with the extended variable syntax either
explicitly or implicitly. Sometimes this can be really useful and
reduce the need for setting temporary variables, but it is also easy
to overuse it and create really cryptic test data. Following examples
show few pretty good usages.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">String</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">string</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Set Variable</span><span class=3D=
"p">    </span><span class=3D"s">abc</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    ${</span><span class=3D"nv">string.upper()</span><span class=3D"p">}  =
    </span><span class=3D"c"># Logs 'ABC'</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    ${</span><span class=3D"nv">string * 2</span><span class=3D"p">}      =
    </span><span class=3D"c"># Logs 'abcabc'</span>

<span class=3D"gu">Number</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">number</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Set Variable</span><span class=3D=
"p">    ${</span><span class=3D"nv">-2</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    ${</span><span class=3D"nv">number * 10</span><span class=3D"p">}     =
    </span><span class=3D"c"># Logs -20</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    ${</span><span class=3D"nv">number.__abs__()</span><span class=3D"p">}=
    </span><span class=3D"c"># Logs 2</span>
</pre></div>
<p>Note that even though <code>abs(number)</code> is recommended over
<code>number.__abs__()</code> in normal Python code, using
<code>${abs(number)}</code> does not work. This is because the variable nam=
e
must be in the beginning of the extended syntax. Using <code>__xxx__</code>
methods in the test data like this is already a bit questionable, and
it is normally better to move this kind of logic into test libraries.</p>
<p>Extended variable syntax works also in <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#list-variable">list variable</a> context.
If, for example, an object assigned to a variable <code>${EXTENDED}</code> =
has
an attribute <code>attribute</code> that contains a list as a value, it can=
 be
used as a list variable <code>@{EXTENDED.attribute}</code>.</p>
</div>
<div class=3D"section" id=3D"extended-variable-assignment">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id595">Extended variable assignment<=
/a></h4>
<p>It is possible to set attributes of
objects stored to scalar variables using <a class=3D"reference internal" hr=
ef=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGui=
de.html#return-values-from-keywords">keyword return values</a> and
a variation of the <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#extended-varia=
ble-syntax">extended variable syntax</a>. Assuming we have
variable <code>${OBJECT}</code> from the previous examples, attributes coul=
d
be set to it like in the example below.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">OBJECT.name</span><span c=
lass=3D"p">} =3D    </span><span class=3D"nf">Set Variable</span><span clas=
s=3D"p">    </span><span class=3D"s">New name</span><span class=3D"p"></spa=
n>
<span class=3D"p">    ${</span><span class=3D"nv">OBJECT.new_attr</span><sp=
an class=3D"p">} =3D    </span><span class=3D"nf">Set Variable</span><span =
class=3D"p">    </span><span class=3D"s">New attribute</span><span class=3D=
"p"></span>
</pre></div>
<p>The extended variable assignment syntax is evaluated using the
following rules:</p>
<ol class=3D"arabic simple">
<li>The assigned variable must be a scalar variable and have at least
one dot. Otherwise the extended assignment syntax is not used and
the variable is assigned normally.</li>
<li>If there exists a variable with the full name
(e.g. <code>${OBJECT.name}</code> in the example above) that variable
will be assigned a new value and the extended syntax is not used.</li>
<li>The name of the base variable is created. The body of the name
consists of all the characters between the opening <code>${</code> and
the last dot, for example, <code>OBJECT</code> in <code>${OBJECT.name}</cod=
e>
and <code>foo.bar</code> in <code>${foo.bar.zap}</code>. As the second exam=
ple
illustrates, the base name may contain normal extended variable
syntax.</li>
<li>The name of the attribute to set is created by taking all the
characters between the last dot and the closing <code>}</code>, for
example, <code>name</code> in <code>${OBJECT.name}</code>. If the name does=
 not
start with a letter or underscore and contain only these characters
and numbers, the attribute is considered invalid and the extended
syntax is not used. A new variable with the full name is created
instead.</li>
<li>A variable matching the base name is searched. If no variable is
found, the extended syntax is not used and, instead, a new variable
is created using the full variable name.</li>
<li>If the found variable is a string or a number, the extended syntax
is ignored and a new variable created using the full name. This is
done because you cannot add new attributes to Python strings or
numbers, and this way the new syntax is also less
backwards-incompatible.</li>
<li>If all the previous rules match, the attribute is set to the base
variable. If setting fails for any reason, an exception is raised
and the test fails.</li>
</ol>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Unlike when assigning variables normally using <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#return-values-from-keywords">return
values from keywords</a>, changes to variables done using the
extended assign syntax are not limited to the current
scope. Because no new variable is created but instead the
state of an existing variable is changed, all tests and
keywords that see that variable will also see the changes.</p>
</div>
</div>
<div class=3D"section" id=3D"variables-inside-variables">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id596">Variables inside variables</a=
></h4>
<p>Variables are allowed also inside variables, and when this syntax is
used, variables are resolved from the inside out. For example, if you
have a variable <code>${var${x}}</code>, then <code>${x}</code> is resolved
first. If it has the value <code>name</code>, the final value is then the
value of the variable <code>${varname}</code>. There can be several nested
variables, but resolving the outermost fails, if any of them does not
exist.</p>
<p>In the example below, <span class=3D"name">Do X</span> gets the value <c=
ode>${JOHN HOME}</code>
or <code>${JANE HOME}</code>, depending on if <span class=3D"name">Get Name=
</span> returns
<code>john</code> or <code>jane</code>. If it returns something else, resol=
ving
<code>${${name} HOME}</code> fails.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Variables=
 ***</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">JOHN HOME</span><span class=
=3D"p">}    </span><span class=3D"s">/home/john</span><span class=3D"p"></s=
pan>
<span class=3D"p">${</span><span class=3D"nv">JANE HOME</span><span class=
=3D"p">}    </span><span class=3D"s">/home/jane</span><span class=3D"p"></s=
pan>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">name</span><span class=3D=
"p">} =3D    </span><span class=3D"nf">Get Name</span><span class=3D"p"></s=
pan>
<span class=3D"p">    </span><span class=3D"nf">Do X</span><span class=3D"p=
">    ${${</span><span class=3D"nv">name</span><span class=3D"p">}</span><s=
pan class=3D"nv"> HOME</span><span class=3D"p">}</span>
</pre></div>
</div>
</div>
</div>
<div class=3D"section" id=3D"creating-user-keywords">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id510">2.7&nbsp;&nbsp;&nbsp;Creating=
 user keywords</a></h2>
<p>Keyword tables are used to create new higher-level keywords by
combining existing keywords together. These keywords are called <em>user
keywords</em> to differentiate them from lowest level <em>library keywords<=
/em>
that are implemented in test libraries. The syntax for creating user
keywords is very close to the syntax for creating test cases, which
makes it easy to learn.</p>
<div class=3D"contents local topic" id=3D"id123">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#user-keyword-syntax" id=3D"id=
597">2.7.1&nbsp;&nbsp;&nbsp;User keyword syntax</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id124" id=3D"id598">Basic syn=
tax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#settings-in-the-keyword-table=
" id=3D"id599">Settings in the Keyword table</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#user-keyword-name-and-documen=
tation" id=3D"id600">2.7.2&nbsp;&nbsp;&nbsp;User keyword name and documenta=
tion</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#user-keyword-tags" id=3D"id60=
1">2.7.3&nbsp;&nbsp;&nbsp;User keyword tags</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#user-keyword-arguments" id=3D=
"id602">2.7.4&nbsp;&nbsp;&nbsp;User keyword arguments</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#positional-arguments-with-use=
r-keywords" id=3D"id603">Positional arguments with user keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#default-values-with-user-keyw=
ords" id=3D"id604">Default values with user keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variable-number-of-arguments-=
with-user-keywords" id=3D"id605">Variable number of arguments with user key=
words</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#free-named-arguments-with-use=
r-keywords" id=3D"id606">Free named arguments with user keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#named-only-arguments-with-use=
r-keywords" id=3D"id607">Named-only arguments with user keywords</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#embedding-arguments-into-keyw=
ord-name" id=3D"id608">2.7.5&nbsp;&nbsp;&nbsp;Embedding arguments into keyw=
ord name</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id140" id=3D"id609">Basic syn=
tax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#embedded-arguments-matching-t=
oo-much" id=3D"id610">Embedded arguments matching too much</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-custom-regular-expressi=
ons" id=3D"id611">Using custom regular expressions</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#behavior-driven-development-e=
xample" id=3D"id612">Behavior-driven development example</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#user-keyword-return-values" i=
d=3D"id613">2.7.6&nbsp;&nbsp;&nbsp;User keyword return values</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-return-setting" id=3D"i=
d614">Using <span class=3D"setting">[Return]</span> setting</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-special-keywords-to-ret=
urn" id=3D"id615">Using special keywords to return</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#user-keyword-teardown" id=3D"=
id616">2.7.7&nbsp;&nbsp;&nbsp;User keyword teardown</a></li>
</ul>
</div>
<div class=3D"section" id=3D"user-keyword-syntax">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id597">2.7.1&nbsp;&nbsp;&nbsp;User k=
eyword syntax</a></h3>
<div class=3D"section" id=3D"id124">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id598">Basic syntax</a></h4>
<p>In many ways, the overall user keyword syntax is identical to the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#test-case-syntax">test case synta=
x</a>.  User keywords are created in keyword tables
which differ from test case tables only by the name that is used to
identify them. User keyword names are in the first column similarly as
test cases names. Also user keywords are created from keywords, either
from keywords in test libraries or other user keywords. Keyword names
are normally in the second column, but when setting variables from
keyword return values, they are in the subsequent columns.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">Open Login Page</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Open Browser</span><span cl=
ass=3D"p">    </span><span class=3D"s">http://host/login.html</span><span c=
lass=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Title Should Be</span><span=
 class=3D"p">    </span><span class=3D"s">Login Page</span><span class=3D"p=
"></span>

<span class=3D"gu">Title Should Start With</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">expected</span><span class=3D"p">}=
</span>
<span class=3D"p">    ${</span><span class=3D"nv">title</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Get Title</span><span class=3D"p"=
></span>
<span class=3D"p">    </span><span class=3D"nf">Should Start With</span><sp=
an class=3D"p">    ${</span><span class=3D"nv">title</span><span class=3D"p=
">}    ${</span><span class=3D"nv">expected</span><span class=3D"p">}</span=
>
</pre></div>
<p>Most user keywords take some arguments. This important feature is used
already in the second example above, and it is explained in detail
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#user-keyword-arguments">later in =
this section</a>, similarly as <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#us=
er-keyword-return-values">user keyword return
values</a>.</p>
<p>User keywords can be created in <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#test-case-files">test case files</a>, <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#resource-files">resource files</a>,
and <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#initialization-files">test su=
ite initialization files</a>. Keywords created in resource
files are available for files using them, whereas other keywords are
only available in the files where they are created.</p>
</div>
<div class=3D"section" id=3D"settings-in-the-keyword-table">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id599">Settings in the Keyword table=
</a></h4>
<p>User keywords can have similar settings as <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#settings-in-the-test-case-table">test cases</a>, and they
have the same square bracket syntax separating them from keyword
names. All available settings are listed below and explained later in
this section.</p>
<dl class=3D"docutils">
<dt><span class=3D"setting">[Documentation]</span></dt>
<dd>Used for setting a <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#user-keywo=
rd-documentation">user keyword documentation</a>.</dd>
<dt><span class=3D"setting">[Tags]</span></dt>
<dd>Sets <a class=3D"reference internal" href=3D"http://robotframework.org/=
robotframework/latest/RobotFrameworkUserGuide.html#user-keyword-tags">tags<=
/a> for the keyword.</dd>
<dt><span class=3D"setting">[Arguments]</span></dt>
<dd>Specifies <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#user-keyword-argume=
nts">user keyword arguments</a>.</dd>
<dt><span class=3D"setting">[Return]</span></dt>
<dd>Specifies <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#user-keyword-return=
-values">user keyword return values</a>.</dd>
<dt><span class=3D"setting">[Teardown]</span></dt>
<dd>Specify <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#user-keyword-teardown=
">user keyword teardown</a>.</dd>
<dt><span class=3D"setting">[Timeout]</span></dt>
<dd>Sets the possible <a class=3D"reference internal" href=3D"http://robotf=
ramework.org/robotframework/latest/RobotFrameworkUserGuide.html#user-keywor=
d-timeout">user keyword timeout</a>. <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#timeouts">Timeouts</a> are discussed
in a section of their own.</dd>
</dl>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Setting names are case-insensitive, but the format used a=
bove is
recommended. Prior to Robot Framework 3.1, settings were also
space-insensitive meaning that extra spaces could be added (e.g.
<code>[T a g s]</code>). This is now deprecated and only the format above,
case-insensitively, is supported. Possible space between brackets
and the name (e.g. <code>[ Tags ]</code>) is still allowed.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"user-keyword-name-and-documentation">
<span id=3D"user-keyword-documentation"></span><h3><a class=3D"toc-backref"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#id600">2.7.2&nbsp;&nbsp;&nbsp;User keyword name and documentatio=
n</a></h3>
<p>The user keyword name is defined in the first column of the user
keyword table. Of course, the name should be descriptive, and it is
acceptable to have quite long keyword names. Actually, when creating
use-case-like test cases, the highest-level keywords are often
formulated as sentences or even paragraphs.</p>
<p>User keywords can have a documentation that is set with the
<span class=3D"setting">[Documentation]</span> setting. It supports same fo=
rmatting,
splitting to multiple lines, and other features as <a class=3D"reference in=
ternal" href=3D"http://robotframework.org/robotframework/latest/RobotFramew=
orkUserGuide.html#test-case-name-and-documentation">test case documentation=
</a>.
This setting documents the user keyword in the test data. It is also shown
in a more formal keyword documentation, which the <a class=3D"reference int=
ernal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewo=
rkUserGuide.html#libdoc">Libdoc</a> tool can create
from <a class=3D"reference internal" href=3D"http://robotframework.org/robo=
tframework/latest/RobotFrameworkUserGuide.html#resource-files">resource fil=
es</a>. Finally, the first logical row of the documentation,
until the first empty row, is shown as a keyword documentation in <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#log-file">test logs</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">One line documentation</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">One line documentation.</span><sp=
an class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Multiline documentation</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">The first line creates the short =
doc.</span><span class=3D"p"></span>
<span class=3D"p">    ...</span>
<span class=3D"p">    ...                </span><span class=3D"s">This is t=
he body of the documentation.</span><span class=3D"p"></span>
<span class=3D"p">    ...                </span><span class=3D"s">It is not=
 shown in Libdoc outputs but only</span><span class=3D"p"></span>
<span class=3D"p">    ...                </span><span class=3D"s">the short=
 doc is shown in logs.</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Short documentation in multiple lines</span><span class=
=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">If the short doc gets longer, it =
can span</span><span class=3D"p"></span>
<span class=3D"p">    ...                </span><span class=3D"s">multiple =
physical lines.</span><span class=3D"p"></span>
<span class=3D"p">    ...</span>
<span class=3D"p">    ...                </span><span class=3D"s">The body =
is separated from the short doc with</span><span class=3D"p"></span>
<span class=3D"p">    ...                </span><span class=3D"s">an empty =
line.</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>
</pre></div>
<p>Sometimes keywords need to be removed, replaced with new ones, or
deprecated for other reasons.  User keywords can be marked deprecated
by starting the documentation with <code>*DEPRECATED*</code>, which will
cause a warning when the keyword is used. For more information, see
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#deprecating-keywords">Depreca=
ting keywords</a> section.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, the short documentation con=
tained
only the first physical line of the keyword documentation.</p>
</div>
</div>
<div class=3D"section" id=3D"user-keyword-tags">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id601">2.7.3&nbsp;&nbsp;&nbsp;User k=
eyword tags</a></h3>
<p>Starting from Robot Framework 2.9, keywords can also have tags. User key=
words
tags can be set with <span class=3D"setting">[Tags]</span> setting similarl=
y as <a class=3D"reference internal" href=3D"http://robotframework.org/robo=
tframework/latest/RobotFrameworkUserGuide.html#test-case-tags">test case ta=
gs</a>,
but possible <span class=3D"setting">Force Tags</span> and <span class=3D"s=
etting">Default Tags</span> setting do not
affect them. Additionally keyword tags can be specified on the last line of
the documentation with <code>Tags:</code> prefix and separated by a comma. =
For example,
following two keywords would both get same three tags.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">Settings tags using separate setting</span><span class=
=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Tags</span><span class=3D"=
p">]    </span><span class=3D"s">my</span><span class=3D"p">    </span><spa=
n class=3D"s">fine</span><span class=3D"p">    </span><span class=3D"s">tag=
s</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Settings tags using documentation</span><span class=3D"p=
"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">I have documentation. And my docu=
mentation has tags.</span><span class=3D"p"></span>
<span class=3D"p">    ...                </span><span class=3D"s">Tags: my,=
 fine, tags</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>
</pre></div>
<p>Keyword tags are shown in logs and in documentation generated by <a clas=
s=3D"reference internal" href=3D"http://robotframework.org/robotframework/l=
atest/RobotFrameworkUserGuide.html#libdoc">Libdoc</a>,
where the keywords can also be searched based on tags. The <a class=3D"refe=
rence internal" href=3D"http://robotframework.org/robotframework/latest/Rob=
otFrameworkUserGuide.html#removing-keywords">--removekeywords</a>
and <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#flattening-keywords">--flatte=
nkeywords</a> commandline options also support selecting keywords by
tag, and new usages for keywords tags are possibly added in later releases.=
</p>
<p>Similarly as with <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-case-ta=
gs">test case tags</a>, user keyword tags with <code>robot-</code> and
<code>robot:</code> prefixes are <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
reserved-tags">reserved</a> for special features by Robot Framework
itself. Users should thus not use any tag with these prefixes unless actual=
ly
activating the special functionality.</p>
</div>
<div class=3D"section" id=3D"user-keyword-arguments">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id602">2.7.4&nbsp;&nbsp;&nbsp;User k=
eyword arguments</a></h3>
<p>Most user keywords need to take some arguments. The syntax for
specifying them is probably the most complicated feature normally
needed with Robot Framework, but even that is relatively easy,
particularly in most common cases. Arguments are normally specified with
the <span class=3D"setting">[Arguments]</span> setting, and argument names =
use the same
syntax as <a class=3D"reference internal" href=3D"http://robotframework.org=
/robotframework/latest/RobotFrameworkUserGuide.html#variables">variables</a=
>, for example <code>${arg}</code>.</p>
<div class=3D"section" id=3D"positional-arguments-with-user-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id603">Positional arguments with use=
r keywords</a></h4>
<p>The simplest way to specify arguments (apart from not having them at all=
)
is using only positional arguments. In most cases, this is all
that is needed.</p>
<p>The syntax is such that first the <span class=3D"setting">[Arguments]</s=
pan> setting is
given and then argument names are defined in the subsequent
cells. Each argument is in its own cell, using the same syntax as with
variables. The keyword must be used with as many arguments as there
are argument names in its signature. The actual argument names do not
matter to the framework, but from users' perspective they should
be as descriptive as possible. It is recommended
to use lower-case letters in variable names, either as
<code>${my_arg}</code>, <code>${my arg}</code> or <code>${myArg}</code>.</p=
>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">One Argument</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">arg_name</span><span class=3D"p">}=
</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Got argument </span><span class=3D"p">${</spa=
n><span class=3D"nv">arg_name</span><span class=3D"p">}</span>

<span class=3D"gu">Three Arguments</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">arg1</span><span class=3D"p">}    =
${</span><span class=3D"nv">arg2</span><span class=3D"p">}    ${</span><spa=
n class=3D"nv">arg3</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">1st argument: </span><span class=3D"p">${</sp=
an><span class=3D"nv">arg1</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">2nd argument: </span><span class=3D"p">${</sp=
an><span class=3D"nv">arg2</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">3rd argument: </span><span class=3D"p">${</sp=
an><span class=3D"nv">arg3</span><span class=3D"p">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"default-values-with-user-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id604">Default values with user keyw=
ords</a></h4>
<p>When creating user keywords, positional arguments are sufficient in
most situations. It is, however, sometimes useful that keywords have
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#default-values">default values</a=
> for some or all of their arguments. Also user keywords
support default values, and the needed new syntax does not add very much
to the already discussed basic syntax.</p>
<p>In short, default values are added to arguments, so that first there is
the equals sign (<code>=3D</code>) and then the value, for example <code>${=
arg}=3Ddefault</code>.
There can be many arguments with defaults, but they all must be given after
the normal positional arguments. The default value can contain a <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#variables">variable</a>
created on <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#variable-priorities-an=
d-scopes">test, suite or global scope</a>, but local variables of the keywo=
rd
executor cannot be used. Starting from Robot Framework 3.0, default value c=
an
also be defined based on earlier arguments accepted by the keyword.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The syntax for default values is space sensitive. Spaces
before the <code>=3D</code> sign are not allowed, and possible spaces
after it are considered part of the default value itself.</p>
</div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">One Argument With Default Value</span><span class=3D"p">=
</span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">arg</span><span class=3D"p">}</spa=
n><span class=3D"s">=3Ddefault value</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">This keyword takes 0-1 arguments<=
/span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Got argument </span><span class=3D"p">${</spa=
n><span class=3D"nv">arg</span><span class=3D"p">}</span>

<span class=3D"gu">Two Arguments With Defaults</span><span class=3D"p"></sp=
an>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">arg1</span><span class=3D"p">}</sp=
an><span class=3D"s">=3Ddefault 1</span><span class=3D"p">    ${</span><spa=
n class=3D"nv">arg2</span><span class=3D"p">}</span><span class=3D"s">=3D</=
span><span class=3D"p">${</span><span class=3D"nv">VARIABLE</span><span cla=
ss=3D"p">}</span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">This keyword takes 0-2 arguments<=
/span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">1st argument </span><span class=3D"p">${</spa=
n><span class=3D"nv">arg1</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">2nd argument </span><span class=3D"p">${</spa=
n><span class=3D"nv">arg2</span><span class=3D"p">}</span>

<span class=3D"gu">One Required And One With Default</span><span class=3D"p=
"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">required</span><span class=3D"p">}=
    ${</span><span class=3D"nv">optional</span><span class=3D"p">}</span><s=
pan class=3D"s">=3Ddefault</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">This keyword takes 1-2 arguments<=
/span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Required: </span><span class=3D"p">${</span><=
span class=3D"nv">required</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Optional: </span><span class=3D"p">${</span><=
span class=3D"nv">optional</span><span class=3D"p">}</span>

<span class=3D"gu"> Default Based On Earlier Argument</span><span class=3D"=
p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">a</span><span class=3D"p">}    ${<=
/span><span class=3D"nv">b</span><span class=3D"p">}</span><span class=3D"s=
">=3D</span><span class=3D"p">${</span><span class=3D"nv">a</span><span cla=
ss=3D"p">}    ${</span><span class=3D"nv">c</span><span class=3D"p">}</span=
><span class=3D"s">=3D</span><span class=3D"p">${</span><span class=3D"nv">=
a</span><span class=3D"p">}</span><span class=3D"s"> and </span><span class=
=3D"p">${</span><span class=3D"nv">b</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">a</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">b</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">c</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">a</span><span class=3D"p">}</span><span class=
=3D"s"> and </span><span class=3D"p">${</span><span class=3D"nv">b</span><s=
pan class=3D"p">}</span>
</pre></div>
<p>When a keyword accepts several arguments with default values and only
some of them needs to be overridden, it is often handy to use the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#named-arguments">named arguments<=
/a> syntax. When this syntax is used with user
keywords, the arguments are specified without the <code>${}</code>
decoration. For example, the second keyword above could be used like
below and <code>${arg1}</code> would still get its default value.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Two Arguments With Defaults=
</span><span class=3D"p">    </span><span class=3D"s">arg2=3Dnew value</spa=
n><span class=3D"p"></span>
</pre></div>
<p>As all Pythonistas must have already noticed, the syntax for
specifying default arguments is heavily inspired by Python syntax for
function default values.</p>
</div>
<div class=3D"section" id=3D"variable-number-of-arguments-with-user-keyword=
s">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id605">Variable number of arguments =
with user keywords</a></h4>
<p>Sometimes even default values are not enough and there is a need
for a keyword accepting <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-=
number-of-arguments">variable number of arguments</a>. User keywords
support also this feature. All that is needed is having <a class=3D"referen=
ce internal" href=3D"http://robotframework.org/robotframework/latest/RobotF=
rameworkUserGuide.html#list-variable">list variable</a> such
as <code>@{varargs}</code> after possible positional arguments in the keywo=
rd signature.
This syntax can be combined with the previously described default values, a=
nd
at the end the list variable gets all the leftover arguments that do not ma=
tch
other arguments. The list variable can thus have any number of items, even =
zero.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">Any Number Of Arguments</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{</span><span class=3D"nv">varargs</span><span class=3D"p">}<=
/span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    @{</span><span class=3D"nv">varargs</span><span class=3D"p">}</s=
pan>

<span class=3D"gu">One Or More Arguments</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">required</span><span class=3D"p">}=
    @{</span><span class=3D"nv">rest</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    ${</span><span class=3D"nv">required</span><span class=3D"p">}  =
  @{</span><span class=3D"nv">rest</span><span class=3D"p">}</span>

<span class=3D"gu">Required, Default, Varargs</span><span class=3D"p"></spa=
n>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">req</span><span class=3D"p">}    $=
{</span><span class=3D"nv">opt</span><span class=3D"p">}</span><span class=
=3D"s">=3D42</span><span class=3D"p">    @{</span><span class=3D"nv">others=
</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Required: </span><span class=3D"p">${</span><=
span class=3D"nv">req</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Optional: </span><span class=3D"p">${</span><=
span class=3D"nv">opt</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Others:</span><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">item</span><span c=
lass=3D"p">}    IN    @{</span><span class=3D"nv">others</span><span class=
=3D"p">}</span>
<span class=3D"p">        </span><span class=3D"nf">Log</span><span class=
=3D"p">    ${</span><span class=3D"nv">item</span><span class=3D"p">}</span=
>
<span class=3D"p">    END</span>
</pre></div>
<p>Notice that if the last keyword above is used with more than one
argument, the second argument <code>${opt}</code> always gets the given
value instead of the default value. This happens even if the given
value is empty. The last example also illustrates how a variable
number of arguments accepted by a user keyword can be used in a <a class=3D=
"reference internal" href=3D"http://robotframework.org/robotframework/lates=
t/RobotFrameworkUserGuide.html#for-loops">for
loop</a>. This combination of two rather advanced functions can
sometimes be very useful.</p>
<p>The keywords in the examples above could be used, for example, like this=
:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Varargs with user keywords</span><span class=3D"p"></spa=
n>
<span class=3D"p">    </span><span class=3D"nf">Any Number Of Arguments</sp=
an><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Any Number Of Arguments</sp=
an><span class=3D"p">    </span><span class=3D"s">arg</span><span class=3D"=
p"></span>
<span class=3D"p">    </span><span class=3D"nf">Any Number Of Arguments</sp=
an><span class=3D"p">    </span><span class=3D"s">arg1</span><span class=3D=
"p">    </span><span class=3D"s">arg2</span><span class=3D"p">    </span><s=
pan class=3D"s">arg3</span><span class=3D"p">   </span><span class=3D"s">ar=
g4</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">One Or More Arguments</span=
><span class=3D"p">    </span><span class=3D"s">required</span><span class=
=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">One Or More Arguments</span=
><span class=3D"p">    </span><span class=3D"s">arg1</span><span class=3D"p=
">    </span><span class=3D"s">arg2</span><span class=3D"p">    </span><spa=
n class=3D"s">arg3</span><span class=3D"p">   </span><span class=3D"s">arg4=
</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Required, Default, Varargs<=
/span><span class=3D"p">    </span><span class=3D"s">required</span><span c=
lass=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Required, Default, Varargs<=
/span><span class=3D"p">    </span><span class=3D"s">required</span><span c=
lass=3D"p">    </span><span class=3D"s">optional</span><span class=3D"p"></=
span>
<span class=3D"p">    </span><span class=3D"nf">Required, Default, Varargs<=
/span><span class=3D"p">    </span><span class=3D"s">arg1</span><span class=
=3D"p">    </span><span class=3D"s">arg2</span><span class=3D"p">    </span=
><span class=3D"s">arg3</span><span class=3D"p">    </span><span class=3D"s=
">arg4</span><span class=3D"p">    </span><span class=3D"s">arg5</span><spa=
n class=3D"p"></span>
</pre></div>
<p>Again, Pythonistas probably notice that the variable number of
arguments syntax is very close to the one in Python.</p>
</div>
<div class=3D"section" id=3D"free-named-arguments-with-user-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id606">Free named arguments with use=
r keywords</a></h4>
<p>User keywords can also accept <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
free-named-arguments">free named arguments</a> by having a <a class=3D"refe=
rence internal" href=3D"http://robotframework.org/robotframework/latest/Rob=
otFrameworkUserGuide.html#dictionary-variable">dictionary
variable</a> like <code>&amp;{named}</code> as the absolutely last argument=
. When the keyword
is called, this variable will get all <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#named-arguments">named arguments</a> that do not match
any <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#positional-arguments-with-use=
r-keywords">positional argument</a> or <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#named-only-arguments-with-user-keywords">named-only argument</a> in t=
he keyword
signature.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">Free Named Only</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    &amp;{</span><span class=3D"nv">named</span><span class=3D"p">=
}</span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    &amp;{</span><span class=3D"nv">named</span><span class=3D"p">}<=
/span>

<span class=3D"gu">Positional And Free Named</span><span class=3D"p"></span=
>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">required</span><span class=3D"p">}=
    &amp;{</span><span class=3D"nv">extra</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    ${</span><span class=3D"nv">required</span><span class=3D"p">}  =
  &amp;{</span><span class=3D"nv">extra</span><span class=3D"p">}</span>

<span class=3D"gu">Run Program</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{</span><span class=3D"nv">args</span><span class=3D"p">}    =
&amp;{</span><span class=3D"nv">config</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Run Process</span><span cla=
ss=3D"p">    </span><span class=3D"s">program.py</span><span class=3D"p">  =
  @{</span><span class=3D"nv">args</span><span class=3D"p">}    &amp;{</spa=
n><span class=3D"nv">config</span><span class=3D"p">}</span>
</pre></div>
<p>The last example above shows how to create a wrapper keyword that
accepts any positional or named argument and passes them forward.
See <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#free-named-argument-examples"=
>free named argument examples</a> for a full example with same keyword.</p>
<p>Free named arguments support with user keywords works similarly as kwarg=
s
work in Python. In the signature and also when passing arguments forward,
<code>&amp;{kwargs}</code> is pretty much the same as Python's <code>**kwar=
gs</code>.</p>
</div>
<div class=3D"section" id=3D"named-only-arguments-with-user-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id607">Named-only arguments with use=
r keywords</a></h4>
<p>Starting from Robot Framework 3.1, user keywords support <a class=3D"ref=
erence internal" href=3D"http://robotframework.org/robotframework/latest/Ro=
botFrameworkUserGuide.html#named-only-arguments">named-only
arguments</a> that are inspired by <a class=3D"reference external" href=3D"=
https://www.python.org/dev/peps/pep-3102">Python 3 keyword-only arguments</=
a>.
This syntax is typically used by having normal arguments <em>after</em>
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#variable-number-of-arguments-with=
-user-keywords">variable number of arguments</a> (<code>@{varargs}</code>).=
 If the keywords does not
use varargs, it is possible to use just <code>@{}</code> to denote that the=
 subsequent
arguments are named-only:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">With Varargs</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{</span><span class=3D"nv">varargs</span><span class=3D"p">} =
   ${</span><span class=3D"nv">named</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    @{</span><span class=3D"nv">varargs</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">named</span><span class=3D"p">}</span>

<span class=3D"gu">Without Varargs</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{}    ${</span><span class=3D"nv">first</span><span class=3D"=
p">}    ${</span><span class=3D"nv">second</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    ${</span><span class=3D"nv">first</span><span class=3D"p">}    $=
{</span><span class=3D"nv">second</span><span class=3D"p">}</span>
</pre></div>
<p>Named-only arguments can be used together with <a class=3D"reference int=
ernal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewo=
rkUserGuide.html#positional-arguments-with-user-keywords">positional argume=
nts</a> as
well as with <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#free-named-arguments=
-with-user-keywords">free named arguments</a>. When using free named argume=
nts, they
must be last:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">With Positional</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">positional</span><span class=3D"p"=
>}    @{}    ${</span><span class=3D"nv">named</span><span class=3D"p">}</s=
pan>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    ${</span><span class=3D"nv">positional</span><span class=3D"p">}=
    ${</span><span class=3D"nv">named</span><span class=3D"p">}</span>

<span class=3D"gu">With Free Named</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{</span><span class=3D"nv">varargs</span><span class=3D"p">} =
   ${</span><span class=3D"nv">named only</span><span class=3D"p">}    &amp=
;{</span><span class=3D"nv">free named</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    @{</span><span class=3D"nv">varargs</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">named only</span><span class=3D"p">}    &amp;{=
</span><span class=3D"nv">free named</span><span class=3D"p">}</span>
</pre></div>
<p>When passing named-only arguments to keywords, their order does not matt=
er
other than they must follow possible positional arguments. The keywords abo=
ve
could be used, for example, like this:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">With Varargs</span><span cl=
ass=3D"p">    </span><span class=3D"s">named=3Dvalue</span><span class=3D"p=
"></span>
<span class=3D"p">    </span><span class=3D"nf">With Varargs</span><span cl=
ass=3D"p">    </span><span class=3D"s">positional</span><span class=3D"p"> =
   </span><span class=3D"s">second positional</span><span class=3D"p">    <=
/span><span class=3D"s">named=3Dfoobar</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Without Varargs</span><span=
 class=3D"p">    </span><span class=3D"s">first=3D1</span><span class=3D"p"=
>    </span><span class=3D"s">second=3D2</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Without Varargs</span><span=
 class=3D"p">    </span><span class=3D"s">second=3Dtoka</span><span class=
=3D"p">    </span><span class=3D"s">first=3Deka</span><span class=3D"p"></s=
pan>
<span class=3D"p">    </span><span class=3D"nf">With Positional</span><span=
 class=3D"p">    </span><span class=3D"s">foo</span><span class=3D"p">    <=
/span><span class=3D"s">named=3Dbar</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">With Positional</span><span=
 class=3D"p">    </span><span class=3D"s">named=3D2</span><span class=3D"p"=
>    </span><span class=3D"s">positional=3D1</span><span class=3D"p"></span=
>
<span class=3D"p">    </span><span class=3D"nf">With Free Named</span><span=
 class=3D"p">    </span><span class=3D"s">positional</span><span class=3D"p=
">    </span><span class=3D"s">named only=3Dvalue</span><span class=3D"p"> =
   </span><span class=3D"s">x=3D1</span><span class=3D"p">    </span><span =
class=3D"s">y=3D2</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">With Free Named</span><span=
 class=3D"p">    </span><span class=3D"s">foo=3Da</span><span class=3D"p"> =
   </span><span class=3D"s">bar=3Db</span><span class=3D"p">    </span><spa=
n class=3D"s">named only=3Dc</span><span class=3D"p">    </span><span class=
=3D"s">quux=3Dd</span><span class=3D"p"></span>
</pre></div>
<p>Named-only arguments can have default values similarly as <a class=3D"re=
ference internal" href=3D"http://robotframework.org/robotframework/latest/R=
obotFrameworkUserGuide.html#default-values-with-user-keywords">normal user
keyword arguments</a>. A minor difference is that the order of arguments
with and without default values is not important.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">With Default</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{}    ${</span><span class=3D"nv">named</span><span class=3D"=
p">}</span><span class=3D"s">=3Ddefault</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    ${</span><span class=3D"nv">named</span><span class=3D"p">}</spa=
n>

<span class=3D"gu">With And Without Defaults</span><span class=3D"p"></span=
>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{}    ${</span><span class=3D"nv">optional</span><span class=
=3D"p">}</span><span class=3D"s">=3Ddefault</span><span class=3D"p">    ${<=
/span><span class=3D"nv">mandatory</span><span class=3D"p">}    ${</span><s=
pan class=3D"nv">mandatory 2</span><span class=3D"p">}    ${</span><span cl=
ass=3D"nv">optional 2</span><span class=3D"p">}</span><span class=3D"s">=3D=
default 2</span><span class=3D"p">    ${</span><span class=3D"nv">mandatory=
 3</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log Many</span><span class=
=3D"p">    ${</span><span class=3D"nv">optional</span><span class=3D"p">}  =
  ${</span><span class=3D"nv">mandatory</span><span class=3D"p">}    ${</sp=
an><span class=3D"nv">mandatory 2</span><span class=3D"p">}    ${</span><sp=
an class=3D"nv">optional 2</span><span class=3D"p">}    ${</span><span clas=
s=3D"nv">mandatory 3</span><span class=3D"p">}</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"embedding-arguments-into-keyword-name">
<span id=3D"embedded-argument-syntax"></span><h3><a class=3D"toc-backref" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#id608">2.7.5&nbsp;&nbsp;&nbsp;Embedding arguments into keyword nam=
e</a></h3>
<p>Robot Framework has also another approach to pass arguments to user
keywords than specifying them in cells after the keyword name as
explained in the previous section. This method is based on embedding
the arguments directly into the keyword name, and its main benefit is
making it easier to use real and clear sentences as keywords.</p>
<div class=3D"section" id=3D"id140">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id609">Basic syntax</a></h4>
<p>It has always been possible to use keywords like <span class=3D"name">Se=
lect dog
from list</span> and <span class=3D"name">Selects cat from list</span>, but=
 all such keywords
must have been implemented separately. The idea of embedding arguments
into the keyword name is that all you need is a keyword with name like
<span class=3D"name">Select ${animal} from list</span>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">Select </span><span class=3D"p">${</span><span class=3D"=
nv">animal</span><span class=3D"p">}</span><span class=3D"gu"> from list</s=
pan><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Open Page</span><span class=
=3D"p">    </span><span class=3D"s">Pet Selection</span><span class=3D"p"><=
/span>
<span class=3D"p">    </span><span class=3D"nf">Select Item From List</span=
><span class=3D"p">    </span><span class=3D"s">animal_list</span><span cla=
ss=3D"p">    ${</span><span class=3D"nv">animal</span><span class=3D"p">}</=
span>
</pre></div>
<p>Keywords using embedded arguments cannot take any "normal" arguments
(specified with <span class=3D"setting">[Arguments]</span> setting) but oth=
erwise they are
created just like other user keywords. The arguments used in the name
will naturally be available inside the keyword and they have different
value depending on how the keyword is called. For example,
<code>${animal}</code> in the previous has value <code>dog</code> if the ke=
yword
is used like <span class=3D"name">Select dog from list</span>. Obviously it=
 is not
mandatory to use all these arguments inside the keyword, and they can
thus be used as wildcards.</p>
<p>These kind of keywords are also used the same way as other keywords
except that spaces and underscores are not ignored in their
names. They are, however, case-insensitive like other keywords. For
example, the keyword in the example above could be used like
<span class=3D"name">select x from list</span>, but not like <span class=3D=
"name">Select x fromlist</span>.</p>
<p>Embedded arguments do not support default values or variable number of
arguments like normal arguments do. Using variables when
calling these keywords is possible but that can reduce readability.
Notice also that embedded arguments only work with user keywords.</p>
</div>
<div class=3D"section" id=3D"embedded-arguments-matching-too-much">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id610">Embedded arguments matching t=
oo much</a></h4>
<p>One tricky part in using embedded arguments is making sure that the
values used when calling the keyword match the correct arguments. This
is a problem especially if there are multiple arguments and characters
separating them may also appear in the given values. For example,
keyword <span class=3D"name">Select ${city} ${team}</span> does not work co=
rrectly if used
with city containing too parts like <span class=3D"name">Select Los Angeles=
 Lakers</span>.</p>
<p>An easy solution to this problem is quoting the arguments (e.g.
<span class=3D"name">Select "${city}" "${team}"</span>) and using the keywo=
rd in quoted
format (e.g. <span class=3D"name">Select "Los Angeles" "Lakers"</span>). Th=
is approach is
not enough to resolve all this kind of conflicts, though, but it is
still highly recommended because it makes arguments stand out from
rest of the keyword. A more powerful but also more complicated
solution, <a class=3D"reference internal" href=3D"http://robotframework.org=
/robotframework/latest/RobotFrameworkUserGuide.html#using-custom-regular-ex=
pressions">using custom regular expressions</a> when defining variables,
is explained in the next section. Finally, if things get complicated,
it might be a better idea to use normal positional arguments instead.</p>
<p>The problem of arguments matching too much occurs often when creating
keywords that <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#ignoring-given-when=
-then-and-but-prefixes">ignore given/when/then/and/but prefixes</a> . For e=
xample,
<span class=3D"name">${name} goes home</span> matches <span class=3D"name">=
Given Janne goes home</span> so
that <code>${name}</code> gets value <code>Given Janne</code>. Quotes aroun=
d the
argument, like in <span class=3D"name">"${name}" goes home</span>, resolve =
this problem
easily.</p>
</div>
<div class=3D"section" id=3D"using-custom-regular-expressions">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id611">Using custom regular expressi=
ons</a></h4>
<p>When keywords with embedded arguments are called, the values are
matched internally using <a class=3D"reference external" href=3D"http://en.=
wikipedia.org/wiki/Regular_expression">regular expressions</a>
(regexps for short). The default logic goes so that every argument in
the name is replaced with a pattern <code>.*?</code> that basically matches
any string. This logic works fairly well normally, but as just
discussed above, sometimes keywords <a class=3D"reference internal" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#embedded-arguments-matching-too-much">match more than
intended</a>. Quoting or otherwise separating arguments from the other
text can help but, for example, the test below fails because keyword
<span class=3D"name">I execute "ls" with "-lh"</span> matches both of the d=
efined
keywords.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">I execute "ls"</span><span =
class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">I execute "ls" with "-lh"</=
span><span class=3D"p"></span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">I execute "</span><span class=3D"p">${</span><span class=
=3D"nv">cmd</span><span class=3D"p">}</span><span class=3D"gu">"</span><spa=
n class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Run Process</span><span cla=
ss=3D"p">    ${</span><span class=3D"nv">cmd</span><span class=3D"p">}    <=
/span><span class=3D"s">shell=3DTrue</span><span class=3D"p"></span>

<span class=3D"gu">I execute "</span><span class=3D"p">${</span><span class=
=3D"nv">cmd</span><span class=3D"p">}</span><span class=3D"gu">" with "</sp=
an><span class=3D"p">${</span><span class=3D"nv">opts</span><span class=3D"=
p">}</span><span class=3D"gu">"</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Run Process</span><span cla=
ss=3D"p">    ${</span><span class=3D"nv">cmd</span><span class=3D"p">}</spa=
n><span class=3D"s"> </span><span class=3D"p">${</span><span class=3D"nv">o=
pts</span><span class=3D"p">}    </span><span class=3D"s">shell=3DTrue</spa=
n><span class=3D"p"></span>
</pre></div>
<p>A solution to this problem is using a custom regular expression that
makes sure that the keyword matches only what it should in that
particular context. To be able to use this feature, and to fully
understand the examples in this section, you need to understand at
least the basics of the regular expression syntax.</p>
<p>A custom embedded argument regular expression is defined after the
base name of the argument so that the argument and the regexp are
separated with a colon. For example, an argument that should match
only numbers can be defined like <code>${arg:\d+}</code>. Using custom
regular expressions is illustrated by the examples below.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">I execute "ls"</span><span =
class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">I execute "ls" with "-lh"</=
span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">I type 1 + 2</span><span cl=
ass=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">I type 53 - 11</span><span =
class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Today is 2011-06-27</span><=
span class=3D"p"></span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">I execute "</span><span class=3D"p">${</span><span class=
=3D"nv">cmd:[^"]+</span><span class=3D"p">}</span><span class=3D"gu">"</spa=
n><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Run Process</span><span cla=
ss=3D"p">    ${</span><span class=3D"nv">cmd</span><span class=3D"p">}    <=
/span><span class=3D"s">shell=3DTrue</span><span class=3D"p"></span>

<span class=3D"gu">I execute "</span><span class=3D"p">${</span><span class=
=3D"nv">cmd</span><span class=3D"p">}</span><span class=3D"gu">" with "</sp=
an><span class=3D"p">${</span><span class=3D"nv">opts</span><span class=3D"=
p">}</span><span class=3D"gu">"</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Run Process</span><span cla=
ss=3D"p">    ${</span><span class=3D"nv">cmd</span><span class=3D"p">}</spa=
n><span class=3D"s"> </span><span class=3D"p">${</span><span class=3D"nv">o=
pts</span><span class=3D"p">}    </span><span class=3D"s">shell=3DTrue</spa=
n><span class=3D"p"></span>

<span class=3D"gu">I type </span><span class=3D"p">${</span><span class=3D"=
nv">a:\d+</span><span class=3D"p">}</span><span class=3D"gu"> </span><span =
class=3D"p">${</span><span class=3D"nv">operator:[+-]</span><span class=3D"=
p">}</span><span class=3D"gu"> </span><span class=3D"p">${</span><span clas=
s=3D"nv">b:\d+</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Calculate</span><span class=
=3D"p">    ${</span><span class=3D"nv">a</span><span class=3D"p">}    ${</s=
pan><span class=3D"nv">operator</span><span class=3D"p">}    ${</span><span=
 class=3D"nv">b</span><span class=3D"p">}</span>

<span class=3D"gu">Today is </span><span class=3D"p">${</span><span class=
=3D"nv">date:\d{4\}-\d{2\}-\d{2\}</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    ${</span><span class=3D"nv">date</span><span class=3D"p">}</span>
</pre></div>
<p>In the above example keyword <span class=3D"name">I execute "ls" with "-=
lh"</span> matches
only <span class=3D"name">I execute "${cmd}" with "${opts}"</span>. That is=
 guaranteed
because the custom regular expression <code>[^"]+</code> in <span class=3D"=
name">I execute
"${cmd:[^"]}"</span> means that a matching argument cannot contain any
quotes. In this case there is no need to add custom regexps to the
other <span class=3D"name">I execute</span> variant.</p>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p class=3D"last">If you quote arguments, using regular expression <code>[^=
"]+</code>
guarantees that the argument matches only until the first
closing quote.</p>
</div>
<div class=3D"section" id=3D"supported-regular-expression-syntax">
<h5>Supported regular expression syntax</h5>
<p>Being implemented with Python, Robot Framework naturally uses Python's
<span class=3D"name">re</span> module that has pretty standard <a class=3D"=
reference external" href=3D"http://docs.python.org/library/re.html">regular=
 expressions
syntax</a>. This syntax is otherwise fully supported with embedded
arguments, but regexp extensions in format <code>(?...)</code> cannot be
used. Notice also that matching embedded arguments is done
case-insensitively. If the regular expression syntax is invalid,
creating the keyword fails with an error visible in <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#errors-and-warnings-during-execution">test execution
errors</a>.</p>
</div>
<div class=3D"section" id=3D"id142">
<h5>Escaping special characters</h5>
<p>There are some special characters that need to be escaped when used in
the custom embedded arguments regexp. First of all, possible closing
curly braces (<code>}</code>) in the pattern need to be escaped with a sing=
le backslash
(<code>\}</code>) because otherwise the argument would end already there. T=
his is
illustrated in the previous example with keyword
<span class=3D"name">Today is ${date:\d{4\}-\d{2\}-\d{2\}}</span>.</p>
<p>Backslash (<span class=3D"codesc">\</span>) is a special character in Py=
thon regular
expression syntax and thus needs to be escaped if you want to have a
literal backslash character. The safest escape sequence in this case
is four backslashes (<code>\\\\</code>) but, depending on the next
character, also two backslashes may be enough.</p>
<p>Notice also that keyword names and possible embedded arguments in them
should <em>not</em> be escaped using the normal <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#escaping">test data escaping
rules</a>. This means that, for example, backslashes in expressions
like <code>${name:\w+}</code> should not be escaped.</p>
</div>
<div class=3D"section" id=3D"using-variables-with-custom-embedded-argument-=
regular-expressions">
<h5>Using variables with custom embedded argument regular expressions</h5>
<p>Whenever custom embedded argument regular expressions are used, Robot
Framework automatically enhances the specified regexps so that they
match variables in addition to the text matching the pattern. This
means that it is always possible to use variables with keywords having
embedded arguments. For example, the following test case would pass
using the keywords from the earlier example.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Variables=
 ***</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">DATE</span><span class=3D"p">=
}    </span><span class=3D"s">2011-06-27</span><span class=3D"p"></span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">I type </span><span class=
=3D"p">${</span><span class=3D"nv">1</span><span class=3D"p">}</span><span =
class=3D"nf"> + </span><span class=3D"p">${</span><span class=3D"nv">2</spa=
n><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Today is </span><span class=
=3D"p">${</span><span class=3D"nv">DATE</span><span class=3D"p">}</span>
</pre></div>
<p>A drawback of variables automatically matching custom regular
expressions is that it is possible that the value the keyword gets
does not actually match the specified regexp. For example, variable
<code>${DATE}</code> in the above example could contain any value and
<span class=3D"name">Today is ${DATE}</span> would still match the same key=
word.</p>
</div>
</div>
<div class=3D"section" id=3D"behavior-driven-development-example">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id612">Behavior-driven development e=
xample</a></h4>
<p>The biggest benefit of having arguments as part of the keyword name is t=
hat it
makes it easier to use higher-level sentence-like keywords when writing tes=
t
cases in <a class=3D"reference internal" href=3D"http://robotframework.org/=
robotframework/latest/RobotFrameworkUserGuide.html#behavior-driven-style">b=
ehavior-driven style</a>. The example below illustrates this. Notice
also that prefixes <span class=3D"name">Given</span>, <span class=3D"name">=
When</span> and <span class=3D"name">Then</span> are <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#ignoring-given-when-then-and-but-prefixes">left out
of the keyword definitions</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Add two numbers</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"ge">Given </span><span class=3D=
"nf">I have Calculator open</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"ge">When </span><span class=3D"=
nf">I add 2 and 40</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"ge">Then </span><span class=3D"=
nf">result should be 42</span><span class=3D"p"></span>

<span class=3D"gu">Add negative numbers</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"ge">Given </span><span class=3D=
"nf">I have Calculator open</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"ge">When </span><span class=3D"=
nf">I add 1 and -2</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"ge">Then </span><span class=3D"=
nf">result should be -1</span><span class=3D"p"></span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">I have </span><span class=3D"p">${</span><span class=3D"=
nv">program</span><span class=3D"p">}</span><span class=3D"gu"> open</span>=
<span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Start Program</span><span c=
lass=3D"p">    ${</span><span class=3D"nv">program</span><span class=3D"p">=
}</span>

<span class=3D"gu">I add </span><span class=3D"p">${</span><span class=3D"n=
v">number 1</span><span class=3D"p">}</span><span class=3D"gu"> and </span>=
<span class=3D"p">${</span><span class=3D"nv">number 2</span><span class=3D=
"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Input Number</span><span cl=
ass=3D"p">    ${</span><span class=3D"nv">number 1</span><span class=3D"p">=
}</span>
<span class=3D"p">    </span><span class=3D"nf">Push Button</span><span cla=
ss=3D"p">     </span><span class=3D"s">+</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Input Number</span><span cl=
ass=3D"p">    ${</span><span class=3D"nv">number 2</span><span class=3D"p">=
}</span>
<span class=3D"p">    </span><span class=3D"nf">Push Button</span><span cla=
ss=3D"p">     </span><span class=3D"s">=3D</span><span class=3D"p"></span>

<span class=3D"gu">Result should be </span><span class=3D"p">${</span><span=
 class=3D"nv">expected</span><span class=3D"p">}</span>
<span class=3D"p">    ${</span><span class=3D"nv">result</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Get Result</span><span class=3D"p=
"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">result</span><span class=3D"p"=
>}    ${</span><span class=3D"nv">expected</span><span class=3D"p">}</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Embedded arguments feature in Robot Framework is inspired=
 by
how <em>step definitions</em> are created in a popular BDD tool <a class=3D=
"reference external" href=3D"http://cukes.info/">Cucumber</a>.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"user-keyword-return-values">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id613">2.7.6&nbsp;&nbsp;&nbsp;User k=
eyword return values</a></h3>
<p>Similarly as library keywords, also user keywords can return
values. Typically return values are defined with the <span class=3D"setting=
">[Return]</span>
setting, but it is also possible to use <a class=3D"reference external" hre=
f=3D"http://robotframework.org/robotframework/latest/libraries/BuiltIn.html=
">BuiltIn</a> keywords
<span class=3D"name">Return From Keyword</span> and <span class=3D"name">Re=
turn From Keyword If</span>.
Regardless how values are returned, they can be <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#return-values-from-keywords">assigned to variables</a>
in test cases and in other user keywords.</p>
<div class=3D"section" id=3D"using-return-setting">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id614">Using <span class=3D"setting"=
>[Return]</span> setting</a></h4>
<p>The most common case is that  a user keyword returns one value and it is
assigned to a scalar variable. When using the <span class=3D"setting">[Retu=
rn]</span> setting, this is
done by having the return value in the next cell after the setting.</p>
<p>User keywords can also return several values, which can then be assigned=
 into
several scalar variables at once, to a list variable, or to scalar variable=
s
and a list variable. Several values can be returned simply by
specifying those values in different cells after the <span class=3D"setting=
">[Return]</span> setting.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">One Return Value</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">ret</span><span class=3D"=
p">} =3D    </span><span class=3D"nf">Return One Value</span><span class=3D=
"p">    </span><span class=3D"s">argument</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Some Keyword</span><span cl=
ass=3D"p">    ${</span><span class=3D"nv">ret</span><span class=3D"p">}</sp=
an>

<span class=3D"gu">Multiple Values</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">a</span><span class=3D"p"=
>}    ${</span><span class=3D"nv">b</span><span class=3D"p">}    ${</span><=
span class=3D"nv">c</span><span class=3D"p">} =3D    </span><span class=3D"=
nf">Return Three Values</span><span class=3D"p"></span>
<span class=3D"p">    @{</span><span class=3D"nv">list</span><span class=3D=
"p">} =3D    </span><span class=3D"nf">Return Three Values</span><span clas=
s=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">scalar</span><span class=
=3D"p">}    @{</span><span class=3D"nv">rest</span><span class=3D"p">} =3D =
   </span><span class=3D"nf">Return Three Values</span><span class=3D"p"></=
span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">Return One Value</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">arg</span><span class=3D"p">}</spa=
n>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p">    ${</span><span class=3D"nv">arg</span><span class=3D"p">}</sp=
an>
<span class=3D"p">    ${</span><span class=3D"nv">value</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Get Some Value</span><span class=
=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Return</span><span class=
=3D"p">]    ${</span><span class=3D"nv">value</span><span class=3D"p">}</sp=
an>

<span class=3D"gu">Return Three Values</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Return</span><span class=
=3D"p">]    </span><span class=3D"s">foo</span><span class=3D"p">    </span=
><span class=3D"s">bar</span><span class=3D"p">    </span><span class=3D"s"=
>zap</span><span class=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"using-special-keywords-to-return">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id615">Using special keywords to ret=
urn</a></h4>
<p><a class=3D"reference external" href=3D"http://robotframework.org/robotf=
ramework/latest/libraries/BuiltIn.html">BuiltIn</a> keywords <span class=3D=
"name">Return From Keyword</span> and <span class=3D"name">Return From Keyw=
ord If</span>
allow returning from a user keyword conditionally in the middle of the keyw=
ord.
Both of them also accept optional return values that are handled exactly li=
ke
with the <span class=3D"setting">[Return]</span> setting discussed above.</=
p>
<p>The first example below is functionally identical to the previous
<span class=3D"setting">[Return]</span> setting example. The second, and mo=
re advanced, example
demonstrates returning conditionally inside a <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#for-loop">for loop</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">One Return Value</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">ret</span><span class=3D"=
p">} =3D    </span><span class=3D"nf">Return One Value</span><span class=3D=
"p">  </span><span class=3D"s">argument</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Some Keyword</span><span cl=
ass=3D"p">    ${</span><span class=3D"nv">ret</span><span class=3D"p">}</sp=
an>

<span class=3D"gu">Advanced</span><span class=3D"p"></span>
<span class=3D"p">    @{</span><span class=3D"nv">list</span><span class=3D=
"p">} =3D    </span><span class=3D"nf">Create List</span><span class=3D"p">=
    </span><span class=3D"s">foo</span><span class=3D"p">    </span><span c=
lass=3D"s">baz</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">index</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Find Index</span><span class=3D"p=
">    </span><span class=3D"s">baz</span><span class=3D"p">    @{</span><sp=
an class=3D"nv">list</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">=
}    ${</span><span class=3D"nv">1</span><span class=3D"p">}</span>
<span class=3D"p">    ${</span><span class=3D"nv">index</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Find Index</span><span class=3D"p=
">    </span><span class=3D"s">non existing</span><span class=3D"p">    @{<=
/span><span class=3D"nv">list</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">=
}    ${</span><span class=3D"nv">-1</span><span class=3D"p">}</span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">Return One Value</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">arg</span><span class=3D"p">}</spa=
n>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p">    ${</span><span class=3D"nv">arg</span><span class=3D"p">}</sp=
an>
<span class=3D"p">    ${</span><span class=3D"nv">value</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Get Some Value</span><span class=
=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Return From Keyword</span><=
span class=3D"p">    ${</span><span class=3D"nv">value</span><span class=3D=
"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Fail</span><span class=3D"p=
">    </span><span class=3D"s">This is not executed</span><span class=3D"p"=
></span>

<span class=3D"gu">Find Index</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">element</span><span class=3D"p">} =
   @{</span><span class=3D"nv">items</span><span class=3D"p">}</span>
<span class=3D"p">    ${</span><span class=3D"nv">index</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Set Variable</span><span class=3D=
"p">    ${</span><span class=3D"nv">0</span><span class=3D"p">}</span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">item</span><span c=
lass=3D"p">}    IN    @{</span><span class=3D"nv">items</span><span class=
=3D"p">}</span>
<span class=3D"p">        </span><span class=3D"nf">Return From Keyword If<=
/span><span class=3D"p">    </span><span class=3D"s">'</span><span class=3D=
"p">${</span><span class=3D"nv">item</span><span class=3D"p">}</span><span =
class=3D"s">' =3D=3D '</span><span class=3D"p">${</span><span class=3D"nv">=
element</span><span class=3D"p">}</span><span class=3D"s">'</span><span cla=
ss=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">}</s=
pan>
<span class=3D"p">        ${</span><span class=3D"nv">index</span><span cla=
ss=3D"p">} =3D    </span><span class=3D"nf">Set Variable</span><span class=
=3D"p">    ${</span><span class=3D"nv">index + 1</span><span class=3D"p">}<=
/span>
<span class=3D"p">    END</span>
<span class=3D"p">    </span><span class=3D"nf">Return From Keyword</span><=
span class=3D"p">    ${</span><span class=3D"nv">-1</span><span class=3D"p"=
>}    </span><span class=3D"c"># Could also use [Return]</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"user-keyword-teardown">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id616">2.7.7&nbsp;&nbsp;&nbsp;User k=
eyword teardown</a></h3>
<p>User keywords may have a teardown defined using <span class=3D"setting">=
[Teardown]</span> setting.</p>
<p>Keyword teardown works much in the same way as a <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#test-setup-and-teardown">test case
teardown</a>.  Most importantly, the teardown is always a single
keyword, although it can be another user keyword, and it gets executed
also when the user keyword fails. In addition, all steps of the
teardown are executed even if one of them fails. However, a failure in
keyword teardown will fail the test case and subsequent steps in the
test are not run. The name of the keyword to be executed as a teardown
can also be a variable.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">With Teardown</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Teardown</span><span class=
=3D"p">]    </span><span class=3D"nf">Log</span><span class=3D"p">    </spa=
n><span class=3D"s">keyword teardown</span><span class=3D"p"></span>

<span class=3D"gu">Using variables</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Teardown given as variable</span>=
<span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Teardown</span><span class=
=3D"p">]    ${</span><span class=3D"nv">TEARDOWN</span><span class=3D"p">}<=
/span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"resource-and-variable-files">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id511">2.8&nbsp;&nbsp;&nbsp;Resource=
 and variable files</a></h2>
<p>User keywords and variables in <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#test-case-files">test case files</a> and <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#initialization-files">test suite
initialization files</a> can only be used in files where they are
created, but <em>resource files</em> provide a mechanism for sharing them. =
Since
the resource file structure is very close to test case files, it is
easy to create them.</p>
<p><em>Variable files</em> provide a powerful mechanism for creating and sh=
aring
variables. For example, they allow values other than strings and
enable creating variables dynamically. Their flexibility comes from
the fact that they are created using Python code, which also makes
them somewhat more complicated than <a class=3D"reference internal" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#variable-table">Variable tables</a>.</p>
<div class=3D"contents local topic" id=3D"id152">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#resource-files" id=3D"id617">=
2.8.1&nbsp;&nbsp;&nbsp;Resource files</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#taking-resource-files-into-us=
e" id=3D"id618">Taking resource files into use</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#resource-file-structure" id=
=3D"id619">Resource file structure</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#documenting-resource-files" i=
d=3D"id620">Documenting resource files</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#example-resource-file" id=3D"=
id621">Example resource file</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variable-files" id=3D"id622">=
2.8.2&nbsp;&nbsp;&nbsp;Variable files</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#taking-variable-files-into-us=
e" id=3D"id623">Taking variable files into use</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-variables-directly" =
id=3D"id624">Creating variables directly</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-variables-from-a-spec=
ial-function" id=3D"id625">Getting variables from a special function</a></l=
i>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#implementing-variable-file-as=
-python-or-java-class" id=3D"id626">Implementing variable file as Python or=
 Java class</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variable-file-as-yaml" id=3D"=
id627">Variable file as YAML</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"resource-files">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id617">2.8.1&nbsp;&nbsp;&nbsp;Resour=
ce files</a></h3>
<div class=3D"section" id=3D"taking-resource-files-into-use">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id618">Taking resource files into us=
e</a></h4>
<p>Resource files are imported using the <span class=3D"setting">Resource</=
span> setting in the
Settings table. The path to the resource file is given in the cell
after the setting name.</p>
<p>If the path is given in an absolute format, it is used directly. In othe=
r
cases, the resource file is first searched relatively to the directory
where the importing file is located. If the file is not found there,
it is then searched from the directories in Python's <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#module-search-path">module search path</a>.
The path can contain variables, and it is recommended to use them to make p=
aths
system-independent (for example, <span class=3D"file">${RESOURCES}/login_re=
sources.robot</span> or
<span class=3D"file">${RESOURCE_PATH}</span>). Additionally, forward slashe=
s (<code>/</code>) in the path
are automatically changed to backslashes (<span class=3D"codesc">\</span>) =
on Windows.</p>
<p>Resource files can use all the same extensions as test case files create=
d
using the <a class=3D"reference internal" href=3D"http://robotframework.org=
/robotframework/latest/RobotFrameworkUserGuide.html#supported-file-formats"=
>supported file formats</a>. When using the <a class=3D"reference internal"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#plain-text-format">plain text format</a>,
it is possible to use a special <span class=3D"file">.resource</span> exten=
sion in addition
to the normal <span class=3D"file">.robot</span> extensions. This makes it =
easier to separate
test case files and resource files from each others.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Resource</span><span class=3D"p">    </span><span class=
=3D"nn">example.resource</span><span class=3D"p"></span>
<span class=3D"kn">Resource</span><span class=3D"p">    </span><span class=
=3D"nn">../data/resources.robot</span><span class=3D"p"></span>
<span class=3D"kn">Resource</span><span class=3D"p">    ${</span><span clas=
s=3D"nv">RESOURCES</span><span class=3D"p">}</span><span class=3D"nn">/comm=
on.resource</span><span class=3D"p"></span>
</pre></div>
<p>The user keywords and variables defined in a resource file are
available in the file that takes that resource file into
use. Similarly available are also all keywords and variables from the
libraries, resource files and variable files imported by the said
resource file.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The <span class=3D"file">.resource</span> extension is ne=
w in Robot Framework 3.1.</p>
</div>
</div>
<div class=3D"section" id=3D"resource-file-structure">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id619">Resource file structure</a></=
h4>
<p>The higher-level structure of resource files is the same as that of
test case files otherwise, but, of course, they cannot contain Test
Case tables. Additionally, the Setting table in resource files can
contain only import settings (<span class=3D"setting">Library</span>, <span=
 class=3D"setting">Resource</span>,
<span class=3D"setting">Variables</span>) and <span class=3D"setting">Docum=
entation</span>. The Variable table and
Keyword table are used exactly the same way as in test case files.</p>
<p>If several resource files have a user keyword with the same name, they
must be used so that the <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#handling=
-keywords-with-same-names">keyword name is prefixed with the resource
file name</a> without the extension (for example, <span class=3D"name">myre=
sources.Some
Keyword</span> and <span class=3D"name">common.Some Keyword</span>). Moreov=
er, if several resource
files contain the same variable, the one that is imported first is
taken into use.</p>
</div>
<div class=3D"section" id=3D"documenting-resource-files">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id620">Documenting resource files</a=
></h4>
<p>Keywords created in a resource file can be <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#user-keyword-name-and-documentation">documented</a> using
<span class=3D"setting">[Documentation]</span> setting. The resource file i=
tself can have
<span class=3D"setting">Documentation</span> in the Setting table similarly=
 as
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#test-suite-name-and-documentation=
">test suites</a>.</p>
<p>Both <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#libdoc">Libdoc</a> and <a=
 class=3D"reference external" href=3D"https://github.com/robotframework/RID=
E">RIDE</a> use these documentations, and they
are naturally available for anyone opening resource files.  The
first logical line of the documentation of a keyword, until the first
empty line, is logged when the keyword is run, but otherwise resource
file documentation is ignored during the test execution.</p>
</div>
<div class=3D"section" id=3D"example-resource-file">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id621">Example resource file</a></h4=
>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Documentation</span><span class=3D"p">     </span><span =
class=3D"s">An example resource file</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">           </span><span =
class=3D"nn">SeleniumLibrary</span><span class=3D"p"></span>
<span class=3D"kn">Resource</span><span class=3D"p">          ${</span><spa=
n class=3D"nv">RESOURCES</span><span class=3D"p">}</span><span class=3D"nn"=
>/common.resource</span><span class=3D"p"></span>

<span class=3D"gh">*** Variables ***</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">HOST</span><span class=3D"p">=
}           </span><span class=3D"s">localhost:7272</span><span class=3D"p"=
></span>
<span class=3D"p">${</span><span class=3D"nv">LOGIN URL</span><span class=
=3D"p">}      </span><span class=3D"s">http://</span><span class=3D"p">${</=
span><span class=3D"nv">HOST</span><span class=3D"p">}</span><span class=3D=
"s">/</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">WELCOME URL</span><span class=
=3D"p">}    </span><span class=3D"s">http://</span><span class=3D"p">${</sp=
an><span class=3D"nv">HOST</span><span class=3D"p">}</span><span class=3D"s=
">/welcome.html</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">BROWSER</span><span class=3D"=
p">}        </span><span class=3D"s">Firefox</span><span class=3D"p"></span=
>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">Open Login Page</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Opens browser to login page</span=
><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Open Browser</span><span cl=
ass=3D"p">    ${</span><span class=3D"nv">LOGIN URL</span><span class=3D"p"=
>}    ${</span><span class=3D"nv">BROWSER</span><span class=3D"p">}</span>
<span class=3D"p">    </span><span class=3D"nf">Title Should Be</span><span=
 class=3D"p">    </span><span class=3D"s">Login Page</span><span class=3D"p=
"></span>

<span class=3D"gu">Input Name</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">name</span><span class=3D"p">}</sp=
an>
<span class=3D"p">    </span><span class=3D"nf">Input Text</span><span clas=
s=3D"p">    </span><span class=3D"s">username_field</span><span class=3D"p"=
>    ${</span><span class=3D"nv">name</span><span class=3D"p">}</span>

<span class=3D"gu">Input Password</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">password</span><span class=3D"p">}=
</span>
<span class=3D"p">    </span><span class=3D"nf">Input Text</span><span clas=
s=3D"p">    </span><span class=3D"s">password_field</span><span class=3D"p"=
>    ${</span><span class=3D"nv">password</span><span class=3D"p">}</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"variable-files">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id622">2.8.2&nbsp;&nbsp;&nbsp;Variab=
le files</a></h3>
<p>Variable files contain <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#variabl=
es">variables</a> that can be used in the test
data. Variables can also be created using variable tables or set from
the command line, but variable files allow creating them dynamically
and their variables can contain any objects.</p>
<p>Variable files are typically implemented as Python modules and there are
two different approaches for creating variables:</p>
<dl class=3D"docutils">
<dt><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-variables-directly">=
Creating variables directly</a></dt>
<dd>Variables are specified as module attributes. In simple cases, the
syntax is so simple that no real programming is needed. For example,
<code>MY_VAR =3D 'my value'</code> creates a variable
<code>${MY_VAR}</code> with the specified text as the value.</dd>
<dt><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-variables-from-a-spec=
ial-function">Getting variables from a special function</a></dt>
<dd>Variable files can have a special <code>get_variables</code>
(or <code>getVariables</code>) method that returns variables as a mapping.
Because the method can take arguments this approach is very flexible.</dd>
</dl>
<p>Alternatively variable files can be implemented as <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#implementing-variable-file-as-python-or-java-class">Py=
thon or Java classes</a>
that the framework will instantiate. Also in this case it is possible to cr=
eate
variables as attributes or get them from a special method.</p>
<div class=3D"section" id=3D"taking-variable-files-into-use">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id623">Taking variable files into us=
e</a></h4>
<div class=3D"section" id=3D"setting-table">
<h5>Setting table</h5>
<p>All test data files can import variables using the
<span class=3D"setting">Variables</span> setting in the Setting table, in t=
he same way as
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#taking-resource-files-into-use">r=
esource files are imported</a> using the <span class=3D"setting">Resource</=
span>
setting. Similarly to resource files, the path to the imported
variable file is considered relative to the directory where the
importing file is, and if not found, it is searched from the
directories in the <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-=
path">module search path</a>. The path can also contain variables,
and slashes are converted to backslashes on Windows. If an <a class=3D"refe=
rence internal" href=3D"http://robotframework.org/robotframework/latest/Rob=
otFrameworkUserGuide.html#getting-variables-from-a-special-function">argume=
nt file takes
arguments</a>, they are specified in the cells after the path and also they
can contain variables.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Variables</span><span class=3D"p">    </span><span class=
=3D"nn">myvariables.py</span><span class=3D"p"></span>
<span class=3D"kn">Variables</span><span class=3D"p">    </span><span class=
=3D"nn">../data/variables.py</span><span class=3D"p"></span>
<span class=3D"kn">Variables</span><span class=3D"p">    ${</span><span cla=
ss=3D"nv">RESOURCES</span><span class=3D"p">}</span><span class=3D"nn">/com=
mon.py</span><span class=3D"p"></span>
<span class=3D"kn">Variables</span><span class=3D"p">    </span><span class=
=3D"nn">taking_arguments.py</span><span class=3D"p">    </span><span class=
=3D"s">arg1</span><span class=3D"p">    ${</span><span class=3D"nv">ARG2</s=
pan><span class=3D"p">}</span>
</pre></div>
<p>All variables from a variable file are available in the test data file
that imports it. If several variable files are imported and they
contain a variable with the same name, the one in the earliest imported fil=
e is
taken into use. Additionally, variables created in Variable tables and
set from the command line override variables from variable files.</p>
</div>
<div class=3D"section" id=3D"command-line">
<h5>Command line</h5>
<p>Another way to take variable files into use is using the command line op=
tion
<span class=3D"option">--variablefile</span>. Variable files are referenced=
 using a path to them,
and possible arguments are joined to the path with a colon (<code>:</code>)=
:</p>
<pre class=3D"literal-block">--variablefile myvariables.py
--variablefile path/variables.py
--variablefile /absolute/path/common.py
--variablefile taking_arguments.py:arg1:arg2
</pre>
<p>Variable files taken into use from the
command line are also searched from the <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#module-search-path">module search path</a> similarly as
variable files imported in the Setting table.</p>
<p>If a variable file is given as an absolute Windows path, the colon after=
 the
drive letter is not considered a separator:</p>
<pre class=3D"literal-block">--variablefile C:\path\variables.py
</pre>
<p>It is also possible to use a semicolon
(<code>;</code>) as an argument separator. This is useful if variable file =
arguments
themselves contain colons, but requires surrounding the whole value with
quotes on UNIX-like operating systems:</p>
<pre class=3D"literal-block">--variablefile "myvariables.py;argument:with:c=
olons"
--variablefile C:\path\variables.py;D:\data.xls
</pre>
<p>Variables in these variable files are globally available in all test dat=
a
files, similarly as <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-varia=
bles-in-command-line">individual variables</a> set with the
<span class=3D"option">--variable</span> option. If both <span class=3D"opt=
ion">--variablefile</span> and
<span class=3D"option">--variable</span> options are used and there are var=
iables with same
names, those that are set individually with
<span class=3D"option">--variable</span> option take precedence.</p>
</div>
</div>
<div class=3D"section" id=3D"creating-variables-directly">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id624">Creating variables directly</=
a></h4>
<div class=3D"section" id=3D"id160">
<h5>Basic syntax</h5>
<p>When variable files are taken into use, they are imported as Python
modules and all their global attributes that do not start with an
underscore (<code>_</code>) are considered to be variables. Because variabl=
e
names are case-insensitive, both lower- and upper-case names are
possible, but in general, capital letters are recommended for global
variables and attributes.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"n">VARIABLE</span=
> <span class=3D"o">=3D</span> <span class=3D"s2">"An example string"</span=
>
<span class=3D"n">ANOTHER_VARIABLE</span> <span class=3D"o">=3D</span> <spa=
n class=3D"s2">"This is pretty easy!"</span>
<span class=3D"n">INTEGER</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">42</span>
<span class=3D"n">STRINGS</span> <span class=3D"o">=3D</span> <span class=
=3D"p">[</span><span class=3D"s2">"one"</span><span class=3D"p">,</span> <s=
pan class=3D"s2">"two"</span><span class=3D"p">,</span> <span class=3D"s2">=
"kolme"</span><span class=3D"p">,</span> <span class=3D"s2">"four"</span><s=
pan class=3D"p">]</span>
<span class=3D"n">NUMBERS</span> <span class=3D"o">=3D</span> <span class=
=3D"p">[</span><span class=3D"mi">1</span><span class=3D"p">,</span> <span =
class=3D"n">INTEGER</span><span class=3D"p">,</span> <span class=3D"mf">3.1=
4</span><span class=3D"p">]</span>
<span class=3D"n">MAPPING</span> <span class=3D"o">=3D</span> <span class=
=3D"p">{</span><span class=3D"s2">"one"</span><span class=3D"p">:</span> <s=
pan class=3D"mi">1</span><span class=3D"p">,</span> <span class=3D"s2">"two=
"</span><span class=3D"p">:</span> <span class=3D"mi">2</span><span class=
=3D"p">,</span> <span class=3D"s2">"three"</span><span class=3D"p">:</span>=
 <span class=3D"mi">3</span><span class=3D"p">}</span>
</pre></div>
<p>In the example above, variables <code>${VARIABLE}</code>, <code>${ANOTHE=
R VARIABLE}</code>, and
so on, are created. The first two variables are strings, the third one is
an integer, then there are two lists, and the final value is a dictionary.
All these variables can be used as a <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#scalar-variable">scalar variable</a>, lists and the
dictionary also a <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#list-variable">=
list variable</a> like <code>@{STRINGS}</code> (in the dictionary's case
that variable would only contain keys), and the dictionary also as a
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#dictionary-variable">dictionary v=
ariable</a> like <code>&amp;{MAPPING}</code>.</p>
<p>To make creating a list variable or a dictionary variable more explicit,
it is possible to prefix the variable name with <code>LIST__</code> or <cod=
e>DICT__</code>,
respectively:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">collections</span> <span class=3D"kn">import</span> <span=
 class=3D"n">OrderedDict</span>

<span class=3D"n">LIST__ANIMALS</span> <span class=3D"o">=3D</span> <span c=
lass=3D"p">[</span><span class=3D"s2">"cat"</span><span class=3D"p">,</span=
> <span class=3D"s2">"dog"</span><span class=3D"p">]</span>
<span class=3D"n">DICT__FINNISH</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">OrderedDict</span><span class=3D"p">([(</span><span class=3D"s2"=
>"cat"</span><span class=3D"p">,</span> <span class=3D"s2">"kissa"</span><s=
pan class=3D"p">),</span> <span class=3D"p">(</span><span class=3D"s2">"dog=
"</span><span class=3D"p">,</span> <span class=3D"s2">"koira"</span><span c=
lass=3D"p">)])</span>
</pre></div>
<p>These prefixes will not be part of the final variable name, but they cau=
se
Robot Framework to validate that the value actually is list-like or
dictionary-like. With dictionaries the actual stored value is also turned
into a special dictionary that is used also when <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#creating-dictionary-variables">creating dictionary
variables</a> in the Variable table. Values of these dictionaries are acces=
sible
as attributes like <code>${FINNISH.cat}</code>. These dictionaries are also=
 ordered, but
preserving the source order requires also the original dictionary to be
ordered.</p>
<p>The variables in both the examples above could be created also using the
Variable table below.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Variables=
 ***</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">VARIABLE</span><span class=3D=
"p">}            </span><span class=3D"s">An example string</span><span cla=
ss=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">ANOTHER VARIABLE</span><span =
class=3D"p">}    </span><span class=3D"s">This is pretty easy!</span><span =
class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">INTEGER</span><span class=3D"=
p">}             ${</span><span class=3D"nv">42</span><span class=3D"p">}</=
span>
<span class=3D"p">@{</span><span class=3D"nv">STRINGS</span><span class=3D"=
p">}             </span><span class=3D"s">one</span><span class=3D"p">     =
     </span><span class=3D"s">two</span><span class=3D"p">           </span=
><span class=3D"s">kolme</span><span class=3D"p">         </span><span clas=
s=3D"s">four</span><span class=3D"p"></span>
<span class=3D"p">@{</span><span class=3D"nv">NUMBERS</span><span class=3D"=
p">}             ${</span><span class=3D"nv">1</span><span class=3D"p">}   =
      ${</span><span class=3D"nv">INTEGER</span><span class=3D"p">}    ${</=
span><span class=3D"nv">3.14</span><span class=3D"p">}</span>
<span class=3D"p">&amp;{</span><span class=3D"nv">MAPPING</span><span class=
=3D"p">}             </span><span class=3D"s">one=3D</span><span class=3D"p=
">${</span><span class=3D"nv">1</span><span class=3D"p">}     </span><span =
class=3D"s">two=3D</span><span class=3D"p">${</span><span class=3D"nv">2</s=
pan><span class=3D"p">}      </span><span class=3D"s">three=3D</span><span =
class=3D"p">${</span><span class=3D"nv">3</span><span class=3D"p">}</span>
<span class=3D"p">@{</span><span class=3D"nv">ANIMALS</span><span class=3D"=
p">}             </span><span class=3D"s">cat</span><span class=3D"p">     =
     </span><span class=3D"s">dog</span><span class=3D"p"></span>
<span class=3D"p">&amp;{</span><span class=3D"nv">FINNISH</span><span class=
=3D"p">}             </span><span class=3D"s">cat=3Dkissa</span><span class=
=3D"p">    </span><span class=3D"s">dog=3Dkoira</span><span class=3D"p"></s=
pan>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Variables are not replaced in strings got from variable f=
iles.
For example, <code>VAR =3D "an ${example}"</code> would create
variable <code>${VAR}</code> with a literal string value
<code>an ${example}</code> regardless would variable <code>${example}</code=
>
exist or not.</p>
</div>
</div>
<div class=3D"section" id=3D"using-objects-as-values">
<h5>Using objects as values</h5>
<p>Variables in variable files are not limited to having only strings or
other base types as values like variable tables. Instead, their
variables can contain any objects. In the example below, the variable
<code>${MAPPING}</code> contains a Java Hashtable with two values (this
example works only when running tests on Jython).</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">java.util</span> <span class=3D"kn">import</span> <span c=
lass=3D"n">Hashtable</span>

<span class=3D"n">MAPPING</span> <span class=3D"o">=3D</span> <span class=
=3D"n">Hashtable</span><span class=3D"p">()</span>
<span class=3D"n">MAPPING</span><span class=3D"o">.</span><span class=3D"n"=
>put</span><span class=3D"p">(</span><span class=3D"s2">"one"</span><span c=
lass=3D"p">,</span> <span class=3D"mi">1</span><span class=3D"p">)</span>
<span class=3D"n">MAPPING</span><span class=3D"o">.</span><span class=3D"n"=
>put</span><span class=3D"p">(</span><span class=3D"s2">"two"</span><span c=
lass=3D"p">,</span> <span class=3D"mi">2</span><span class=3D"p">)</span>
</pre></div>
<p>The second example creates <code>${MAPPING}</code> as a Python dictionar=
y
and also has two variables created from a custom object implemented in
the same file.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"n">MAPPING</span>=
 <span class=3D"o">=3D</span> <span class=3D"p">{</span><span class=3D"s1">=
'one'</span><span class=3D"p">:</span> <span class=3D"mi">1</span><span cla=
ss=3D"p">,</span> <span class=3D"s1">'two'</span><span class=3D"p">:</span>=
 <span class=3D"mi">2</span><span class=3D"p">}</span>

<span class=3D"k">class</span> <span class=3D"nc">MyObject</span><span clas=
s=3D"p">:</span>
    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">name</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">name</span> <span class=3D"o">=3D</span> <span class=3D"n">name</spa=
n>

<span class=3D"n">OBJ1</span> <span class=3D"o">=3D</span> <span class=3D"n=
">MyObject</span><span class=3D"p">(</span><span class=3D"s1">'John'</span>=
<span class=3D"p">)</span>
<span class=3D"n">OBJ2</span> <span class=3D"o">=3D</span> <span class=3D"n=
">MyObject</span><span class=3D"p">(</span><span class=3D"s1">'Jane'</span>=
<span class=3D"p">)</span>
</pre></div>
</div>
<div class=3D"section" id=3D"creating-variables-dynamically">
<h5>Creating variables dynamically</h5>
<p>Because variable files are created using a real programming language,
they can have dynamic logic for setting variables.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">os</span>
<span class=3D"kn">import</span> <span class=3D"nn">random</span>
<span class=3D"kn">import</span> <span class=3D"nn">time</span>

<span class=3D"n">USER</span> <span class=3D"o">=3D</span> <span class=3D"n=
">os</span><span class=3D"o">.</span><span class=3D"n">getlogin</span><span=
 class=3D"p">()</span>                <span class=3D"c1"># current login na=
me</span>
<span class=3D"n">RANDOM_INT</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">random</span><span class=3D"o">.</span><span class=3D"n">randint</s=
pan><span class=3D"p">(</span><span class=3D"mi">0</span><span class=3D"p">=
,</span> <span class=3D"mi">10</span><span class=3D"p">)</span>  <span clas=
s=3D"c1"># random integer in range [0,10]</span>
<span class=3D"n">CURRENT_TIME</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">time</span><span class=3D"o">.</span><span class=3D"n">asctime</s=
pan><span class=3D"p">()</span>       <span class=3D"c1"># timestamp like '=
Thu Apr  6 12:45:21 2006'</span>
<span class=3D"k">if</span> <span class=3D"n">time</span><span class=3D"o">=
.</span><span class=3D"n">localtime</span><span class=3D"p">()[</span><span=
 class=3D"mi">3</span><span class=3D"p">]</span> <span class=3D"o">&gt;</sp=
an> <span class=3D"mi">12</span><span class=3D"p">:</span>
    <span class=3D"n">AFTERNOON</span> <span class=3D"o">=3D</span> <span c=
lass=3D"bp">True</span>
<span class=3D"k">else</span><span class=3D"p">:</span>
    <span class=3D"n">AFTERNOON</span> <span class=3D"o">=3D</span> <span c=
lass=3D"bp">False</span>
</pre></div>
<p>The example above uses standard Python libraries to set different
variables, but you can use your own code to construct the values. The
example below illustrates the concept, but similarly, your code could
read the data from a database, from an external file or even ask it from
the user.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">math</span>

<span class=3D"k">def</span> <span class=3D"nf">get_area</span><span class=
=3D"p">(</span><span class=3D"n">diameter</span><span class=3D"p">):</span>
    <span class=3D"n">radius</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">diameter</span> <span class=3D"o">/</span> <span class=3D"mi">2</sp=
an>
    <span class=3D"n">area</span> <span class=3D"o">=3D</span> <span class=
=3D"n">math</span><span class=3D"o">.</span><span class=3D"n">pi</span> <sp=
an class=3D"o">*</span> <span class=3D"n">radius</span> <span class=3D"o">*=
</span> <span class=3D"n">radius</span>
    <span class=3D"k">return</span> <span class=3D"n">area</span>

<span class=3D"n">AREA1</span> <span class=3D"o">=3D</span> <span class=3D"=
n">get_area</span><span class=3D"p">(</span><span class=3D"mi">1</span><spa=
n class=3D"p">)</span>
<span class=3D"n">AREA2</span> <span class=3D"o">=3D</span> <span class=3D"=
n">get_area</span><span class=3D"p">(</span><span class=3D"mi">2</span><spa=
n class=3D"p">)</span>
</pre></div>
</div>
<div class=3D"section" id=3D"selecting-which-variables-to-include">
<h5>Selecting which variables to include</h5>
<p>When Robot Framework processes variable files, all their attributes
that do not start with an underscore are expected to be
variables. This means that even functions or classes created in the
variable file or imported from elsewhere are considered variables. For
example, the last example would contain the variables <code>${math}</code>
and <code>${get_area}</code> in addition to <code>${AREA1}</code> and
<code>${AREA2}</code>.</p>
<p>Normally the extra variables do not cause problems, but they
could override some other variables and cause hard-to-debug
errors. One possibility to ignore other attributes is prefixing them
with an underscore:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">math</span> <span class=3D"kn">as</span> <span class=3D=
"nn">_math</span>

<span class=3D"k">def</span> <span class=3D"nf">_get_area</span><span class=
=3D"p">(</span><span class=3D"n">diameter</span><span class=3D"p">):</span>
    <span class=3D"n">radius</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">diameter</span> <span class=3D"o">/</span> <span class=3D"mf">2.0</=
span>
    <span class=3D"n">area</span> <span class=3D"o">=3D</span> <span class=
=3D"n">_math</span><span class=3D"o">.</span><span class=3D"n">pi</span> <s=
pan class=3D"o">*</span> <span class=3D"n">radius</span> <span class=3D"o">=
*</span> <span class=3D"n">radius</span>
    <span class=3D"k">return</span> <span class=3D"n">area</span>

<span class=3D"n">AREA1</span> <span class=3D"o">=3D</span> <span class=3D"=
n">_get_area</span><span class=3D"p">(</span><span class=3D"mi">1</span><sp=
an class=3D"p">)</span>
<span class=3D"n">AREA2</span> <span class=3D"o">=3D</span> <span class=3D"=
n">_get_area</span><span class=3D"p">(</span><span class=3D"mi">2</span><sp=
an class=3D"p">)</span>
</pre></div>
<p>If there is a large number of other attributes, instead of prefixing
them all, it is often easier to use a special attribute
<code>__all__</code> and give it a list of attribute names to be processed
as variables.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">math</span>

<span class=3D"n">__all__</span> <span class=3D"o">=3D</span> <span class=
=3D"p">[</span><span class=3D"s1">'AREA1'</span><span class=3D"p">,</span> =
<span class=3D"s1">'AREA2'</span><span class=3D"p">]</span>

<span class=3D"k">def</span> <span class=3D"nf">get_area</span><span class=
=3D"p">(</span><span class=3D"n">diameter</span><span class=3D"p">):</span>
    <span class=3D"n">radius</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">diameter</span> <span class=3D"o">/</span> <span class=3D"mf">2.0</=
span>
    <span class=3D"n">area</span> <span class=3D"o">=3D</span> <span class=
=3D"n">math</span><span class=3D"o">.</span><span class=3D"n">pi</span> <sp=
an class=3D"o">*</span> <span class=3D"n">radius</span> <span class=3D"o">*=
</span> <span class=3D"n">radius</span>
    <span class=3D"k">return</span> <span class=3D"n">area</span>

<span class=3D"n">AREA1</span> <span class=3D"o">=3D</span> <span class=3D"=
n">get_area</span><span class=3D"p">(</span><span class=3D"mi">1</span><spa=
n class=3D"p">)</span>
<span class=3D"n">AREA2</span> <span class=3D"o">=3D</span> <span class=3D"=
n">get_area</span><span class=3D"p">(</span><span class=3D"mi">2</span><spa=
n class=3D"p">)</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The <code>__all__</code> attribute is also, and originall=
y, used
by Python to decide which attributes to import
when using the syntax <code>from modulename import *</code>.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"getting-variables-from-a-special-function">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id625">Getting variables from a spec=
ial function</a></h4>
<p>An alternative approach for getting variables is having a special
<code>get_variables</code> function (also camelCase syntax
<code>getVariables</code> is possible) in a variable file. If such a functi=
on
exists, Robot Framework calls it and expects to receive variables as
a Python dictionary or a Java <code>Map</code> with variable names as keys
and variable values as values. Created variables can be used as scalars,
lists, and dictionaries exactly like when <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#creating-variables-directly">creating variables directly</a>,
and it is possible to use <code>LIST__</code> and <code>DICT__</code> prefi=
xes to make creating
list and dictionary variables more explicit. The example below is functiona=
lly
identical to the first <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-v=
ariables-directly">creating variables directly</a> example.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">get_variables</span><span class=3D"p">():</span>
    <span class=3D"n">variables</span> <span class=3D"o">=3D</span> <span c=
lass=3D"p">{</span><span class=3D"s2">"VARIABLE "</span><span class=3D"p">:=
</span> <span class=3D"s2">"An example string"</span><span class=3D"p">,</s=
pan>
                 <span class=3D"s2">"ANOTHER VARIABLE"</span><span class=3D=
"p">:</span> <span class=3D"s2">"This is pretty easy!"</span><span class=3D=
"p">,</span>
                 <span class=3D"s2">"INTEGER"</span><span class=3D"p">:</sp=
an> <span class=3D"mi">42</span><span class=3D"p">,</span>
                 <span class=3D"s2">"STRINGS"</span><span class=3D"p">:</sp=
an> <span class=3D"p">[</span><span class=3D"s2">"one"</span><span class=3D=
"p">,</span> <span class=3D"s2">"two"</span><span class=3D"p">,</span> <spa=
n class=3D"s2">"kolme"</span><span class=3D"p">,</span> <span class=3D"s2">=
"four"</span><span class=3D"p">],</span>
                 <span class=3D"s2">"NUMBERS"</span><span class=3D"p">:</sp=
an> <span class=3D"p">[</span><span class=3D"mi">1</span><span class=3D"p">=
,</span> <span class=3D"mi">42</span><span class=3D"p">,</span> <span class=
=3D"mf">3.14</span><span class=3D"p">],</span>
                 <span class=3D"s2">"MAPPING"</span><span class=3D"p">:</sp=
an> <span class=3D"p">{</span><span class=3D"s2">"one"</span><span class=3D=
"p">:</span> <span class=3D"mi">1</span><span class=3D"p">,</span> <span cl=
ass=3D"s2">"two"</span><span class=3D"p">:</span> <span class=3D"mi">2</spa=
n><span class=3D"p">,</span> <span class=3D"s2">"three"</span><span class=
=3D"p">:</span> <span class=3D"mi">3</span><span class=3D"p">}}</span>
    <span class=3D"k">return</span> <span class=3D"n">variables</span>
</pre></div>
<p><code>get_variables</code> can also take arguments, which facilitates ch=
anging
what variables actually are created. Arguments to the function are set just
as any other arguments for a Python function. When <a class=3D"reference in=
ternal" href=3D"http://robotframework.org/robotframework/latest/RobotFramew=
orkUserGuide.html#taking-variable-files-into-use">taking variable files
into use</a> in the test data, arguments are specified in cells after the p=
ath
to the variable file, and in the command line they are separated from the
path with a colon or a semicolon.</p>
<p>The dummy example below shows how to use arguments with variable files. =
In a
more realistic example, the argument could be a path to an external text fi=
le
or database where to read variables from.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"n">variables1</sp=
an> <span class=3D"o">=3D</span> <span class=3D"p">{</span><span class=3D"s=
1">'scalar'</span><span class=3D"p">:</span> <span class=3D"s1">'Scalar var=
iable'</span><span class=3D"p">,</span>
              <span class=3D"s1">'LIST__list'</span><span class=3D"p">:</sp=
an> <span class=3D"p">[</span><span class=3D"s1">'List'</span><span class=
=3D"p">,</span><span class=3D"s1">'variable'</span><span class=3D"p">]}</sp=
an>
<span class=3D"n">variables2</span> <span class=3D"o">=3D</span> <span clas=
s=3D"p">{</span><span class=3D"s1">'scalar'</span> <span class=3D"p">:</spa=
n> <span class=3D"s1">'Some other value'</span><span class=3D"p">,</span>
              <span class=3D"s1">'LIST__list'</span><span class=3D"p">:</sp=
an> <span class=3D"p">[</span><span class=3D"s1">'Some'</span><span class=
=3D"p">,</span><span class=3D"s1">'other'</span><span class=3D"p">,</span><=
span class=3D"s1">'value'</span><span class=3D"p">],</span>
              <span class=3D"s1">'extra'</span><span class=3D"p">:</span> <=
span class=3D"s1">'variables1 does not have this at all'</span><span class=
=3D"p">}</span>

<span class=3D"k">def</span> <span class=3D"nf">get_variables</span><span c=
lass=3D"p">(</span><span class=3D"n">arg</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">arg</span> <span class=3D=
"o">=3D=3D</span> <span class=3D"s1">'one'</span><span class=3D"p">:</span>
        <span class=3D"k">return</span> <span class=3D"n">variables1</span>
    <span class=3D"k">else</span><span class=3D"p">:</span>
        <span class=3D"k">return</span> <span class=3D"n">variables2</span>
</pre></div>
</div>
<div class=3D"section" id=3D"implementing-variable-file-as-python-or-java-c=
lass">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id626">Implementing variable file as=
 Python or Java class</a></h4>
<p>It is possible to implement variables files also as Python or Java class=
es.</p>
<div class=3D"section" id=3D"implementation">
<h5>Implementation</h5>
<p>Because variable files are always imported using a file system path, cre=
ating
them as classes has some restrictions:</p>
<blockquote>
<ul class=3D"simple">
<li>Python classes must have the same name as the module they are located.<=
/li>
<li>Java classes must live in the default package.</li>
<li>Paths to Java classes must end with either <span class=3D"file">.java</=
span> or <span class=3D"file">.class</span>.
The class file must exists in both cases.</li>
</ul>
</blockquote>
<p>Regardless the implementation language, the framework will create an ins=
tance
of the class using no arguments and variables will be gotten from the insta=
nce.
Similarly as with modules, variables can be defined as attributes directly
in the instance or gotten from a special <code>get_variables</code>
(or <code>getVariables</code>) method.</p>
<p>When variables are defined directly in an instance, all attributes conta=
ining
callable values are ignored to avoid creating variables from possible metho=
ds
the instance has. If you would actually need callable variables, you need
to use other approaches to create variable files.</p>
</div>
<div class=3D"section" id=3D"id161">
<h5>Examples</h5>
<p>The first examples create variables from attributes using both Python an=
d Java.
Both of them create variables <code>${VARIABLE}</code> and <code>@{LIST}</c=
ode> from class
attributes and <code>${ANOTHER VARIABLE}</code> from an instance attribute.=
</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">StaticPythonExample</span><span class=3D"p">(</span><span=
 class=3D"nb">object</span><span class=3D"p">):</span>
    <span class=3D"n">variable</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"s1">'value'</span>
    <span class=3D"n">LIST__list</span> <span class=3D"o">=3D</span> <span =
class=3D"p">[</span><span class=3D"mi">1</span><span class=3D"p">,</span> <=
span class=3D"mi">2</span><span class=3D"p">,</span> <span class=3D"mi">3</=
span><span class=3D"p">]</span>
    <span class=3D"n">_not_variable</span> <span class=3D"o">=3D</span> <sp=
an class=3D"s1">'starts with an underscore'</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">another_variable</span> <span class=3D"o">=3D</span> <span class=3D"=
s1">'another value'</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">StaticJavaExample</span=
> <span class=3D"o">{</span>
    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"n">String</span> <span class=3D"n">variable</span> <span class=3D=
"o">=3D</span> <span class=3D"s">"value"</span><span class=3D"o">;</span>
    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"n">String</span><span class=3D"o">[]</span> <span class=3D"n">LIS=
T__list</span> <span class=3D"o">=3D</span> <span class=3D"o">{</span><span=
 class=3D"mi">1</span><span class=3D"o">,</span> <span class=3D"mi">2</span=
><span class=3D"o">,</span> <span class=3D"mi">3</span><span class=3D"o">};=
</span>
    <span class=3D"kd">private</span> <span class=3D"n">String</span> <span=
 class=3D"n">notVariable</span> <span class=3D"o">=3D</span> <span class=3D=
"s">"is private"</span><span class=3D"o">;</span>
    <span class=3D"kd">public</span> <span class=3D"n">String</span> <span =
class=3D"n">anotherVariable</span><span class=3D"o">;</span>

    <span class=3D"kd">public</span> <span class=3D"nf">StaticJavaExample</=
span><span class=3D"o">()</span> <span class=3D"o">{</span>
        <span class=3D"n">anotherVariable</span> <span class=3D"o">=3D</spa=
n> <span class=3D"s">"another value"</span><span class=3D"o">;</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
<p>The second examples utilizes dynamic approach for getting variables. Bot=
h of
them create only one variable <code>${DYNAMIC VARIABLE}</code>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">DynamicPythonExample</span><span class=3D"p">(</span><spa=
n class=3D"nb">object</span><span class=3D"p">):</span>

    <span class=3D"k">def</span> <span class=3D"nf">get_variables</span><sp=
an class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</s=
pan> <span class=3D"o">*</span><span class=3D"n">args</span><span class=3D"=
p">):</span>
        <span class=3D"k">return</span> <span class=3D"p">{</span><span cla=
ss=3D"s1">'dynamic variable'</span><span class=3D"p">:</span> <span class=
=3D"s1">' '</span><span class=3D"o">.</span><span class=3D"n">join</span><s=
pan class=3D"p">(</span><span class=3D"n">args</span><span class=3D"p">)}</=
span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">java.util.Map</span><span class=3D"o">;</span>
<span class=3D"kn">import</span> <span class=3D"nn">java.util.HashMap</span=
><span class=3D"o">;</span>

<span class=3D"kd">public</span> <span class=3D"kd">class</span> <span clas=
s=3D"nc">DynamicJavaExample</span> <span class=3D"o">{</span>

    <span class=3D"kd">public</span> <span class=3D"n">Map</span><span clas=
s=3D"o">&lt;</span><span class=3D"n">String</span><span class=3D"o">,</span=
> <span class=3D"n">String</span><span class=3D"o">&gt;</span> <span class=
=3D"nf">getVariables</span><span class=3D"o">(</span><span class=3D"n">Stri=
ng</span> <span class=3D"n">arg1</span><span class=3D"o">,</span> <span cla=
ss=3D"n">String</span> <span class=3D"n">arg2</span><span class=3D"o">)</sp=
an> <span class=3D"o">{</span>
        <span class=3D"n">HashMap</span><span class=3D"o">&lt;</span><span =
class=3D"n">String</span><span class=3D"o">,</span> <span class=3D"n">Strin=
g</span><span class=3D"o">&gt;</span> <span class=3D"n">variables</span> <s=
pan class=3D"o">=3D</span> <span class=3D"k">new</span> <span class=3D"n">H=
ashMap</span><span class=3D"o">&lt;</span><span class=3D"n">String</span><s=
pan class=3D"o">,</span> <span class=3D"n">String</span><span class=3D"o">&=
gt;();</span>
        <span class=3D"n">variables</span><span class=3D"o">.</span><span c=
lass=3D"na">put</span><span class=3D"o">(</span><span class=3D"s">"dynamic =
variable"</span><span class=3D"o">,</span> <span class=3D"n">arg1</span> <s=
pan class=3D"o">+</span> <span class=3D"s">" "</span> <span class=3D"o">+</=
span> <span class=3D"n">arg2</span><span class=3D"o">);</span>
        <span class=3D"k">return</span> <span class=3D"n">variables</span><=
span class=3D"o">;</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"variable-file-as-yaml">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id627">Variable file as YAML</a></h4=
>
<p>Variable files can also be implemented as <a class=3D"reference external=
" href=3D"http://yaml.org/">YAML</a> files.
YAML is a data serialization language with a simple and human-friendly synt=
ax.
The following example demonstrates a simple YAML file:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"nt">string</span>=
<span class=3D"p">:</span>   <span class=3D"l l-Scalar l-Scalar-Plain">Hell=
o, world!</span>
<span class=3D"nt">integer</span><span class=3D"p">:</span>  <span class=3D=
"l l-Scalar l-Scalar-Plain">42</span>
<span class=3D"nt">list</span><span class=3D"p">:</span>
  <span class=3D"p p-Indicator">-</span> <span class=3D"l l-Scalar l-Scalar=
-Plain">one</span>
  <span class=3D"p p-Indicator">-</span> <span class=3D"l l-Scalar l-Scalar=
-Plain">two</span>
<span class=3D"nt">dict</span><span class=3D"p">:</span>
  <span class=3D"nt">one</span><span class=3D"p">:</span> <span class=3D"l =
l-Scalar l-Scalar-Plain">yksi</span>
  <span class=3D"nt">two</span><span class=3D"p">:</span> <span class=3D"l =
l-Scalar l-Scalar-Plain">kaksi</span>
  <span class=3D"nt">with spaces</span><span class=3D"p">:</span> <span cla=
ss=3D"l l-Scalar l-Scalar-Plain">kolme</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p>Using YAML files with Robot Framework requires <a class=3D"reference ext=
ernal" href=3D"http://pyyaml.org/">PyYAML</a> module to be installed. If yo=
u have
<a class=3D"reference external" href=3D"http://pip-installer.org/">pip</a> =
installed, you can install it simply by running
<code>pip install pyyaml</code>.</p>
<p class=3D"last">YAML support is new in Robot Framework 2.9. Starting from
version 2.9.2, the <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#standalone-jar=
-distribution">standalone JAR distribution</a> has
PyYAML included by default.</p>
</div>
<p>YAML variable files can be used exactly like normal variable files
from the command line using <span class=3D"option">--variablefile</span> op=
tion, in the settings
table using <span class=3D"setting">Variables</span> setting, and dynamical=
ly using the
<span class=3D"name">Import Variables</span> keyword. The only thing to rem=
ember is that paths to
YAML files must always end with <span class=3D"file">.yaml</span> extension=
.</p>
<p>If the above YAML file is imported, it will create exactly the same
variables as the following variable table:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Variables=
 ***</span><span class=3D"p"></span>
<span class=3D"p">${</span><span class=3D"nv">STRING</span><span class=3D"p=
">}     </span><span class=3D"s">Hello, world!</span><span class=3D"p"></sp=
an>
<span class=3D"p">${</span><span class=3D"nv">INTEGER</span><span class=3D"=
p">}    ${</span><span class=3D"nv">42</span><span class=3D"p">}</span>
<span class=3D"p">@{</span><span class=3D"nv">LIST</span><span class=3D"p">=
}       </span><span class=3D"s">one</span><span class=3D"p">         </spa=
n><span class=3D"s">two</span><span class=3D"p"></span>
<span class=3D"p">&amp;{</span><span class=3D"nv">DICT</span><span class=3D=
"p">}       </span><span class=3D"s">one=3Dyksi</span><span class=3D"p">   =
 </span><span class=3D"s">two=3Dkaksi</span><span class=3D"p"></span>
</pre></div>
<p>YAML files used as variable files must always be mappings in the top lev=
el.
As the above example demonstrates, keys and values in the mapping become
variable names and values, respectively. Variable values can be any data
types supported by YAML syntax. If names or values contain non-ASCII
characters, YAML variables files must be UTF-8 encoded.</p>
<p>Mappings used as values are automatically converted to special dictionar=
ies
that are used also when <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-=
dictionary-variables">creating dictionary variables</a> in the variable tab=
le.
Most importantly, values of these dictionaries are accessible as attributes
like <code>${DICT.one}</code>, assuming their names are valid as Python att=
ribute names.
If the name contains spaces or is otherwise not a valid attribute name, it =
is
always possible to access dictionary values using syntax like
<code>&amp;{DICT}[with spaces]</code> syntax. The created dictionaries are =
also ordered, but
unfortunately the original source order of in the YAML file is not preserve=
d.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"advanced-features">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id512">2.9&nbsp;&nbsp;&nbsp;Advanced=
 features</a></h2>
<div class=3D"contents local topic" id=3D"id162">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#handling-keywords-with-same-n=
ames" id=3D"id628">2.9.1&nbsp;&nbsp;&nbsp;Handling keywords with same names=
</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#keyword-scopes" id=3D"id629">=
Keyword scopes</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#specifying-a-keyword-explicit=
ly" id=3D"id630">Specifying a keyword explicitly</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#specifying-explicit-priority-=
between-libraries-and-resources" id=3D"id631">Specifying explicit priority =
between libraries and resources</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#timeouts" id=3D"id632">2.9.2&=
nbsp;&nbsp;&nbsp;Timeouts</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-case-timeout" id=3D"id63=
3">Test case timeout</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#user-keyword-timeout" id=3D"i=
d634">User keyword timeout</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#for-loops" id=3D"id635">2.9.3=
&nbsp;&nbsp;&nbsp;For loops</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#simple-for-loop" id=3D"id636"=
>Simple for loop</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#old-for-loop-syntax" id=3D"id=
637">Old for loop syntax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#nested-for-loops" id=3D"id638=
">Nested for loops</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-several-loop-variables"=
 id=3D"id639">Using several loop variables</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#for-in-range-loop" id=3D"id64=
0">For-in-range loop</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#for-in-enumerate-loop" id=3D"=
id641">For-in-enumerate loop</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#for-in-zip-loop" id=3D"id642"=
>For-in-zip loop</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#exiting-for-loop" id=3D"id643=
">Exiting for loop</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#continuing-for-loop" id=3D"id=
644">Continuing for loop</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#removing-unnecessary-keywords=
-from-outputs" id=3D"id645">Removing unnecessary keywords from outputs</a><=
/li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#repeating-single-keyword" id=
=3D"id646">Repeating single keyword</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#conditional-execution" id=3D"=
id647">2.9.4&nbsp;&nbsp;&nbsp;Conditional execution</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#parallel-execution-of-keyword=
s" id=3D"id648">2.9.5&nbsp;&nbsp;&nbsp;Parallel execution of keywords</a></=
li>
</ul>
</div>
<div class=3D"section" id=3D"handling-keywords-with-same-names">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id628">2.9.1&nbsp;&nbsp;&nbsp;Handli=
ng keywords with same names</a></h3>
<p>Keywords that are used with Robot Framework are either <a class=3D"refer=
ence internal" href=3D"http://robotframework.org/robotframework/latest/Robo=
tFrameworkUserGuide.html#using-test-libraries">library
keywords</a> or <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-user-key=
words">user keywords</a>. The former come from <a class=3D"reference intern=
al" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#standard-libraries">standard
libraries</a> or <a class=3D"reference internal" href=3D"http://robotframew=
ork.org/robotframework/latest/RobotFrameworkUserGuide.html#external-librari=
es">external libraries</a>, and the latter are either
created in the same file where they are used or then imported from
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#resource-files">resource files</a=
>. When many keywords are in use, it is quite common
that some of them have the same name, and this section describes how to
handle possible conflicts in these situations.</p>
<div class=3D"section" id=3D"keyword-scopes">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id629">Keyword scopes</a></h4>
<p>When only a keyword name is used and there are several keywords with
that name, Robot Framework attempts to determine which keyword has the
highest priority based on its scope. The keyword's scope is determined
on the basis of how the keyword in question is created:</p>
<ol class=3D"arabic simple">
<li>Created as a user keyword in the same file where it is used. These
keywords have the highest priority and they are always used, even
if there are other keywords with the same name elsewhere.</li>
<li>Created in a resource file and imported either directly or
indirectly from another resource file. This is the second-highest
priority.</li>
<li>Created in an external test library. These keywords are used, if
there are no user keywords with the same name. However, if there is
a keyword with the same name in the standard library, a warning is
displayed.</li>
<li>Created in a standard library. These keywords have the lowest
priority.</li>
</ol>
</div>
<div class=3D"section" id=3D"specifying-a-keyword-explicitly">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id630">Specifying a keyword explicit=
ly</a></h4>
<p>Scopes alone are not a sufficient solution, because there can be
keywords with the same name in several libraries or resources, and
thus, they provide a mechanism to use only the keyword of the
highest priority. In such cases, it is possible to use <em>the full name
of the keyword</em>, where the keyword name is prefixed with the name of
the resource or library and a dot is a delimiter.</p>
<p>With library keywords, the long format means only using the format
<span class=3D"name">LibraryName.Keyword Name</span>. For example, the keyw=
ord <span class=3D"name">Run</span>
from the <a class=3D"reference external" href=3D"http://robotframework.org/=
robotframework/latest/libraries/OperatingSystem.html">OperatingSystem</a> l=
ibrary could be used as
<span class=3D"name">OperatingSystem.Run</span>, even if there was another =
<span class=3D"name">Run</span>
keyword somewhere else. If the library is in a module or package, the
full module or package name must be used (for example,
<span class=3D"name">com.company.Library.Some Keyword</span>). If a custom =
name is given
to a library using the <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-cu=
stom-name-to-test-library">WITH NAME syntax</a>, the specified name must be
used also in the full keyword name.</p>
<p>Resource files are specified in the full keyword name, similarly as
library names. The name of the resource is derived from the basename
of the resource file without the file extension. For example, the
keyword <span class=3D"name">Example</span> in a resource file <span class=
=3D"file">myresources.html</span> can
be used as <span class=3D"name">myresources.Example</span>. Note that this =
syntax does not
work, if several resource files have the same basename. In such
cases, either the files or the keywords must be renamed. The full name
of the keyword is case-, space- and underscore-insensitive, similarly
as normal keyword names.</p>
</div>
<div class=3D"section" id=3D"specifying-explicit-priority-between-libraries=
-and-resources">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id631">Specifying explicit priority =
between libraries and resources</a></h4>
<p>If there are multiple conflicts between keywords, specifying all the key=
words
in the long format can be quite a lot work. Using the long format also make=
s it
impossible to create dynamic test cases or user keywords that work differen=
tly
depending on which libraries or resources are available. A solution to both=
 of
these problems is specifying the keyword priorities explicitly using the ke=
yword
<span class=3D"name">Set Library Search Order</span> from the <a class=3D"r=
eference external" href=3D"http://robotframework.org/robotframework/latest/=
libraries/BuiltIn.html">BuiltIn</a> library.</p>
<blockquote>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Although the keyword has the word <em>library</em> in its=
 name, it works
also with resource files. As discussed above, keywords in resources
always have higher priority than keywords in libraries, though.</p>
</div>
</blockquote>
<p>The <span class=3D"name">Set Library Search Order</span> accepts an orde=
red list or libraries and
resources as arguments. When a keyword name in the test data matches multip=
le
keywords, the first library or resource containing the keyword is selected =
and
that keyword implementation used. If the keyword is not found from any of t=
he
specified libraries or resources, execution fails for conflict the same way=
 as
when the search order is not set.</p>
<p>For more information and examples, see the documentation of the keyword.=
</p>
</div>
</div>
<div class=3D"section" id=3D"timeouts">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id632">2.9.2&nbsp;&nbsp;&nbsp;Timeou=
ts</a></h3>
<p>Keywords may be problematic in situations where they take
exceptionally long to execute or just hang endlessly. Robot Framework
allows you to set timeouts both for <a class=3D"reference external" href=3D=
"http://robot-framework.readthedocs.org/en/master/autodoc/robot.running.htm=
l#robot.running.model.TestCase">test cases</a> and <a class=3D"reference in=
ternal" href=3D"http://robotframework.org/robotframework/latest/RobotFramew=
orkUserGuide.html#creating-user-keywords">user
keywords</a>, and if a test or keyword is not finished within the
specified time, the keyword that is currently being executed is
forcefully stopped. Stopping keywords in this manner may leave the
library or system under test to an unstable state, and timeouts are
recommended only when there is no safer option available. In general,
libraries should be implemented so that keywords cannot hang or that
they have their own timeout mechanism, if necessary.</p>
<div class=3D"section" id=3D"test-case-timeout">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id633">Test case timeout</a></h4>
<p>The test case timeout can be set either by using the <span class=3D"sett=
ing">Test
Timeout</span> setting in the Setting table or the <span class=3D"setting">=
[Timeout]</span>
setting in the Test Case table. <span class=3D"setting">Test Timeout</span>=
 in the Setting
table defines a default test timeout value for all the test cases in
the test suite, whereas <span class=3D"setting">[Timeout]</span> in the Tes=
t Case table
applies a timeout to an individual test case and overrides the
possible default value.</p>
<p>Using an empty <span class=3D"setting">[Timeout]</span> means that the t=
est has no
timeout even when <span class=3D"setting">Test Timeout</span> is used. It i=
s also possible
to use value <code>NONE</code> for this purpose.</p>
<p>Regardless of where the test timeout is defined, the first cell after
the setting name contains the duration of the timeout. The duration
must be given in Robot Framework's <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#time-format">time format</a>, that is,
either directly in seconds or in a format like <code>1 minute
30 seconds</code>. It must be noted that there is always some overhead by t=
he
framework, and timeouts shorter than one second are thus not
recommended.</p>
<p>The default error message displayed when a test timeout occurs is
<code>Test timeout &lt;time&gt; exceeded</code>. It is also possible to use=
 custom
error messages, and these messages are written into the cells
after the timeout duration. The message can be split into multiple
cells, similarly as documentations. Both the timeout value and the
error message may contain variables.</p>
<p>If there is a timeout, the keyword running is stopped at the
expiration of the timeout and the test case fails. However, keywords
executed as <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#test-setup-and-teardo=
wn">test teardown</a> are not interrupted if a test timeout
occurs, because they are normally engaged in important clean-up
activities. If necessary, it is possible to interrupt also these
keywords with <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#user-keyword-timeou=
t">user keyword timeouts</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Test Timeout</span><span class=3D"p">    </span><span cl=
ass=3D"s">2 minutes</span><span class=3D"p"></span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">Default Timeout</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Timeout from the Setting table is=
 used</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Some Keyword</span><span cl=
ass=3D"p">    </span><span class=3D"s">argument</span><span class=3D"p"></s=
pan>

<span class=3D"gu">Override</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Override default, use 10 seconds =
timeout</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Timeout</span><span class=
=3D"p">]    </span><span class=3D"s">10</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Some Keyword</span><span cl=
ass=3D"p">    </span><span class=3D"s">argument</span><span class=3D"p"></s=
pan>

<span class=3D"gu">Custom Message</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Override default and use custom m=
essage</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Timeout</span><span class=
=3D"p">]    </span><span class=3D"s">1min 10s</span><span class=3D"p">    <=
/span><span class=3D"s">This is my custom error</span><span class=3D"p"></s=
pan>
<span class=3D"p">    </span><span class=3D"nf">Some Keyword</span><span cl=
ass=3D"p">    </span><span class=3D"s">argument</span><span class=3D"p"></s=
pan>

<span class=3D"gu">Variables</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">It is possible to use variables t=
oo</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Timeout</span><span class=
=3D"p">]    ${</span><span class=3D"nv">TIMEOUT</span><span class=3D"p">}</=
span>
<span class=3D"p">    </span><span class=3D"nf">Some Keyword</span><span cl=
ass=3D"p">    </span><span class=3D"s">argument</span><span class=3D"p"></s=
pan>

<span class=3D"gu">No Timeout</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Empty timeout means no timeout ev=
en when Test Timeout has been used</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Timeout</span><span class=
=3D"p">]</span>
<span class=3D"p">    </span><span class=3D"nf">Some Keyword</span><span cl=
ass=3D"p">    </span><span class=3D"s">argument</span><span class=3D"p"></s=
pan>

<span class=3D"gu">No Timeout 2</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Disabling timeout with NONE works=
 too and is more explicit.</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Timeout</span><span class=
=3D"p">]    </span><span class=3D"s">NONE</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Some Keyword</span><span cl=
ass=3D"p">    </span><span class=3D"s">argument</span><span class=3D"p"></s=
pan>
</pre></div>
</div>
<div class=3D"section" id=3D"user-keyword-timeout">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id634">User keyword timeout</a></h4>
<p>A timeout can be set for a user keyword using the <span class=3D"setting=
">[Timeout]</span>
setting in the Keyword table. The syntax for setting it, including how
timeout values and possible custom messages are given, is
identical to the syntax used with <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#test-case-timeout">test case timeouts</a>. If no custom
message is provided, the default error message <code>Keyword timeout
&lt;time&gt; exceeded</code> is used if a timeout occurs.</p>
<p>Starting from Robot Framework 3.0, timeout can be specified as a variabl=
e
so that the variable value is given as an argument. Using global variables
works already with previous versions.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">Timed Keyword</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Set only the timeout value and no=
t the custom message.</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Timeout</span><span class=
=3D"p">]    </span><span class=3D"s">1 minute 42 seconds</span><span class=
=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something</span><span cl=
ass=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Something Else</span><sp=
an class=3D"p"></span>

<span class=3D"gu">Wrapper With Timeout</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{</span><span class=3D"nv">args</span><span class=3D"p">}</sp=
an>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">This keyword is a wrapper that ad=
ds a timeout to another keyword.</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Timeout</span><span class=
=3D"p">]    </span><span class=3D"s">2 minutes</span><span class=3D"p">    =
</span><span class=3D"s">Original Keyword didn't finish in 2 minutes</span>=
<span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Original Keyword</span><spa=
n class=3D"p">    @{</span><span class=3D"nv">args</span><span class=3D"p">=
}</span>

<span class=3D"gu">Wrapper With Customizable Timeout</span><span class=3D"p=
"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    ${</span><span class=3D"nv">timeout</span><span class=3D"p">} =
   @{</span><span class=3D"nv">args</span><span class=3D"p">}</span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Same as the above but timeout giv=
en as an argument.</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Timeout</span><span class=
=3D"p">]    ${</span><span class=3D"nv">timeout</span><span class=3D"p">}</=
span>
<span class=3D"p">    </span><span class=3D"nf">Original Keyword</span><spa=
n class=3D"p">    @{</span><span class=3D"nv">args</span><span class=3D"p">=
}</span>
</pre></div>
<p>A user keyword timeout is applicable during the execution of that user
keyword. If the total time of the whole keyword is longer than the
timeout value, the currently executed keyword is stopped. User keyword
timeouts are applicable also during a test case teardown, whereas test
timeouts are not.</p>
<p>If both the test case and some of its keywords (or several nested
keywords) have a timeout, the active timeout is the one with the least
time left.</p>
</div>
</div>
<div class=3D"section" id=3D"for-loops">
<span id=3D"for-loop"></span><h3><a class=3D"toc-backref" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#id635">=
2.9.3&nbsp;&nbsp;&nbsp;For loops</a></h3>
<p>Repeating same actions several times is quite a common need in test
automation. With Robot Framework, test libraries can have any kind of
loop constructs, and most of the time loops should be implemented in
them. Robot Framework also has its own for loop syntax, which is
useful, for example, when there is a need to repeat keywords from
different libraries.</p>
<p>For loops can be used with both test cases and user keywords. Except for
really simple cases, user keywords are better, because they hide the
complexity introduced by for loops. The basic for loop syntax,
<code>FOR item IN sequence</code>, is derived from Python, but similar
syntax is supported also by various other programming languages.</p>
<div class=3D"section" id=3D"simple-for-loop">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id636">Simple for loop</a></h4>
<p>In a normal for loop, one variable is assigned based on a list of values=
,
one value per iteration. The syntax starts with <code>FOR</code> (case-sens=
itive) as
a marker, then the loop variable, then a mandatory <code>IN</code> (case-se=
nsitive) as
a separator, and finally the values to iterate. These values can contain
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#variables">variables</a>, includi=
ng <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#list-variables">list variables=
</a>.</p>
<p>The keywords used in the for loop are on the following rows and the loop
ends with <code>END</code> (case-sensitive) on its own row. Keywords inside=
 the loop
do not need to be indented, but that is highly recommended to make the synt=
ax
easier to read.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">animal</span><span=
 class=3D"p">}    IN    </span><span class=3D"s">cat</span><span class=3D"p=
">    </span><span class=3D"s">dog</span><span class=3D"p"></span>
<span class=3D"p">        </span><span class=3D"nf">Log</span><span class=
=3D"p">    ${</span><span class=3D"nv">animal</span><span class=3D"p">}</sp=
an>
<span class=3D"p">        </span><span class=3D"nf">Log</span><span class=
=3D"p">    </span><span class=3D"s">2nd keyword</span><span class=3D"p"></s=
pan>
<span class=3D"p">    END</span>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Outside loop</span><span class=3D"p"></span>

<span class=3D"gu">Second Example</span><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">var</span><span cl=
ass=3D"p">}    IN    </span><span class=3D"s">one</span><span class=3D"p"> =
   </span><span class=3D"s">two</span><span class=3D"p">    ${</span><span =
class=3D"nv">3</span><span class=3D"p">}    </span><span class=3D"s">four</=
span><span class=3D"p">    ${</span><span class=3D"nv">five</span><span cla=
ss=3D"p">}</span>
<span class=3D"p">    ...    </span><span class=3D"s">kuusi</span><span cla=
ss=3D"p">    </span><span class=3D"s">7</span><span class=3D"p">    </span>=
<span class=3D"s">eight</span><span class=3D"p">    </span><span class=3D"s=
">nine</span><span class=3D"p">    ${</span><span class=3D"nv">last</span><=
span class=3D"p">}</span>
<span class=3D"p">        </span><span class=3D"nf">Log</span><span class=
=3D"p">    ${</span><span class=3D"nv">var</span><span class=3D"p">}</span>
<span class=3D"p">    END</span>
</pre></div>
<p>The for loop in <span class=3D"name">Example</span> above is executed tw=
ice, so that first
the loop variable <code>${animal}</code> has the value <code>cat</code> and=
 then
<code>dog</code>. The loop consists of two <span class=3D"name">Log</span> =
keywords. In the
second example, loop values are <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#d=
ividing-test-data-to-several-rows">split into two rows</a> and the
loop is run altogether ten times.</p>
<p>It is often convenient to use for loops with <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#list-variables">list variables</a>. This is
illustrated by the example below, where <code>@{ELEMENTS}</code> contains
an arbitrarily long list of elements and keyword <span class=3D"name">Start=
 Element</span> is
used with all of them one by one.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">element</span><spa=
n class=3D"p">}    IN    @{</span><span class=3D"nv">ELEMENTS</span><span c=
lass=3D"p">}</span>
<span class=3D"p">        </span><span class=3D"nf">Start Element</span><sp=
an class=3D"p">    ${</span><span class=3D"nv">element</span><span class=3D=
"p">}</span>
<span class=3D"p">    END</span>
</pre></div>
</div>
<div class=3D"section" id=3D"old-for-loop-syntax">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id637">Old for loop syntax</a></h4>
<p>For loop syntax was enhanced in various ways in Robot Framework 3.1.
The most noticeable change was that loops nowadays end with the explicit
<code>END</code> marker and keywords inside the loop do not need to be inde=
nted.
In the <a class=3D"reference internal" href=3D"http://robotframework.org/ro=
botframework/latest/RobotFrameworkUserGuide.html#space-separated-plain-text=
-format">space separated plain text format</a> indentation required
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#escaping">escaping with a backsla=
sh</a> which resulted in quite ugly syntax:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    :FOR    ${</span><span class=3D"nv">animal</span><spa=
n class=3D"p">}    IN    </span><span class=3D"s">cat</span><span class=3D"=
p">    </span><span class=3D"s">dog</span><span class=3D"p"></span>
<span class=3D"p">    \    </span><span class=3D"nf">Log</span><span class=
=3D"p">    ${</span><span class=3D"nv">animal</span><span class=3D"p">}</sp=
an>
<span class=3D"p">    \    </span><span class=3D"nf">Log</span><span class=
=3D"p">    </span><span class=3D"s">2nd keyword</span><span class=3D"p"></s=
pan>
<span class=3D"p">    </span><span class=3D"nf">Log</span><span class=3D"p"=
>    </span><span class=3D"s">Outside loop</span><span class=3D"p"></span>
</pre></div>
<p>Another change, also visible in the example above, was that the for loop
marker used to be <code>:FOR</code> when nowadays just <code>FOR</code> is =
enough. Related to that,
the <code>:FOR</code> marker and also the <code>IN</code> separator were ca=
se-insensitive but
nowadays both <code>FOR</code> and <code>IN</code> are case-sensitive.</p>
<p>Old for loop syntax still works in Robot Framework 3.1 and only using
<code>IN</code> case-insensitively causes a deprecation warning. Not closin=
g loops
with <code>END</code>, escaping keywords inside loops with <span class=3D"c=
odesc">\</span>, and using
<code>:FOR</code> instead of <code>FOR</code> are all going to be deprecate=
d in Robot Framework 3.2.
Users are advised to switch to the new syntax as soon as possible.</p>
<p>When using the <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#pipe-separated-=
format">pipe separated format</a>, escaping with <span class=3D"codesc">\</=
span> has not
been needed:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"p">| </span><span=
 class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"p">| </span><span class=3D"gu">Example</span><span class=3D"=
p"></span>
<span class=3D"p">| | :FOR | ${</span><span class=3D"nv">animal</span><span=
 class=3D"p">}    | IN          | </span><span class=3D"s">cat</span><span =
class=3D"p"> | </span><span class=3D"s">dog</span><span class=3D"p"> |</spa=
n>
<span class=3D"p">| |      | </span><span class=3D"nf">Log</span><span clas=
s=3D"p">          | ${</span><span class=3D"nv">animal</span><span class=3D=
"p">}   |</span>
<span class=3D"p">| |      | </span><span class=3D"nf">Log</span><span clas=
s=3D"p">          | </span><span class=3D"s">2nd keyword</span><span class=
=3D"p"> |</span>
<span class=3D"p">| | </span><span class=3D"nf">Log</span><span class=3D"p"=
>  | </span><span class=3D"s">Outside loop</span><span class=3D"p"> |</span=
>
</pre></div>
<p>The above syntax still works with Robot Framework 3.1, but it will not w=
ork
anymore in Robot Framework 3.2. The recommended solution is closing the loo=
p
with an explicit <code>END</code>, but if old Robot Framework versions need=
 to be
supported then escaping with <span class=3D"codesc">\</span> is needed.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"p">| </span><span=
 class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"p">| </span><span class=3D"gu">Recommended solution</span><s=
pan class=3D"p"></span>
<span class=3D"p">| | FOR  | ${</span><span class=3D"nv">animal</span><span=
 class=3D"p">}    | IN          | </span><span class=3D"s">cat</span><span =
class=3D"p"> | </span><span class=3D"s">dog</span><span class=3D"p"> |</spa=
n>
<span class=3D"p">| |      | </span><span class=3D"nf">Log</span><span clas=
s=3D"p">          | ${</span><span class=3D"nv">animal</span><span class=3D=
"p">}   |</span>
<span class=3D"p">| |      | </span><span class=3D"nf">Log</span><span clas=
s=3D"p">          | </span><span class=3D"s">2nd keyword</span><span class=
=3D"p"> |</span>
<span class=3D"p">| | END  |              |</span>
<span class=3D"p">| | </span><span class=3D"nf">Log</span><span class=3D"p"=
>  | </span><span class=3D"s">Outside loop</span><span class=3D"p"> |</span=
>
<span class=3D"gu">|</span><span class=3D"p"></span>
<span class=3D"p">| </span><span class=3D"gu">Compatible with RF 3.0.x</spa=
n><span class=3D"p"></span>
<span class=3D"p">| | :FOR | ${</span><span class=3D"nv">animal</span><span=
 class=3D"p">}    | IN          | </span><span class=3D"s">cat</span><span =
class=3D"p"> | </span><span class=3D"s">dog</span><span class=3D"p"> |</spa=
n>
<span class=3D"p">| | \    | </span><span class=3D"nf">Log</span><span clas=
s=3D"p">          | ${</span><span class=3D"nv">animal</span><span class=3D=
"p">}   |</span>
<span class=3D"p">| | \    | </span><span class=3D"nf">Log</span><span clas=
s=3D"p">          | </span><span class=3D"s">2nd keyword</span><span class=
=3D"p"> |</span>
<span class=3D"p">| | </span><span class=3D"nf">Log</span><span class=3D"p"=
>  | </span><span class=3D"s">Outside loop</span><span class=3D"p"> |</span=
>
</pre></div>
</div>
<div class=3D"section" id=3D"nested-for-loops">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id638">Nested for loops</a></h4>
<p>Having nested for loops is not supported directly, but it is possible to=
 use
a user keyword inside a for loop and have another for loop there.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">Handle Table</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{</span><span class=3D"nv">table</span><span class=3D"p">}</s=
pan>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">row</span><span cl=
ass=3D"p">}    IN    @{</span><span class=3D"nv">table</span><span class=3D=
"p">}</span>
<span class=3D"p">        </span><span class=3D"nf">Handle Row</span><span =
class=3D"p">    @{</span><span class=3D"nv">row</span><span class=3D"p">}</=
span>
<span class=3D"p">    END</span>

<span class=3D"gu">Handle Row</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]    @{</span><span class=3D"nv">row</span><span class=3D"p">}</spa=
n>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">cell</span><span c=
lass=3D"p">}    IN    @{</span><span class=3D"nv">row</span><span class=3D"=
p">}</span>
<span class=3D"p">        </span><span class=3D"nf">Handle Cell</span><span=
 class=3D"p">    ${</span><span class=3D"nv">cell</span><span class=3D"p">}=
</span>
<span class=3D"p">    END</span>
</pre></div>
</div>
<div class=3D"section" id=3D"using-several-loop-variables">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id639">Using several loop variables<=
/a></h4>
<p>It is also possible to use several loop variables. The syntax is the
same as with the normal for loop, but all loop variables are listed in
the cells between <code>FOR</code> and <code>IN</code>. There can be any nu=
mber of loop
variables, but the number of values must be evenly dividable by the number =
of
variables.</p>
<p>If there are lot of values to iterate, it is often convenient to organiz=
e
them below the loop variables, as in the first loop of the example below:</=
p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Three loop variables</span><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">index</span><span =
class=3D"p">}    ${</span><span class=3D"nv">english</span><span class=3D"p=
">}    ${</span><span class=3D"nv">finnish</span><span class=3D"p">}    IN<=
/span>
<span class=3D"p">    ...     </span><span class=3D"s">1</span><span class=
=3D"p">           </span><span class=3D"s">cat</span><span class=3D"p">    =
       </span><span class=3D"s">kissa</span><span class=3D"p"></span>
<span class=3D"p">    ...     </span><span class=3D"s">2</span><span class=
=3D"p">           </span><span class=3D"s">dog</span><span class=3D"p">    =
       </span><span class=3D"s">koira</span><span class=3D"p"></span>
<span class=3D"p">    ...     </span><span class=3D"s">3</span><span class=
=3D"p">           </span><span class=3D"s">horse</span><span class=3D"p">  =
       </span><span class=3D"s">hevonen</span><span class=3D"p"></span>
<span class=3D"p">        </span><span class=3D"nf">Add to dictionary</span=
><span class=3D"p">    ${</span><span class=3D"nv">english</span><span clas=
s=3D"p">}    ${</span><span class=3D"nv">finnish</span><span class=3D"p">} =
   ${</span><span class=3D"nv">index</span><span class=3D"p">}</span>
<span class=3D"p">    END</span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">name</span><span c=
lass=3D"p">}    ${</span><span class=3D"nv">id</span><span class=3D"p">}   =
 IN    @{</span><span class=3D"nv">EMPLOYERS</span><span class=3D"p">}</spa=
n>
<span class=3D"p">        </span><span class=3D"nf">Create</span><span clas=
s=3D"p">    ${</span><span class=3D"nv">name</span><span class=3D"p">}    $=
{</span><span class=3D"nv">id</span><span class=3D"p">}</span>
<span class=3D"p">    END</span>
</pre></div>
</div>
<div class=3D"section" id=3D"for-in-range-loop">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id640">For-in-range loop</a></h4>
<p>Earlier for loops always iterated over a sequence, and this is also the =
most
common use case. Sometimes it is still convenient to have a for loop
that is executed a certain number of times, and Robot Framework has a
special <code>FOR index IN RANGE limit</code> syntax for this purpose. This
syntax is derived from the similar Python idiom using the <a class=3D"refer=
ence external" href=3D"http://docs.python.org/library/functions.html#func-r=
ange">built-in
range() function</a>.</p>
<p>Similarly as other for loops, the for-in-range loop starts with
<code>FOR</code> and the loop variable is in the next cell. In this format
there can be only one loop variable and it contains the current loop
index. The next cell must contain <code>IN RANGE</code> (case-sensitive) an=
d
the subsequent cells loop limits.</p>
<p>In the simplest case, only the upper limit of the loop is
specified. In this case, loop indexes start from zero and increase by one
until, but excluding, the limit. It is also possible to give both the
start and end limits. Then indexes start from the start limit, but
increase similarly as in the simple case. Finally, it is possible to give
also the step value that specifies the increment to use. If the step
is negative, it is used as decrement.</p>
<p>It is possible to use simple arithmetic such as addition and subtraction
with the range limits. This is especially useful when the limits are
specified with variables. Start, end and step are typically given as
integers, but using float values is possible as well.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Only upper limit</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Loops over values from 0 to 9</sp=
an><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">index</span><span =
class=3D"p">}    IN RANGE    </span><span class=3D"s">10</span><span class=
=3D"p"></span>
<span class=3D"p">        </span><span class=3D"nf">Log</span><span class=
=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">}</spa=
n>
<span class=3D"p">    END</span>

<span class=3D"gu">Start and end</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Loops over values from 1 to 10</s=
pan><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">index</span><span =
class=3D"p">}    IN RANGE    </span><span class=3D"s">1</span><span class=
=3D"p">    </span><span class=3D"s">11</span><span class=3D"p"></span>
<span class=3D"p">        </span><span class=3D"nf">Log</span><span class=
=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">}</spa=
n>
<span class=3D"p">    END</span>

<span class=3D"gu">Also step given</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Loops over values 5, 15, and 25</=
span><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">index</span><span =
class=3D"p">}    IN RANGE    </span><span class=3D"s">5</span><span class=
=3D"p">    </span><span class=3D"s">26</span><span class=3D"p">    </span><=
span class=3D"s">10</span><span class=3D"p"></span>
<span class=3D"p">        </span><span class=3D"nf">Log</span><span class=
=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">}</spa=
n>
<span class=3D"p">    END</span>

<span class=3D"gu">Negative step</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Loops over values 13, 3, and -7</=
span><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">index</span><span =
class=3D"p">}    IN RANGE    </span><span class=3D"s">13</span><span class=
=3D"p">    </span><span class=3D"s">-13</span><span class=3D"p">    </span>=
<span class=3D"s">-10</span><span class=3D"p"></span>
<span class=3D"p">        </span><span class=3D"nf">Log</span><span class=
=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">}</spa=
n>
<span class=3D"p">    END</span>

<span class=3D"gu">Arithmetic</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Arithmetic with variable</span><s=
pan class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">index</span><span =
class=3D"p">}    IN RANGE    ${</span><span class=3D"nv">var</span><span cl=
ass=3D"p">}</span><span class=3D"s"> + 1</span><span class=3D"p"></span>
<span class=3D"p">        </span><span class=3D"nf">Log</span><span class=
=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">}</spa=
n>
<span class=3D"p">    END</span>

<span class=3D"gu">Float parameters</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]    </span><span class=3D"s">Loops over values 3.14, 4.34, and=
 5.54</span><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">index</span><span =
class=3D"p">}    IN RANGE    </span><span class=3D"s">3.14</span><span clas=
s=3D"p">    </span><span class=3D"s">6.09</span><span class=3D"p">    </spa=
n><span class=3D"s">1.2</span><span class=3D"p"></span>
<span class=3D"p">        </span><span class=3D"nf">Log</span><span class=
=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">}</spa=
n>
<span class=3D"p">    END</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, the <code>IN RANGE</code> s=
eparator was both
case- and space-insensitive. Such usage is nowadays deprecated
and exactly <code>IN RANGE</code> is required.</p>
</div>
</div>
<div class=3D"section" id=3D"for-in-enumerate-loop">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id641">For-in-enumerate loop</a></h4=
>
<p>Sometimes it is useful to loop over a list and also keep track of your l=
ocation
inside the list. Robot Framework has a special
<code>FOR index ... IN ENUMERATE ...</code> syntax for this situation.
This syntax is derived from the <a class=3D"reference external" href=3D"htt=
p://docs.python.org/library/functions.html#enumerate">Python built-in enume=
rate() function</a>.</p>
<p>For-in-enumerate loops work just like regular for loops, except the cell
after its loop variables must say <code>IN ENUMERATE</code> (case-sensitive=
),
and they must have an additional index variable before any other loop-varia=
bles.
That index variable has a value of <code>0</code> for the first iteration, =
<code>1</code> for the
second, etc.</p>
<p>For example, the following two test cases do the same thing:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Variables=
 ***</span><span class=3D"p"></span>
<span class=3D"p">@{</span><span class=3D"nv">LIST</span><span class=3D"p">=
}         </span><span class=3D"s">a</span><span class=3D"p">    </span><sp=
an class=3D"s">b</span><span class=3D"p">    </span><span class=3D"s">c</sp=
an><span class=3D"p"></span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">Manage index manually</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">index</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Set Variable</span><span class=3D=
"p">    </span><span class=3D"s">-1</span><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">item</span><span c=
lass=3D"p">}    IN    @{</span><span class=3D"nv">LIST</span><span class=3D=
"p">}</span>
<span class=3D"p">        ${</span><span class=3D"nv">index</span><span cla=
ss=3D"p">} =3D    </span><span class=3D"nf">Evaluate</span><span class=3D"p=
">    ${</span><span class=3D"nv">index</span><span class=3D"p">}</span><sp=
an class=3D"s"> + 1</span><span class=3D"p"></span>
<span class=3D"p">        </span><span class=3D"nf">My Keyword</span><span =
class=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">}=
    ${</span><span class=3D"nv">item</span><span class=3D"p">}</span>
<span class=3D"p">    END</span>

<span class=3D"gu">For-in-enumerate</span><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">index</span><span =
class=3D"p">}    ${</span><span class=3D"nv">item</span><span class=3D"p">}=
    IN ENUMERATE    @{</span><span class=3D"nv">LIST</span><span class=3D"p=
">}</span>
<span class=3D"p">        </span><span class=3D"nf">My Keyword</span><span =
class=3D"p">    ${</span><span class=3D"nv">index</span><span class=3D"p">}=
    ${</span><span class=3D"nv">item</span><span class=3D"p">}</span>
<span class=3D"p">    END</span>
</pre></div>
<p>Just like with regular for loops, you can loop over multiple values per =
loop
iteration as long as the number of values in your list is evenly divisible =
by
the number of loop-variables (excluding the first, index variable).</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
 ***</span><span class=3D"p"></span>
<span class=3D"gu">For-in-enumerate with two values per iteration</span><sp=
an class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">index</span><span =
class=3D"p">}    ${</span><span class=3D"nv">en</span><span class=3D"p">}  =
  ${</span><span class=3D"nv">fi</span><span class=3D"p">}    IN ENUMERATE<=
/span>
<span class=3D"p">    ...    </span><span class=3D"s">cat</span><span class=
=3D"p">      </span><span class=3D"s">kissa</span><span class=3D"p"></span>
<span class=3D"p">    ...    </span><span class=3D"s">dog</span><span class=
=3D"p">      </span><span class=3D"s">koira</span><span class=3D"p"></span>
<span class=3D"p">    ...    </span><span class=3D"s">horse</span><span cla=
ss=3D"p">    </span><span class=3D"s">hevonen</span><span class=3D"p"></spa=
n>
<span class=3D"p">        </span><span class=3D"nf">Log</span><span class=
=3D"p">    </span><span class=3D"s">"</span><span class=3D"p">${</span><spa=
n class=3D"nv">en</span><span class=3D"p">}</span><span class=3D"s">" in En=
glish is "</span><span class=3D"p">${</span><span class=3D"nv">fi</span><sp=
an class=3D"p">}</span><span class=3D"s">" in Finnish (index: </span><span =
class=3D"p">${</span><span class=3D"nv">index</span><span class=3D"p">}</sp=
an><span class=3D"s">)</span><span class=3D"p"></span>
<span class=3D"p">    END</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, the <code>IN ENUMERATE</cod=
e> separator was both
case- and space-insensitive. Such usage is nowadays deprecated
and exactly <code>IN ENUMERATE</code> is required.</p>
</div>
</div>
<div class=3D"section" id=3D"for-in-zip-loop">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id642">For-in-zip loop</a></h4>
<p>Some tests build up several related lists, then loop over them together.
Robot Framework has a shortcut for this case: <code>FOR ... IN ZIP ...</cod=
e>, which
is derived from the <a class=3D"reference external" href=3D"http://docs.pyt=
hon.org/library/functions.html#zip">Python built-in zip() function</a>.</p>
<p>This may be easiest to show with an example:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Variables=
 ***</span><span class=3D"p"></span>
<span class=3D"p">@{</span><span class=3D"nv">NUMBERS</span><span class=3D"=
p">}      ${</span><span class=3D"nv">1</span><span class=3D"p">}    ${</sp=
an><span class=3D"nv">2</span><span class=3D"p">}    ${</span><span class=
=3D"nv">5</span><span class=3D"p">}</span>
<span class=3D"p">@{</span><span class=3D"nv">NAMES</span><span class=3D"p"=
>}        </span><span class=3D"s">one</span><span class=3D"p">     </span>=
<span class=3D"s">two</span><span class=3D"p">     </span><span class=3D"s"=
>five</span><span class=3D"p"></span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">Iterate over two lists manually</span><span class=3D"p">=
</span>
<span class=3D"p">    ${</span><span class=3D"nv">length</span><span class=
=3D"p">}=3D    </span><span class=3D"nf">Get Length</span><span class=3D"p"=
>    ${</span><span class=3D"nv">NUMBERS</span><span class=3D"p">}</span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">idx</span><span cl=
ass=3D"p">}    IN RANGE    ${</span><span class=3D"nv">length</span><span c=
lass=3D"p">}</span>
<span class=3D"p">        </span><span class=3D"nf">Number Should Be Named<=
/span><span class=3D"p">    ${</span><span class=3D"nv">NUMBERS</span><span=
 class=3D"p">}[${</span><span class=3D"nv">idx</span><span class=3D"p">}]  =
  ${</span><span class=3D"nv">NAMES</span><span class=3D"p">}[${</span><spa=
n class=3D"nv">idx</span><span class=3D"p">}]</span>
<span class=3D"p">    END</span>

<span class=3D"gu">For-in-zip</span><span class=3D"p"></span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">number</span><span=
 class=3D"p">}    ${</span><span class=3D"nv">name</span><span class=3D"p">=
}    IN ZIP    ${</span><span class=3D"nv">NUMBERS</span><span class=3D"p">=
}    ${</span><span class=3D"nv">NAMES</span><span class=3D"p">}</span>
<span class=3D"p">        </span><span class=3D"nf">Number Should Be Named<=
/span><span class=3D"p">    ${</span><span class=3D"nv">number</span><span =
class=3D"p">}    ${</span><span class=3D"nv">name</span><span class=3D"p">}=
</span>
<span class=3D"p">    END</span>
</pre></div>
<p>Similarly as for-in-range and for-in-enumerate loops, for-in-zip loops r=
equire
the cell after the loop variables to read <code>IN ZIP</code> (case-sensiti=
ve).</p>
<p>Values used with for-in-zip loops must be lists or list-like objects, an=
d
there must be same number of loop variables as lists to loop over. Looping
will stop when the shortest list is exhausted.</p>
<p>Note that any lists used with for-in-zip should usually be given as <a c=
lass=3D"reference internal" href=3D"http://robotframework.org/robotframewor=
k/latest/RobotFrameworkUserGuide.html#scalar-variables">scalar
variables</a> like <code>${list}</code>. A <a class=3D"reference internal" =
href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserG=
uide.html#list-variable">list variable</a> only works if its items
themselves are lists.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, the <code>IN ZIP</code> sep=
arator was both
case- and space-insensitive. Such usage is nowadays deprecated
and exactly <code>IN ZIP</code> is required.</p>
</div>
</div>
<div class=3D"section" id=3D"exiting-for-loop">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id643">Exiting for loop</a></h4>
<p>Normally for loops are executed until all the loop values have been iter=
ated
or a keyword used inside the loop fails. If there is a need to exit the loo=
p
earlier, <a class=3D"reference external" href=3D"http://robotframework.org/=
robotframework/latest/libraries/BuiltIn.html">BuiltIn</a> keywords <span cl=
ass=3D"name">Exit For Loop</span> and <span class=3D"name">Exit For Loop If=
</span>
can be used to accomplish that. They works similarly as <code>break</code>
statement in Python, Java, and many other programming languages.</p>
<p><span class=3D"name">Exit For Loop</span> and <span class=3D"name">Exit =
For Loop If</span> keywords can be used
directly inside a for loop or in a keyword that the loop uses. In both case=
s
test execution continues after the loop. It is an error to use these keywor=
ds
outside a for loop.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Exit Example</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">text</span><span class=3D=
"p">} =3D    </span><span class=3D"nf">Set Variable</span><span class=3D"p"=
>    ${</span><span class=3D"nv">EMPTY</span><span class=3D"p">}</span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">var</span><span cl=
ass=3D"p">}    IN    </span><span class=3D"s">one</span><span class=3D"p"> =
   </span><span class=3D"s">two</span><span class=3D"p"></span>
<span class=3D"p">        </span><span class=3D"nf">Run Keyword If</span><s=
pan class=3D"p">    </span><span class=3D"s">'</span><span class=3D"p">${</=
span><span class=3D"nv">var</span><span class=3D"p">}</span><span class=3D"=
s">' =3D=3D 'two'</span><span class=3D"p">    </span><span class=3D"s">Exit=
 For Loop</span><span class=3D"p"></span>
<span class=3D"p">        ${</span><span class=3D"nv">text</span><span clas=
s=3D"p">} =3D    </span><span class=3D"nf">Set Variable</span><span class=
=3D"p">    ${</span><span class=3D"nv">text</span><span class=3D"p">}${</sp=
an><span class=3D"nv">var</span><span class=3D"p">}</span>
<span class=3D"p">    END</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">text</span><span class=3D"p">}=
    </span><span class=3D"s">one</span><span class=3D"p"></span>
</pre></div>
<p>In the above example it would be possible to use <span class=3D"name">Ex=
it For Loop If</span>
instead of using <span class=3D"name">Exit For Loop</span> with <span class=
=3D"name">Run Keyword If</span>.
For more information about these keywords, including more usage examples,
see their documentation in the <a class=3D"reference external" href=3D"http=
://robotframework.org/robotframework/latest/libraries/BuiltIn.html">BuiltIn=
</a> library.</p>
</div>
<div class=3D"section" id=3D"continuing-for-loop">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id644">Continuing for loop</a></h4>
<p>In addition to exiting a for loop prematurely, it is also possible to
continue to the next iteration of the loop before all keywords have been
executed. This can be done using <a class=3D"reference external" href=3D"ht=
tp://robotframework.org/robotframework/latest/libraries/BuiltIn.html">Built=
In</a> keywords <span class=3D"name">Continue For Loop</span>
and <span class=3D"name">Continue For Loop If</span>, that work like <code>=
continue</code> statement
in many programming languages.</p>
<p><span class=3D"name">Continue For Loop</span> and <span class=3D"name">C=
ontinue For Loop If</span> keywords can be used
directly inside a for loop or in a keyword that the loop uses. In both case=
s
rest of the keywords in that iteration are skipped and execution continues
from the next iteration. If these keywords are used on the last iteration,
execution continues after the loop. It is an error to use these keywords
outside a for loop.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Continue Example</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">text</span><span class=3D=
"p">} =3D    </span><span class=3D"nf">Set Variable</span><span class=3D"p"=
>    ${</span><span class=3D"nv">EMPTY</span><span class=3D"p">}</span>
<span class=3D"p">    FOR    ${</span><span class=3D"nv">var</span><span cl=
ass=3D"p">}    IN    </span><span class=3D"s">one</span><span class=3D"p"> =
   </span><span class=3D"s">two</span><span class=3D"p">    </span><span cl=
ass=3D"s">three</span><span class=3D"p"></span>
<span class=3D"p">        </span><span class=3D"nf">Continue For Loop If</s=
pan><span class=3D"p">    </span><span class=3D"s">'</span><span class=3D"p=
">${</span><span class=3D"nv">var</span><span class=3D"p">}</span><span cla=
ss=3D"s">' =3D=3D 'two'</span><span class=3D"p"></span>
<span class=3D"p">        ${</span><span class=3D"nv">text</span><span clas=
s=3D"p">} =3D    </span><span class=3D"nf">Set Variable</span><span class=
=3D"p">    ${</span><span class=3D"nv">text</span><span class=3D"p">}${</sp=
an><span class=3D"nv">var</span><span class=3D"p">}</span>
<span class=3D"p">    END</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">text</span><span class=3D"p">}=
    </span><span class=3D"s">onethree</span><span class=3D"p"></span>
</pre></div>
<p>For more information about these keywords, including usage examples, see=
 their
documentation in the <a class=3D"reference external" href=3D"http://robotfr=
amework.org/robotframework/latest/libraries/BuiltIn.html">BuiltIn</a> libra=
ry.</p>
</div>
<div class=3D"section" id=3D"removing-unnecessary-keywords-from-outputs">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id645">Removing unnecessary keywords=
 from outputs</a></h4>
<p>For loops with multiple iterations often create lots of output and
considerably increase the size of the generated <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#output-file">output</a> and <a class=3D"reference internal" =
href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserG=
uide.html#log-file">log</a> files.
It is possible to <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#removing-and-fl=
attening-keywords">remove unnecessary keywords</a> from the outputs using
<span class=3D"option">--RemoveKeywords FOR</span> command line option.</p>
</div>
<div class=3D"section" id=3D"repeating-single-keyword">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id646">Repeating single keyword</a><=
/h4>
<p>For loops can be excessive in situations where there is only a need to
repeat a single keyword. In these cases it is often easier to use
<a class=3D"reference external" href=3D"http://robotframework.org/robotfram=
ework/latest/libraries/BuiltIn.html">BuiltIn</a> keyword <span class=3D"nam=
e">Repeat Keyword</span>. This keyword takes a
keyword and how many times to repeat it as arguments. The times to
repeat the keyword can have an optional postfix <code>times</code> or <code=
>x</code>
to make the syntax easier to read.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Repeat Keyword</span><span =
class=3D"p">    </span><span class=3D"s">5</span><span class=3D"p">    </sp=
an><span class=3D"s">Some Keyword</span><span class=3D"p">    </span><span =
class=3D"s">arg1</span><span class=3D"p">    </span><span class=3D"s">arg2<=
/span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Repeat Keyword</span><span =
class=3D"p">    </span><span class=3D"s">42 times</span><span class=3D"p"> =
   </span><span class=3D"s">My Keyword</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Repeat Keyword</span><span =
class=3D"p">    ${</span><span class=3D"nv">var</span><span class=3D"p">}  =
  </span><span class=3D"s">Another Keyword</span><span class=3D"p">    </sp=
an><span class=3D"s">argument</span><span class=3D"p"></span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"conditional-execution">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id647">2.9.4&nbsp;&nbsp;&nbsp;Condit=
ional execution</a></h3>
<p>In general, it is not recommended to have conditional logic in test
cases, or even in user keywords, because it can make them hard to
understand and maintain. Instead, this kind of logic should be in test
libraries, where it can be implemented using natural programming
language constructs. However, some conditional logic can be useful at
times, and even though Robot Framework does not have an actual if/else
construct, there are several ways to get the same effect.</p>
<ul class=3D"simple">
<li>The name of the keyword used as a setup or a teardown of both <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#test-setup-and-teardown">test
cases</a> and <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#suite-setup-and-tea=
rdown">test suites</a> can be specified using a
variable. This facilitates changing them, for example, from
the command line.</li>
<li>The <a class=3D"reference external" href=3D"http://robotframework.org/r=
obotframework/latest/libraries/BuiltIn.html">BuiltIn</a> keyword <span clas=
s=3D"name">Run Keyword</span> takes a keyword to actually
execute as an argument, and it can thus be a variable. The value of
the variable can, for example, be got dynamically from an earlier
keyword or given from the command line.</li>
<li>The <a class=3D"reference external" href=3D"http://robotframework.org/r=
obotframework/latest/libraries/BuiltIn.html">BuiltIn</a> keywords <span cla=
ss=3D"name">Run Keyword If</span> and <span class=3D"name">Run Keyword
Unless</span> execute a named keyword only if a certain expression is
true or false, respectively. They are ideally suited to creating
simple if/else constructs. For an example, see the documentation of
the former.</li>
<li>Another <a class=3D"reference external" href=3D"http://robotframework.o=
rg/robotframework/latest/libraries/BuiltIn.html">BuiltIn</a> keyword, <span=
 class=3D"name">Set Variable If</span>, can be used to set
variables dynamically based on a given expression.</li>
<li>There are several <a class=3D"reference external" href=3D"http://robotf=
ramework.org/robotframework/latest/libraries/BuiltIn.html">BuiltIn</a> keyw=
ords that allow executing a named
keyword only if a test case or test suite has failed or passed.</li>
</ul>
</div>
<div class=3D"section" id=3D"parallel-execution-of-keywords">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id648">2.9.5&nbsp;&nbsp;&nbsp;Parall=
el execution of keywords</a></h3>
<p>When parallel execution is needed, it must be implemented in test librar=
y
level so that the library executes the code on background. Typically this
means that the library needs a keyword like <span class=3D"name">Start Some=
thing</span> that
starts the execution and returns immediately, and another keyword like
<span class=3D"name">Get Results From Something</span> that waits until the=
 result is available
and returns it. See <a class=3D"reference external" href=3D"http://robotfra=
mework.org/robotframework/latest/libraries/OperatingSystem.html">OperatingS=
ystem</a> library keywords <span class=3D"name">Start Process</span>
and <span class=3D"name">Read Process Output</span> for an example.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"executing-test-cases">
<h1><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id441">3&nbsp;&nbsp;&nbsp;Executing =
test cases</a></h1>
<div class=3D"contents local topic" id=3D"id171">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id172" id=3D"id649">3.1&nbsp;=
&nbsp;&nbsp;Basic usage</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-execution" id=3D"id650">=
3.2&nbsp;&nbsp;&nbsp;Test execution</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#task-execution" id=3D"id651">=
3.3&nbsp;&nbsp;&nbsp;Task execution</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#post-processing-outputs" id=
=3D"id652">3.4&nbsp;&nbsp;&nbsp;Post-processing outputs</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#configuring-execution" id=3D"=
id653">3.5&nbsp;&nbsp;&nbsp;Configuring execution</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#created-outputs" id=3D"id654"=
>3.6&nbsp;&nbsp;&nbsp;Created outputs</a></li>
</ul>
</div>
<div class=3D"section" id=3D"id172">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id649">3.1&nbsp;&nbsp;&nbsp;Basic us=
age</a></h2>
<p>Robot Framework test cases are executed from the command line, and the
end result is, by default, an <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#out=
put-file">output file</a> in XML format and an HTML
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#report-file">report</a> and <a cl=
ass=3D"reference internal" href=3D"http://robotframework.org/robotframework=
/latest/RobotFrameworkUserGuide.html#log-file">log</a>. After the execution=
, output files can be combined and
otherwise <a class=3D"reference internal" href=3D"http://robotframework.org=
/robotframework/latest/RobotFrameworkUserGuide.html#post-processing-outputs=
">post-processed</a> with the Rebot tool.</p>
<div class=3D"contents local topic" id=3D"id174">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#starting-test-execution" id=
=3D"id655">3.1.1&nbsp;&nbsp;&nbsp;Starting test execution</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#synopsis" id=3D"id656">Synops=
is</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#specifying-test-data-to-be-ex=
ecuted" id=3D"id657">Specifying test data to be executed</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-command-line-options" i=
d=3D"id658">3.1.2&nbsp;&nbsp;&nbsp;Using command line options</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-options" id=3D"id659">U=
sing options</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#short-and-long-options" id=3D=
"id660">Short and long options</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-option-values" id=3D"=
id661">Setting option values</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#disabling-options-accepting-n=
o-values" id=3D"id662">Disabling options accepting no values</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#simple-patterns" id=3D"id663"=
>Simple patterns</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#tag-patterns" id=3D"id664">Ta=
g patterns</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#robot-options-and-rebot-optio=
ns-environment-variables" id=3D"id665"><tt class=3D"docutils literal">ROBOT=
_OPTIONS</tt> and <tt class=3D"docutils literal">REBOT_OPTIONS</tt> environ=
ment variables</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-results" id=3D"id666">3.=
1.3&nbsp;&nbsp;&nbsp;Test results</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#command-line-output" id=3D"id=
667">Command line output</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#generated-output-files" id=3D=
"id668">Generated output files</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#return-codes" id=3D"id669">Re=
turn codes</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#errors-and-warnings-during-ex=
ecution" id=3D"id670">Errors and warnings during execution</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#argument-files" id=3D"id671">=
3.1.4&nbsp;&nbsp;&nbsp;Argument files</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#argument-file-syntax" id=3D"i=
d672">Argument file syntax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-argument-files" id=3D"i=
d673">Using argument files</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#reading-argument-files-from-s=
tandard-input" id=3D"id674">Reading argument files from standard input</a><=
/li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-help-and-version-info=
rmation" id=3D"id675">3.1.5&nbsp;&nbsp;&nbsp;Getting help and version infor=
mation</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-start-up-scripts" id=
=3D"id676">3.1.6&nbsp;&nbsp;&nbsp;Creating start-up scripts</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#modifying-java-startup-parame=
ters" id=3D"id677">Modifying Java startup parameters</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#debugging-problems" id=3D"id6=
78">3.1.7&nbsp;&nbsp;&nbsp;Debugging problems</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-the-python-debugger-pdb=
" id=3D"id679">Using the Python debugger (pdb)</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"starting-test-execution">
<span id=3D"id175"></span><h3><a class=3D"toc-backref" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#id655">3.1=
.1&nbsp;&nbsp;&nbsp;Starting test execution</a></h3>
<div class=3D"section" id=3D"synopsis">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id656">Synopsis</a></h4>
<pre class=3D"literal-block">robot [options] data_sources
python|jython|ipy|pypy -m robot [options] data_sources
python|jython|ipy|pypy path/to/robot/ [options] data_sources
java -jar robotframework.jar [options] data_sources
</pre>
<p>Test execution is normally started using the <tt class=3D"docutils liter=
al">robot</tt> <a class=3D"reference internal" href=3D"http://robotframewor=
k.org/robotframework/latest/RobotFrameworkUserGuide.html#using-robot-and-re=
bot-scripts">runner script</a>.
Alternatively it is possible to execute the installed <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#executing-installed-robot-module">robot module</a> or
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#executing-installed-robot-directo=
ry">robot directory</a> directly using the selected interpreter. The final
alternative is using the <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#standalo=
ne-jar-distribution">standalone JAR distribution</a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The <tt class=3D"docutils literal">robot</tt> script is n=
ew in Robot Framework 3.0. Prior to that,
there were <tt class=3D"docutils literal">pybot</tt>, <tt class=3D"docutils=
 literal">jybot</tt> and <tt class=3D"docutils literal">ipybot</tt> scripts=
 that
executed tests using Python, Jython and IronPython, respectively.
These scripts were removed in Robot Framework 3.1 and nowadays
<tt class=3D"docutils literal">robot</tt> must be used regardless the inter=
preter.</p>
</div>
<p>Regardless of execution approach, the path (or paths) to the test data t=
o be
executed is given as an argument after the command. Additionally, different
command line options can be used to alter the test execution or generated
outputs in many ways.</p>
</div>
<div class=3D"section" id=3D"specifying-test-data-to-be-executed">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id657">Specifying test data to be ex=
ecuted</a></h4>
<p>Robot Framework test cases are created in <a class=3D"reference internal=
" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUse=
rGuide.html#test-case-files">files</a> and <a class=3D"reference internal" =
href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserG=
uide.html#test-suite-directories">directories</a>,
and they are executed by giving the path to the file or directory in
question to the selected runner script. The path can be absolute or,
more commonly, relative to the directory where tests are executed
from. The given file or directory creates the top-level test suite,
which gets its name, unless overridden with the <span class=3D"option">--na=
me</span> <a class=3D"reference internal" href=3D"http://robotframework.org=
/robotframework/latest/RobotFrameworkUserGuide.html#setting-the-name">optio=
n</a>,
from the <a class=3D"reference internal" href=3D"http://robotframework.org/=
robotframework/latest/RobotFrameworkUserGuide.html#test-suite-name-and-docu=
mentation">file or directory name</a>. Different execution possibilities
are illustrated in the examples below. Note that in these examples, as
well as in other examples in this section, only the <tt class=3D"docutils l=
iteral">robot</tt> script
is used, but other execution approaches could be used similarly.</p>
<pre class=3D"literal-block">robot tests.robot
robot path/to/my_tests/
robot c:\robot\tests.robot
</pre>
<p>It is also possible to give paths to several test case files or
directories at once, separated with spaces. In this case, Robot
Framework creates the top-level test suite automatically, and
the specified files and directories become its child test suites. The name
of the created test suite is got from child suite names by
catenating them together with an ampersand (&amp;) and spaces. For example,
the name of the top-level suite in the first example below is
<span class=3D"name">My Tests &amp; Your Tests</span>. These automatically =
created names are
often quite long and complicated. In most cases, it is thus better to
use the <span class=3D"option">--name</span> option for overriding it, as i=
n the second
example below:</p>
<pre class=3D"literal-block">robot my_tests.robot your_tests.robot
robot --name Example path/to/tests/pattern_*.robot
</pre>
</div>
</div>
<div class=3D"section" id=3D"using-command-line-options">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id658">3.1.2&nbsp;&nbsp;&nbsp;Using =
command line options</a></h3>
<p>Robot Framework provides a number of command line options that can be
used to control how test cases are executed and what outputs are
generated. This section explains the option syntax, and what
options actually exist. How they can be used is discussed elsewhere
in this chapter.</p>
<div class=3D"section" id=3D"using-options">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id659">Using options</a></h4>
<p>When options are used, they must always be given between the runner
script and the data sources. For example:</p>
<pre class=3D"literal-block">robot -L debug my_tests.robot
robot --include smoke --variable HOST:10.0.0.42 path/to/tests/
</pre>
</div>
<div class=3D"section" id=3D"short-and-long-options">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id660">Short and long options</a></h=
4>
<p>Options always have a long name, such as <span class=3D"option">--name</=
span>, and the
most frequently needed options also have a short name, such as
<span class=3D"option">-N</span>. In addition to that, long options can be =
shortened as
long as they are unique. For example, <code>--logle DEBUG</code> works,
while <code>--lo log.html</code> does not, because the former matches only
<span class=3D"option">--loglevel</span>, but the latter matches several op=
tions. Short
and shortened options are practical when executing test cases
manually, but long options are recommended in <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#start-up-scripts">start-up scripts</a>,
because they are easier to understand.</p>
<p>The long option format is case-insensitive, which facilitates writing op=
tion
names in an easy-to-read format. For example, <span class=3D"option">--Suit=
eStatLevel</span>
is equivalent to, but easier to read than <span class=3D"option">--suitesta=
tlevel</span>.</p>
</div>
<div class=3D"section" id=3D"setting-option-values">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id661">Setting option values</a></h4=
>
<p>Most of the options require a value, which is given after the option
name. Both short and long options accept the value separated
from the option name with a space, as in <code>--include tag</code>
or <code>-i tag</code>. With long options, the separator can also be the
equals sign, for example <code>--include=3Dtag</code>, and with short optio=
ns the
separator can be omitted, as in <code>-itag</code>.</p>
<p>Some options can be specified several times. For example,
<code>--variable VAR1:value --variable VAR2:another</code> sets two
variables. If the options that take only one value are used several
times, the value given last is effective.</p>
</div>
<div class=3D"section" id=3D"disabling-options-accepting-no-values">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id662">Disabling options accepting n=
o values</a></h4>
<p>Options accepting no values can be disabled by using the same option aga=
in
with <code>no</code> prefix added or dropped. The last option has precedenc=
e regardless
of how many times options are used. For example, <code>--dryrun --dryrun --=
nodryrun
--nostatusrc --statusrc</code> would not activate the dry-run mode and woul=
d return
normal status rc.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Support for adding or dropping <code>no</code> prefix is =
a new feature in
Robot Framework 2.9. In earlier versions options accepting no
values could be disabled by using the exact same option again.</p>
</div>
</div>
<div class=3D"section" id=3D"simple-patterns">
<span id=3D"wildcards"></span><h4><a class=3D"toc-backref" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#id663"=
>Simple patterns</a></h4>
<p>Many command line options take arguments as <em>simple patterns</em>. Th=
ese
<a class=3D"reference external" href=3D"http://en.wikipedia.org/wiki/Glob_(=
programming)">glob-like patterns</a> are matched according to the following=
 rules:</p>
<ul class=3D"simple">
<li><code>*</code> matches any string, even an empty string.</li>
<li><code>?</code> matches any single character.</li>
<li><code>[abc]</code> matches one character in the bracket.</li>
<li><code>[!abc]</code> matches one character not in the bracket.</li>
<li><code>[a-z]</code> matches one character from the range in the bracket.=
</li>
<li><code>[!a-z]</code> matches one character not from the range in the bra=
cket.</li>
<li>Unlike with glob patterns normally, path separator characters <code>/</=
code> and
<span class=3D"codesc">\</span> and the newline character <code>\n</code> a=
re matches by the above
wildcards.</li>
<li>Unless noted otherwise, pattern matching is case, space, and underscore=
 insensitive.</li>
</ul>
<p>Examples:</p>
<pre class=3D"literal-block">--test Example*        # Matches tests with na=
me starting 'Example'.
--test Example[1-2]    # Matches tests 'Example1' and 'Example2'.
--include f??          # Matches tests with a tag that starts with 'f' is t=
hree characters long.
</pre>
<p>All matching in above examples is case, space and underscore insensitive=
.
For example, the second example would also match test named <code>example 1=
</code>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Support for brackets like <code>[abc]</code> and <code>[!=
a-z]</code> is new in
Robot Framework 3.1.</p>
</div>
</div>
<div class=3D"section" id=3D"tag-patterns">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id664">Tag patterns</a></h4>
<p>Most tag related options accept arguments as <em>tag patterns</em>. They=
 have all the
same characteristics as <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#simple-pa=
tterns">simple patterns</a>, but they also support <code>AND</code>,
<code>OR</code> and <code>NOT</code> operators explained below. These opera=
tors can be
used for combining two or more individual tags or patterns together.</p>
<dl class=3D"docutils">
<dt><code>AND</code> or <code>&amp;</code></dt>
<dd><p class=3D"first">The whole pattern matches if all individual patterns=
 match. <code>AND</code> and
<code>&amp;</code> are equivalent:</p>
<pre class=3D"last literal-block">--include fooANDbar     # Matches tests c=
ontaining tags 'foo' and 'bar'.
--exclude xx&amp;yy&amp;zz      # Matches tests containing tags 'xx', 'yy',=
 and 'zz'.
</pre>
</dd>
<dt><code>OR</code></dt>
<dd><p class=3D"first">The whole pattern matches if any individual pattern =
matches:</p>
<pre class=3D"last literal-block">--include fooORbar      # Matches tests c=
ontaining either tag 'foo' or tag 'bar'.
--exclude xxORyyORzz    # Matches tests containing any of tags 'xx', 'yy', =
or 'zz'.
</pre>
</dd>
<dt><code>NOT</code></dt>
<dd><p class=3D"first">The whole pattern matches if the pattern on the left=
 side matches but
the one on the right side does not. If used multiple times, none of
the patterns after the first <code>NOT</code> must not match:</p>
<pre class=3D"literal-block">--include fooNOTbar     # Matches tests contai=
ning tag 'foo' but not tag 'bar'.
--exclude xxNOTyyNOTzz  # Matches tests containing tag 'xx' but not tag 'yy=
' or tag 'zz'.
</pre>
<p>Starting from Robot Framework 2.9 the pattern can also start with <code>=
NOT</code>
in which case the pattern matches if the pattern after <code>NOT</code> doe=
s not match:</p>
<pre class=3D"last literal-block">--include NOTfoo        # Matches tests n=
ot containing tag 'foo'
--include NOTfooANDbar  # Matches tests not containing tags 'foo' and 'bar'
</pre>
</dd>
</dl>
<p>The above operators can also be used together. The operator precedence,
from highest to lowest, is <code>AND</code>, <code>OR</code> and <code>NOT<=
/code>:</p>
<pre class=3D"literal-block">--include xANDyORz      # Matches tests contai=
ning either tags 'x' and 'y', or tag 'z'.
--include xORyNOTz      # Matches tests containing either tag 'x' or 'y', b=
ut not tag 'z'.
--include xNOTyANDz     # Matches tests containing tag 'x', but not tags 'y=
' and 'z'.
</pre>
<p>Although tag matching itself is case-insensitive, all operators are
case-sensitive and must be written with upper case letters. If tags themsel=
ves
happen to contain upper case <code>AND</code>, <code>OR</code> or <code>NOT=
</code>, they need to specified
using lower case letters to avoid accidental operator usage:</p>
<pre class=3D"literal-block">--include port          # Matches tests contai=
ning tag 'port', case-insensitively
--include PORT          # Matches tests containing tag 'P' or 'T', case-ins=
ensitively
--exclude handoverORportNOTnotification
</pre>
</div>
<div class=3D"section" id=3D"robot-options-and-rebot-options-environment-va=
riables">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id665"><tt class=3D"docutils literal=
">ROBOT_OPTIONS</tt> and <tt class=3D"docutils literal">REBOT_OPTIONS</tt> =
environment variables</a></h4>
<p>Environment variables <tt class=3D"docutils literal">ROBOT_OPTIONS</tt> =
and <tt class=3D"docutils literal">REBOT_OPTIONS</tt> can be
used to specify default options for <a class=3D"reference internal" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#starting-test-execution">test execution</a> and <a class=3D"reference in=
ternal" href=3D"http://robotframework.org/robotframework/latest/RobotFramew=
orkUserGuide.html#post-processing-outputs">result
post-processing</a>, respectively. The options and their values must be
defined as a space separated list and they are placed in front of any
explicit options on the command line. The main use case for these
environment variables is setting global default values for certain options =
to
avoid the need to repeat them every time tests are run or Rebot used.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"nb">export</span>=
 <span class=3D"nv">ROBOT_OPTIONS</span><span class=3D"o">=3D</span><span c=
lass=3D"s2">"--critical regression --tagdoc 'mytag:Example doc with spaces'=
"</span>
robot tests.robot
<span class=3D"nb">export</span> <span class=3D"nv">REBOT_OPTIONS</span><sp=
an class=3D"o">=3D</span><span class=3D"s2">"--reportbackground green:yello=
w:red"</span>
rebot --name example output.xml
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Possibility to have spaces in values by surrounding them =
in quotes
is new in Robot Framework 2.9.2.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"test-results">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id666">3.1.3&nbsp;&nbsp;&nbsp;Test r=
esults</a></h3>
<div class=3D"section" id=3D"command-line-output">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id667">Command line output</a></h4>
<p>The most visible output from test execution is the output displayed in
the command line. All executed test suites and test cases, as well as
their statuses, are shown there in real time. The example below shows the
output from executing a simple test suite with only two test cases:</p>
<pre class=3D"literal-block">=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
Example test suite
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
First test :: Possible test documentation                             | PAS=
S |
---------------------------------------------------------------------------=
---
Second test                                                           | FAI=
L |
Error message is displayed here
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
Example test suite                                                    | FAI=
L |
2 critical tests, 1 passed, 1 failed
2 tests total, 1 passed, 1 failed
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D
Output:  /path/to/output.xml
Report:  /path/to/report.html
Log:     /path/to/log.html
</pre>
<p>There is also a notification on the console
whenever a top-level keyword in a test case ends. A green dot is used if
a keyword passes and a red F if it fails. These markers are written to the =
end
of line and they are overwritten by the test status when the test itself en=
ds.
Writing the markers is disabled if console output is redirected to a file.<=
/p>
</div>
<div class=3D"section" id=3D"generated-output-files">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id668">Generated output files</a></h=
4>
<p>The command line output is very limited, and separate output files are
normally needed for investigating the test results. As the example
above shows, three output files are generated by default. The first
one is in XML format and contains all the information about test
execution. The second is a higher-level report and the third is a more
detailed log file. These files and other possible output files are
discussed in more detail in the section <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#different-output-files">Different output files</a>.</p>
</div>
<div class=3D"section" id=3D"return-codes">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id669">Return codes</a></h4>
<p>Runner scripts communicate the overall test execution status to the
system running them using return codes. When the execution starts
successfully and no <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-criti=
cality">critical test</a> fail, the return code is zero.
All possible return codes are explained in the table below.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Possible return codes</caption>
<colgroup>
<col width=3D"16%">
<col width=3D"84%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">RC</th>
<th class=3D"head">Explanation</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>0</td>
<td>All critical tests passed.</td>
</tr>
<tr><td>1-249</td>
<td>Returned number of critical tests failed.</td>
</tr>
<tr><td>250</td>
<td>250 or more critical failures.</td>
</tr>
<tr><td>251</td>
<td>Help or version information printed.</td>
</tr>
<tr><td>252</td>
<td>Invalid test data or command line options.</td>
</tr>
<tr><td>253</td>
<td>Test execution stopped by user.</td>
</tr>
<tr><td>255</td>
<td>Unexpected internal error.</td>
</tr>
</tbody>
</table>
<p>Return codes should always be easily available after the execution,
which makes it easy to automatically determine the overall execution
status. For example, in bash shell the return code is in special
variable <code>$?</code>, and in Windows it is in <code>%ERRORLEVEL%</code>
variable. If you use some external tool for running tests, consult its
documentation for how to get the return code.</p>
<p>The return code can be set to 0 even if there are critical failures usin=
g
the <span class=3D"option">--NoStatusRC</span> command line option. This mi=
ght be useful, for
example, in continuous integration servers where post-processing of results
is needed before the overall status of test execution can be determined.</p=
>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Same return codes are also used with <a class=3D"referenc=
e internal" href=3D"http://robotframework.org/robotframework/latest/RobotFr=
ameworkUserGuide.html#rebot">Rebot</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"errors-and-warnings-during-execution">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id670">Errors and warnings during ex=
ecution</a></h4>
<p>During the test execution there can be unexpected problems like
failing to import a library or a resource file or a keyword being
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#deprecating-keywords">deprecated<=
/a>. Depending on the severity such problems are categorized
as errors or warnings and they are written into the console (using the
standard error stream), shown on a separate <em>Test Execution Errors</em>
section in log files, and also written into Robot Framework's own
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#system-log">system log</a>. Norma=
lly these errors and warnings are generated by Robot
Framework itself, but libraries can also log <a class=3D"reference internal=
" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUse=
rGuide.html#errors-and-warnings">errors and warnings</a>.
Example below illustrates how errors and warnings look like in the log file=
.</p>
<table class=3D"messages">
  <tbody><tr>
    <td class=3D"time">20090322&nbsp;19:58:42.528</td>
    <td class=3D"error level">ERROR</td>
    <td class=3D"msg">Error in file '/home/robot/tests.robot' in table 'Set=
ting' in element on row 2: Resource file 'resource.robot' does not exist</t=
d>
  </tr>
  <tr>
    <td class=3D"time">20090322&nbsp;19:58:43.931</td>
    <td class=3D"warn level">WARN</td>
    <td class=3D"msg">Keyword 'SomeLibrary.Example Keyword' is deprecated. =
Use keyword `Other Keyword` instead.</td>
  </tr>
</tbody></table></div>
</div>
<div class=3D"section" id=3D"argument-files">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id671">3.1.4&nbsp;&nbsp;&nbsp;Argume=
nt files</a></h3>
<p>Argument files allow placing all or some command line options and argume=
nts
into an external file where they will be read. This avoids the problems wit=
h
characters that are problematic on the command line. If lot of options or
arguments are needed, argument files also prevent the command that is used =
on
the command line growing too long.</p>
<p>Argument files are taken into use with <span class=3D"option">--argument=
file (-A)</span> option
along with possible other command line options.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Unlike other <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#sh=
ort-and-long-options">long command line options</a>, <span class=3D"option"=
>--argumentfile</span>
cannot be given in shortened format like <span class=3D"option">--argumentf=
</span>.
Additionally, using it case-insensitively like
<span class=3D"option">--ArgumentFile</span> is only supported by Robot Fra=
mework 3.0.2
and newer.</p>
</div>
<div class=3D"section" id=3D"argument-file-syntax">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id672">Argument file syntax</a></h4>
<p>Argument files can contain both command line options and paths to the te=
st data,
one option or data source per line. Both short and long options are support=
ed,
but the latter are recommended because they are easier to understand.
Argument files can contain any characters without escaping, but spaces in
the beginning and end of lines are ignored. Additionally, empty lines and
lines starting with a hash mark (#) are ignored:</p>
<pre class=3D"literal-block">--doc This is an example (where "special chara=
cters" are ok!)
--metadata X:Value with spaces
--variable VAR:Hello, world!
# This is a comment
path/to/my/tests
</pre>
<p>In the above example the separator between options and their values is a=
 single
space. It is possible to use either an equal
sign (=3D) or any number of spaces. As an example, the following three line=
s are
identical:</p>
<pre class=3D"literal-block">--name An Example
--name=3DAn Example
--name       An Example
</pre>
<p>If argument files contain non-ASCII characters, they must be saved using
UTF-8 encoding.</p>
</div>
<div class=3D"section" id=3D"using-argument-files">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id673">Using argument files</a></h4>
<p>Argument files can be used either alone so that they contain all the opt=
ions
and paths to the test data, or along with other options and paths. When
an argument file is used with other arguments, its contents are placed into
the original list of arguments to the same place where the argument file
option was. This means that options in argument files can override options
before it, and its options can be overridden by options after it. It is pos=
sible
to use <span class=3D"option">--argumentfile</span> option multiple times o=
r even recursively:</p>
<pre class=3D"literal-block">robot --argumentfile all_arguments.robot
robot --name Example --argumentfile other_options_and_paths.robot
robot --argumentfile default_options.txt --name Example my_tests.robot
robot -A first.txt -A second.txt -A third.txt tests.robot
</pre>
</div>
<div class=3D"section" id=3D"reading-argument-files-from-standard-input">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id674">Reading argument files from s=
tandard input</a></h4>
<p>Special argument file name <code>STDIN</code> can be used to read argume=
nts from the
standard input stream instead of a file. This can be useful when generating
arguments with a script:</p>
<pre class=3D"literal-block">generate_arguments.sh | robot --argumentfile S=
TDIN
generate_arguments.sh | robot --name Example --argumentfile STDIN tests.rob=
ot
</pre>
</div>
</div>
<div class=3D"section" id=3D"getting-help-and-version-information">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id675">3.1.5&nbsp;&nbsp;&nbsp;Gettin=
g help and version information</a></h3>
<p>Both when executing test cases and when post-processing outputs, it is p=
ossible
to get command line help with the option <span class=3D"option">--help (-h)=
</span>.
These help texts have a short general overview and
briefly explain the available command line options.</p>
<p>All runner scripts also support getting the version information with
the option <span class=3D"option">--version</span>. This information also c=
ontains Python
or Jython version and the platform type:</p>
<pre class=3D"literal-block">$ robot --version
Robot Framework 3.1 (Jython 2.7.0 on java1.7.0_45)

C:\&gt;rebot --version
Rebot 3.1 (Python 3.7.0 on win32)
</pre>
</div>
<div class=3D"section" id=3D"creating-start-up-scripts">
<span id=3D"start-up-scripts"></span><span id=3D"start-up-script"></span><h=
3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframework=
/latest/RobotFrameworkUserGuide.html#id676">3.1.6&nbsp;&nbsp;&nbsp;Creating=
 start-up scripts</a></h3>
<p>Test cases are often executed automatically by a continuous
integration system or some other mechanism. In such cases, there is a
need to have a script for starting the test execution, and possibly
also for post-processing outputs somehow. Similar scripts are also
useful when running tests manually, especially if a large number of
command line options are needed or setting up the test environment is
complicated.</p>
<p>In UNIX-like environments, shell scripts provide a simple but powerful
mechanism for creating custom start-up scripts. Windows batch files
can also be used, but they are more limited and often also more
complicated. A platform-independent alternative is using Python or
some other high-level programming language. Regardless of the
language, it is recommended that long option names are used, because
they are easier to understand than the short names.</p>
<p>In the first examples, the same web tests are executed with different
browsers and the results combined afterwards. This is easy with shell
scripts, as practically you just list the needed commands one after
another:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"ch">#!/bin/bash</=
span>
robot --variable BROWSER:Firefox --name Firefox --log none --report none --=
output out/fx.xml login
robot --variable BROWSER:IE --name IE --log none --report none --output out=
/ie.xml login
rebot --name Login --outputdir out --output login.xml out/fx.xml out/ie.xml
</pre></div>
<p>Implementing the above example with Windows batch files is not very
complicated, either. The most important thing to remember is that
because <tt class=3D"docutils literal">robot</tt> and <tt class=3D"docutils=
 literal">rebot</tt> scripts are implemented as batch files on
Windows, <tt class=3D"docutils literal">call</tt> must be used when running=
 them from another batch
file. Otherwise execution would end when the first batch file is
finished.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"p">@</span><span =
class=3D"k">echo</span> off
<span class=3D"k">call</span> robot --variable BROWSER:Firefox --name Firef=
ox --log none --report none --output out\fx.xml login
<span class=3D"k">call</span> robot --variable BROWSER:IE --name IE --log n=
one --report none --output out\ie.xml login
<span class=3D"k">call</span> rebot --name Login --outputdir out --output l=
ogin.xml out\fx.xml out\ie.xml
</pre></div>
<p>In the next examples, jar files under the <span class=3D"file">lib</span=
> directory are
put into <tt class=3D"docutils literal">CLASSPATH</tt> before starting the =
test execution. In these
examples, start-up scripts require that paths to the executed test
data are given as arguments. It is also possible to use command line
options freely, even though some options have already been set in the
script. All this is relatively straight-forward using bash:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"ch">#!/bin/bash</=
span>

<span class=3D"nv">cp</span><span class=3D"o">=3D</span>.
<span class=3D"k">for</span> jar in lib/*.jar<span class=3D"p">;</span> <sp=
an class=3D"k">do</span>
    <span class=3D"nv">cp</span><span class=3D"o">=3D</span><span class=3D"=
nv">$cp</span>:<span class=3D"nv">$jar</span>
<span class=3D"k">done</span>
<span class=3D"nb">export</span> <span class=3D"nv">CLASSPATH</span><span c=
lass=3D"o">=3D</span><span class=3D"nv">$cp</span>

robot --ouputdir /tmp/logs --suitestatlevel <span class=3D"m">2</span> <spa=
n class=3D"nv">$*</span>
</pre></div>
<p>Implementing this using Windows batch files is slightly more complicated=
. The
difficult part is setting the variable containing the needed JARs inside a =
For
loop, because, for some reason, that is not possible without a helper
function.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"p">@</span><span =
class=3D"k">echo</span> off

<span class=3D"k">set</span> <span class=3D"nv">CP</span><span class=3D"p">=
=3D</span>.
<span class=3D"k">for</span> <span class=3D"se">%%</span>jar <span class=3D=
"k">in</span> <span class=3D"p">(</span>lib\*.jar<span class=3D"p">)</span>=
 <span class=3D"k">do</span> <span class=3D"p">(</span>
    <span class=3D"k">call</span> <span class=3D"p">:</span><span class=3D"=
nl">set_cp</span> <span class=3D"se">%%</span>jar
<span class=3D"p">)</span>
<span class=3D"k">set</span> <span class=3D"nv">CLASSPATH</span><span class=
=3D"p">=3D</span><span class=3D"nv">%CP%</span>

robot --ouputdir c:\temp\logs --suitestatlevel 2 <span class=3D"nv">%*</spa=
n>

<span class=3D"k">goto</span> <span class=3D"p">:</span><span class=3D"nl">=
eof</span>

<span class=3D"p">:</span><span class=3D"c1">: Helper for setting variables=
 inside a for loop</span>
<span class=3D"p">:</span><span class=3D"nl">set_cp</span>
    <span class=3D"k">set</span> <span class=3D"nv">CP</span><span class=3D=
"p">=3D</span><span class=3D"nv">%CP%</span>;<span class=3D"nv">%1</span>
<span class=3D"k">goto</span> <span class=3D"p">:</span><span class=3D"nl">=
eof</span>
</pre></div>
<div class=3D"section" id=3D"modifying-java-startup-parameters">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id677">Modifying Java startup parame=
ters</a></h4>
<p>Sometimes when using Jython there is need to alter the Java startup para=
meters.
The most common use case is increasing the JVM maximum memory size as the
default value may not be enough for creating reports and logs when
outputs are very big. There are two easy ways to configure JVM options:</p>
<ol class=3D"arabic">
<li><p class=3D"first">Set <tt class=3D"docutils literal">JYTHON_OPTS</tt> =
environment variable. This can be done permanently
in operating system level or per execution in a custom start-up script.</p>
</li>
<li><p class=3D"first">Pass the needed Java parameters with <span class=3D"=
option">-J</span> option to Jython that
will pass them forward to Java. This is especially easy when <a class=3D"re=
ference internal" href=3D"http://robotframework.org/robotframework/latest/R=
obotFrameworkUserGuide.html#executing-installed-robot-module">executing
installed robot module</a> directly:</p>
<pre class=3D"literal-block">jython -J-Xmx1024m -m robot tests.robot
</pre>
</li>
</ol>
</div>
</div>
<div class=3D"section" id=3D"debugging-problems">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id678">3.1.7&nbsp;&nbsp;&nbsp;Debugg=
ing problems</a></h3>
<p>A test case can fail because the system under test does not work
correctly, in which case the test has found a bug, or because the test
itself is buggy. The error message explaining the failure is shown on
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#command-line-output">command =
line output</a> and in the <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#report=
-file">report file</a>, and sometimes
the error message alone is enough to pinpoint the problem. More often
that not, however, <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#log-file">log =
files</a> are needed because they have also
other log messages and they show which keyword actually failed.</p>
<p>When a failure is caused by the tested application, the error message
and log messages ought to be enough to understand what caused it. If
that is not the case, the test library does not provide <a class=3D"referen=
ce internal" href=3D"http://robotframework.org/robotframework/latest/RobotF=
rameworkUserGuide.html#communicating-with-robot-framework">enough
information</a> and needs to be enhanced. In this situation running the
same test manually, if possible, may also reveal more information
about the issue.</p>
<p>Failures caused by test cases themselves or by keywords they use can
sometimes be hard to debug. If the error message, for example, tells
that a keyword is used with wrong number of arguments fixing the
problem is obviously easy, but if a keyword is missing or fails in
unexpected way finding the root cause can be harder. The first place
to look for more information is the <a class=3D"reference internal" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#errors-and-warnings-during-execution">execution errors</a> section in
the log file. For example, an error about a failed test library import
may well explain why a test has failed due to a missing keyword.</p>
<p>If the log file does not provide enough information by default, it is
possible to execute tests with a lower <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#log-levels">log level</a>. For example
tracebacks showing where in the code the failure occurred are logged
using the <code>DEBUG</code> level, and this information is invaluable when
the problem is in an individual library keyword.</p>
<p>Logged tracebacks do not contain information about methods inside Robot
Framework itself. If you suspect an error is caused by a bug in the framewo=
rk,
you can enable showing internal traces by setting environment variable
<tt class=3D"docutils literal">ROBOT_INTERNAL_TRACES</tt> to any non-empty =
value. This functionality is
new in Robot Framework 2.9.2.</p>
<p>If the log file still does not have enough information, it is a good
idea to enable the <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#system-log">sy=
slog</a> and see what information it provides. It is
also possible to add some keywords to the test cases to see what is
going on. Especially <a class=3D"reference external" href=3D"http://robotfr=
amework.org/robotframework/latest/libraries/BuiltIn.html">BuiltIn</a> keywo=
rds <span class=3D"name">Log</span> and <span class=3D"name">Log
Variables</span> are useful. If nothing else works, it is always possible t=
o
search help from <a class=3D"reference internal" href=3D"http://robotframew=
ork.org/robotframework/latest/RobotFrameworkUserGuide.html#mailing-lists">m=
ailing lists</a> or elsewhere.</p>
<div class=3D"section" id=3D"using-the-python-debugger-pdb">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id679">Using the Python debugger (pd=
b)</a></h4>
<p>It is also possible to use the <a class=3D"reference external" href=3D"h=
ttp://docs.python.org/library/pdb.html">pdb</a> module from the Python stan=
dard
library to set a break point and interactively debug a running test.
The typical way of invoking pdb by inserting:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">pdb</span><span class=3D"p">;</span> <span class=3D"n">=
pdb</span><span class=3D"o">.</span><span class=3D"n">set_trace</span><span=
 class=3D"p">()</span>
</pre></div>
<p>at the location you want to break into debugger will not work correctly
with Robot Framework, as the standard output stream is
redirected during keyword execution. Instead, you can use the following:</p=
>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">sys</span><span class=3D"o">,</span> <span class=3D"nn"=
>pdb</span><span class=3D"p">;</span> <span class=3D"n">pdb</span><span cla=
ss=3D"o">.</span><span class=3D"n">Pdb</span><span class=3D"p">(</span><spa=
n class=3D"n">stdout</span><span class=3D"o">=3D</span><span class=3D"n">sy=
s</span><span class=3D"o">.</span><span class=3D"n">__stdout__</span><span =
class=3D"p">)</span><span class=3D"o">.</span><span class=3D"n">set_trace</=
span><span class=3D"p">()</span>
</pre></div>
<p>from within a python library or alternativley:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"c">Evaluate</span=
><span class=3D"p">    </span><span class=3D"c">pdb.Pdb(stdout=3Dsys.__stdo=
ut__).set_trace()</span><span class=3D"p">    </span><span class=3D"c">modu=
les=3Dsys, pdb</span><span class=3D"p"></span>
</pre></div>
<p>can be used directly in a test case.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"test-execution">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id650">3.2&nbsp;&nbsp;&nbsp;Test exe=
cution</a></h2>
<p>This section describes how the test suite structure created from the par=
sed
test data is executed, how to continue executing a test case after failures=
,
and how to stop the whole test execution gracefully.</p>
<div class=3D"contents local topic" id=3D"id188">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#execution-flow" id=3D"id680">=
3.2.1&nbsp;&nbsp;&nbsp;Execution flow</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#executed-suites-and-tests" id=
=3D"id681">Executed suites and tests</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setups-and-teardowns" id=3D"i=
d682">Setups and teardowns</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#execution-order" id=3D"id683"=
>Execution order</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#passing-execution" id=3D"id68=
4">Passing execution</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#continue-on-failure" id=3D"id=
685">3.2.2&nbsp;&nbsp;&nbsp;Continue on failure</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#run-keyword-and-ignore-error-=
and-run-keyword-and-expect-error-keywords" id=3D"id686"><span class=3D"name=
">Run Keyword And Ignore Error</span> and <span class=3D"name">Run Keyword =
And Expect Error</span> keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#special-failures-from-keyword=
s" id=3D"id687">Special failures from keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#run-keyword-and-continue-on-f=
ailure-keyword" id=3D"id688"><span class=3D"name">Run Keyword And Continue =
On Failure</span> keyword</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#execution-continues-on-teardo=
wns-automatically" id=3D"id689">Execution continues on teardowns automatica=
lly</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#all-top-level-keywords-are-ex=
ecuted-when-tests-have-templates" id=3D"id690">All top-level keywords are e=
xecuted when tests have templates</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#stopping-test-execution-grace=
fully" id=3D"id691">3.2.3&nbsp;&nbsp;&nbsp;Stopping test execution graceful=
ly</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#pressing-ctrl-c" id=3D"id692"=
>Pressing <code>Ctrl-C</code></a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-signals" id=3D"id693">U=
sing signals</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-keywords" id=3D"id694">=
Using keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#stopping-when-first-test-case=
-fails" id=3D"id695">Stopping when first test case fails</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#stopping-on-parsing-or-execut=
ion-error" id=3D"id696">Stopping on parsing or execution error</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#handling-teardowns" id=3D"id6=
97">Handling teardowns</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"execution-flow">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id680">3.2.1&nbsp;&nbsp;&nbsp;Execut=
ion flow</a></h3>
<div class=3D"section" id=3D"executed-suites-and-tests">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id681">Executed suites and tests</a>=
</h4>
<p>Test cases are always executed within a test suite. A test suite
created from a <a class=3D"reference internal" href=3D"http://robotframewor=
k.org/robotframework/latest/RobotFrameworkUserGuide.html#test-case-files">t=
est case file</a> has tests directly, whereas suites
created from <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#test-suite-directori=
es">directories</a> have child test suites which either have
tests or their own child suites. By default all the tests in an
executed suite are run, but it is possible to <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#selecting-test-cases">select tests</a> using
options <span class=3D"option">--test</span>, <span class=3D"option">--suit=
e</span>, <span class=3D"option">--include</span> and
<span class=3D"option">--exclude</span>. Suites containing no tests are ign=
ored.</p>
<p>The execution starts from the top-level test suite. If the suite has
tests they are executed one-by-one, and if it has suites they are
executed recursively in depth-first order. When an individual test
case is executed, the keywords it contains are run in a
sequence. Normally the execution of the current test ends if any
of the keywords fails, but it is also possible to
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#continue-on-failure">continue aft=
er failures</a>. The exact <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#execut=
ion-order">execution order</a> and how
possible <a class=3D"reference internal" href=3D"http://robotframework.org/=
robotframework/latest/RobotFrameworkUserGuide.html#setups-and-teardowns">se=
tups and teardowns</a> affect the execution are discussed
in the following sections.</p>
</div>
<div class=3D"section" id=3D"setups-and-teardowns">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id682">Setups and teardowns</a></h4>
<p>Setups and teardowns can be used on <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#test-setup-and-teardown">test suite</a>, <a class=3D"reference intern=
al" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#suite-setup-and-teardown">test case</a> and
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#user-keyword-teardown">user keywo=
rd</a> levels.</p>
<div class=3D"section" id=3D"suite-setup">
<h5>Suite setup</h5>
<p>If a test suite has a setup, it is executed before its tests and child
suites. If the suite setup passes, test execution continues
normally. If it fails, all the test cases the suite and its child
suites contain are marked failed. The tests and possible suite setups
and teardowns in the child test suites are not executed.</p>
<p>Suite setups are often used for setting up the test environment.
Because tests are not run if the suite setup fails, it is easy to use
suite setups for verifying that the environment is in state in which the
tests can be executed.</p>
</div>
<div class=3D"section" id=3D"suite-teardown">
<h5>Suite teardown</h5>
<p>If a test suite has a teardown, it is executed after all its test
cases and child suites. Suite teardowns are executed regardless of the
test status and even if the matching suite setup fails. If the suite
teardown fails, all tests in the suite are marked failed afterwards in
reports and logs.</p>
<p>Suite teardowns are mostly used for cleaning up the test environment
after the execution. To ensure that all these tasks are done, <a class=3D"r=
eference internal" href=3D"http://robotframework.org/robotframework/latest/=
RobotFrameworkUserGuide.html#continue-on-failure">all the
keywords used in the teardown are executed</a> even if some of them
fail.</p>
</div>
<div class=3D"section" id=3D"test-setup">
<h5>Test setup</h5>
<p>Possible test setup is executed before the keywords of the test case.
If the setup fails, the keywords are not executed. The main use
for test setups is setting up the environment for that particular test
case.</p>
</div>
<div class=3D"section" id=3D"test-teardown">
<h5>Test teardown</h5>
<p>Possible test teardown is executed after the test case has been
executed. It is executed regardless of the test status and also
if test setup has failed.</p>
<p>Similarly as suite teardown, test teardowns are used mainly for
cleanup activities. Also they are executed fully even if some of their
keywords fail.</p>
</div>
<div class=3D"section" id=3D"keyword-teardown">
<h5>Keyword teardown</h5>
<p><a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#creating-user-keywords">User k=
eywords</a> cannot have setups, but they can have teardowns that work
exactly like other teardowns. Keyword teardowns are run after the keyword i=
s
executed otherwise, regardless the status, and they are executed fully even
if some of their keywords fail.</p>
</div>
</div>
<div class=3D"section" id=3D"execution-order">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id683">Execution order</a></h4>
<p>Test cases in a test suite are executed in the same order as they are de=
fined
in the test case file. Test suites inside a higher level test suite are
executed in case-insensitive alphabetical order based on the file or direct=
ory
name. If multiple files and/or directories are given from the command line,
they are executed in the order they are given.</p>
<p>If there is a need to use certain test suite execution order inside a
directory, it is possible to add prefixes like <span class=3D"file">01</spa=
n> and
<span class=3D"file">02</span> into file and directory names. Such prefixes=
 are not
included in the generated test suite name if they are separated from
the base name of the suite with two underscores:</p>
<pre class=3D"literal-block">01__my_suite.robot -&gt; My Suite
02__another_suite.robot -&gt; Another Suite
</pre>
<p>If the alphabetical ordering of test suites inside suites is
problematic, a good workaround is giving them separately in the
required order. This easily leads to overly long start-up commands,
but <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#argument-files">argument file=
s</a> allow listing files nicely one file per line.</p>
<p>It is also possible to <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#randomi=
zing-execution-order">randomize the execution order</a> using
the <span class=3D"option">--randomize</span> option.</p>
</div>
<div class=3D"section" id=3D"passing-execution">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id684">Passing execution</a></h4>
<p>Typically test cases, setups and teardowns are considered passed if
all keywords they contain are executed and none of them fail. It is
also possible to use <a class=3D"reference external" href=3D"http://robotfr=
amework.org/robotframework/latest/libraries/BuiltIn.html">BuiltIn</a> keywo=
rds
<span class=3D"name">Pass Execution</span> and <span class=3D"name">Pass Ex=
ecution If</span> to stop execution with
PASS status and skip the remaining keywords.</p>
<p>How <span class=3D"name">Pass Execution</span> and <span class=3D"name">=
Pass Execution If</span> behave
in different situations is explained below:</p>
<ul class=3D"simple">
<li>When used in any <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#setups-and-t=
eardowns">setup or teardown</a> (suite, test or keyword), these
keywords pass that setup or teardown. Possible teardowns of the started
keywords are executed. Test execution or statuses are not affected otherwis=
e.</li>
<li>When used in a test case outside setup or teardown, the keywords pass t=
hat
particular test case. Possible test and keyword teardowns are executed.</li=
>
<li>Possible <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#continue-on-failure"=
>continuable failures</a> that occur before these keyword are used,
as well as failures in teardowns executed afterwards, will fail the executi=
on.</li>
<li>It is mandatory to give an explanation message
why execution was interrupted, and it is also possible to
modify test case tags. For more details, and usage examples, see the
<a class=3D"reference external" href=3D"http://robotframework.org/robotfram=
ework/latest/libraries/BuiltIn.html">documentation of these keywords</a>.</=
li>
</ul>
<p>Passing execution in the middle of a test, setup or teardown should be
used with care. In the worst case it leads to tests that skip all the
parts that could actually uncover problems in the tested application.
In cases where execution cannot continue do to external factors,
it is often safer to fail the test case and make it <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#setting-criticality">non-critical</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"continue-on-failure">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id685">3.2.2&nbsp;&nbsp;&nbsp;Contin=
ue on failure</a></h3>
<p>Normally test cases are stopped immediately when any of their keywords
fail. This behavior shortens test execution time and prevents
subsequent keywords hanging or otherwise causing problems if the
system under test is in unstable state. This has the drawback that often
subsequent keywords would give more information about the state of the
system. Hence Robot Framework offers several features to continue after
failures.</p>
<div class=3D"section" id=3D"run-keyword-and-ignore-error-and-run-keyword-a=
nd-expect-error-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id686"><span class=3D"name">Run Keyw=
ord And Ignore Error</span> and <span class=3D"name">Run Keyword And Expect=
 Error</span> keywords</a></h4>
<p><a class=3D"reference external" href=3D"http://robotframework.org/robotf=
ramework/latest/libraries/BuiltIn.html">BuiltIn</a> keywords <span class=3D=
"name">Run Keyword And Ignore Error</span> and <span class=3D"name">Run
Keyword And Expect Error</span> handle failures so that test execution is n=
ot
terminated immediately. Though, using these keywords for this purpose
often adds extra complexity to test cases, so the following features are
worth considering to make continuing after failures easier.</p>
</div>
<div class=3D"section" id=3D"special-failures-from-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id687">Special failures from keyword=
s</a></h4>
<p><a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#using-test-libraries">Library =
keywords</a> report failures using exceptions, and it is
possible to use special exceptions to tell the core framework that
execution can continue regardless the failure. How these exceptions
can be created is explained in the <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#continuing-test-execution-despite-of-failures">test library API chapter</=
a>.</p>
<p>When a test ends and there has been one or more continuable failure,
the test will be marked failed. If there are more than one failure,
all of them will be enumerated in the final error message:</p>
<pre class=3D"literal-block">Several failures occurred:

1) First error message.

2) Second error message ...
</pre>
<p>Test execution ends also if a normal failure occurs after continuable
failures. Also in that case all the failures will be listed in the
final error message.</p>
<p>The return value from failed keywords, possibly assigned to a
variable, is always the Python <code>None</code>.</p>
</div>
<div class=3D"section" id=3D"run-keyword-and-continue-on-failure-keyword">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id688"><span class=3D"name">Run Keyw=
ord And Continue On Failure</span> keyword</a></h4>
<p><a class=3D"reference external" href=3D"http://robotframework.org/robotf=
ramework/latest/libraries/BuiltIn.html">BuiltIn</a> keyword <span class=3D"=
name">Run Keyword And Continue On Failure</span> allows
converting any failure into a continuable failure. These failures are
handled by the framework exactly the same way as continuable failures
originating from library keywords.</p>
</div>
<div class=3D"section" id=3D"execution-continues-on-teardowns-automatically=
">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id689">Execution continues on teardo=
wns automatically</a></h4>
<p>To make it sure that all the cleanup activities are taken care of, the
continue on failure mode is automatically on in <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#setups-and-teardowns">test and suite
teardowns</a>. In practice this means that in teardowns all the
keywords in all levels are always executed.</p>
</div>
<div class=3D"section" id=3D"all-top-level-keywords-are-executed-when-tests=
-have-templates">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id690">All top-level keywords are ex=
ecuted when tests have templates</a></h4>
<p>When using <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#test-templates">tes=
t templates</a>, all the data rows are always executed to
make it sure that all the different combinations are tested. In this
usage continuing is limited to the top-level keywords, and inside them
the execution ends normally if there are non-continuable failures.</p>
</div>
</div>
<div class=3D"section" id=3D"stopping-test-execution-gracefully">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id691">3.2.3&nbsp;&nbsp;&nbsp;Stoppi=
ng test execution gracefully</a></h3>
<p>Sometimes there is a need to stop the test execution before all the test=
s
have finished, but so that logs and reports are created. Different ways how
to accomplish this are explained below. In all these cases the remaining
test cases are marked failed.</p>
<p>The tests that are automatically failed get <code>robot:exit</code> tag =
and
the generated report will include <code>NOT robot:exit</code> <a class=3D"r=
eference internal" href=3D"http://robotframework.org/robotframework/latest/=
RobotFrameworkUserGuide.html#generating-combined-tag-statistics">combined t=
ag pattern</a>
to easily see those tests that were not skipped. Note that the test in whic=
h
the exit happened does not get the <code>robot:exit</code> tag.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, the special tag was named <=
code>robot-exit</code>.</p>
</div>
<div class=3D"section" id=3D"pressing-ctrl-c">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id692">Pressing <code>Ctrl-C</code><=
/a></h4>
<p>The execution is stopped when <code>Ctrl-C</code> is pressed in the cons=
ole
where the tests are running. When running the tests on Python, the
execution is stopped immediately, but with Jython it ends only after
the currently executing keyword ends.</p>
<p>If <code>Ctrl-C</code> is pressed again, the execution ends immediately =
and
reports and logs are not created.</p>
</div>
<div class=3D"section" id=3D"using-signals">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id693">Using signals</a></h4>
<p>On Unix-like machines it is possible to terminate test execution
using signals <code>INT</code> and <code>TERM</code>. These signals can be =
sent
from the command line using <tt class=3D"docutils literal">kill</tt> comman=
d, and sending signals can
also be easily automated.</p>
<p>Signals have the same limitation on Jython as pressing <code>Ctrl-C</cod=
e>.
Similarly also the second signal stops the execution forcefully.</p>
</div>
<div class=3D"section" id=3D"using-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id694">Using keywords</a></h4>
<p>The execution can be stopped also by the executed keywords. There is a
separate <span class=3D"name">Fatal Error</span> <a class=3D"reference exte=
rnal" href=3D"http://robotframework.org/robotframework/latest/libraries/Bui=
ltIn.html">BuiltIn</a> keyword for this purpose, and
custom keywords can use <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#stopping-=
test-execution">fatal exceptions</a> when they fail.</p>
</div>
<div class=3D"section" id=3D"stopping-when-first-test-case-fails">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id695">Stopping when first test case=
 fails</a></h4>
<p>If option <span class=3D"option">--exitonfailure (-X)</span> is used, te=
st execution stops
immediately if any <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-critic=
ality">critical test</a> fails. The remaining tests are marked
as failed without actually executing them.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The short option <span class=3D"option">-X</span> is new =
in Robot Framework 3.0.1.</p>
</div>
</div>
<div class=3D"section" id=3D"stopping-on-parsing-or-execution-error">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id696">Stopping on parsing or execut=
ion error</a></h4>
<p>Robot Framework separates <em>failures</em> caused by failing keywords f=
rom <em>errors</em>
caused by, for example, invalid settings or failed test library imports.
By default these errors are reported as <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#errors-and-warnings-during-execution">test execution errors</a>, but=
 errors
themselves do not fail tests or affect execution otherwise. If
<span class=3D"option">--exitonerror</span> option is used, however, all su=
ch errors are considered
fatal and execution stopped so that remaining tests are marked failed. With
parsing errors encountered before execution even starts, this means that no
tests are actually run.</p>
</div>
<div class=3D"section" id=3D"handling-teardowns">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id697">Handling teardowns</a></h4>
<p>By default teardowns of the tests and suites that have been started are
executed even if the test execution is stopped using one of the methods
above. This allows clean-up activities to be run regardless how execution
ends.</p>
<p>It is also possible to skip teardowns when execution is stopped by using
<span class=3D"option">--skipteardownonexit</span> option. This can be usef=
ul if, for example,
clean-up tasks take a lot of time.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"task-execution">
<span id=3D"executing-tasks"></span><h2><a class=3D"toc-backref" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
id651">3.3&nbsp;&nbsp;&nbsp;Task execution</a></h2>
<p>Robot Framework can be used also for other automation purposes than test
automation, and starting from Robot Framework 3.1 it is possible to
explicitly <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#creating-tasks">create=
</a> and execute tasks. For most parts task execution
and test execution work the same way, and this section explains the
differences.</p>
<div class=3D"contents local topic" id=3D"id207">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#generic-automation-mode" id=
=3D"id698">3.3.1&nbsp;&nbsp;&nbsp;Generic automation mode</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#task-related-command-line-opt=
ions" id=3D"id699">3.3.2&nbsp;&nbsp;&nbsp;Task related command line options=
</a></li>
</ul>
</div>
<div class=3D"section" id=3D"generic-automation-mode">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id698">3.3.1&nbsp;&nbsp;&nbsp;Generi=
c automation mode</a></h3>
<p>When Robot Framework is used execute a file and it notices that the file
has tasks, not tests, it automatically sets itself into the generic automat=
ion
mode. This mode does not change the actual execution at all, but when
logs and reports are created, they use term <em>task</em>, not <em>test</em=
>. They have,
for example, headers like <code>Task Log</code> and <code>Task Statistics</=
code> instead of
<code>Test Log</code> and <code>Test Statistics</code>.</p>
<p>The generic automation mode can also be enabled by using the <span class=
=3D"option">--rpa</span>
option. In that case the executed files can have either tests or tasks.
Alternatively <span class=3D"option">--norpa</span> can be used to force th=
e test automation
mode even if executed files contain tasks. If neither of these options are
used, it is an error to execute multiple files so that some have tests and
others have tasks.</p>
<p>The execution mode is stored in the generated <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#output-file">output file</a> and read by
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#rebot">Rebot</a> if outputs are p=
ost-processed. The mode can also <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
controlling-execution-mode">be set when
using Rebot</a> if necessary.</p>
</div>
<div class=3D"section" id=3D"task-related-command-line-options">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id699">3.3.2&nbsp;&nbsp;&nbsp;Task r=
elated command line options</a></h3>
<p>All normal command line options can be used when executing tasks. If the=
re
is a need to <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#selecting-test-cases=
">select only certain tasks for execution</a>, <span class=3D"option">--tas=
k</span>
can be used instead of <span class=3D"option">--test</span>. Additionally t=
he aforementioned
<span class=3D"option">--rpa</span> can be used to control the execution mo=
de.</p>
</div>
</div>
<div class=3D"section" id=3D"post-processing-outputs">
<span id=3D"rebot"></span><h2><a class=3D"toc-backref" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#id652">3.4=
&nbsp;&nbsp;&nbsp;Post-processing outputs</a></h2>
<p><a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#output-file">XML output files<=
/a> that are generated during the test execution can be
post-processed afterwards by the Rebot tool, which is an integral
part of Robot Framework. It is used automatically when test
reports and logs are generated during the test execution, and using it
separately allows creating custom reports and logs as well as combining
and merging results.</p>
<div class=3D"contents local topic" id=3D"id210">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-rebot" id=3D"id700">3.4=
.1&nbsp;&nbsp;&nbsp;Using Rebot</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id211" id=3D"id701">Synopsis<=
/a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#specifying-options-and-argume=
nts" id=3D"id702">Specifying options and arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#return-codes-with-rebot" id=
=3D"id703">Return codes with Rebot</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#controlling-execution-mode" i=
d=3D"id704">Controlling execution mode</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-different-reports-an=
d-logs" id=3D"id705">3.4.2&nbsp;&nbsp;&nbsp;Creating different reports and =
logs</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#combining-outputs" id=3D"id70=
6">3.4.3&nbsp;&nbsp;&nbsp;Combining outputs</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#merging-outputs" id=3D"id707"=
>3.4.4&nbsp;&nbsp;&nbsp;Merging outputs</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#merging-re-executed-tests" id=
=3D"id708">Merging re-executed tests</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#merging-suites-executed-in-pi=
eces" id=3D"id709">Merging suites executed in pieces</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"using-rebot">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id700">3.4.1&nbsp;&nbsp;&nbsp;Using =
Rebot</a></h3>
<div class=3D"section" id=3D"id211">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id701">Synopsis</a></h4>
<pre class=3D"literal-block">rebot [options] robot_outputs
python|jython|ipy|pypy -m robot.rebot [options] robot_outputs
python|jython|ipy|pypy path/to/robot/rebot.py [options] robot_outputs
java -jar robotframework.jar rebot [options] robot_outputs
</pre>
<p>The most common way to use Rebot is using the <tt class=3D"docutils lite=
ral">rebot</tt> <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#using-robot-and-r=
ebot-scripts">runner script</a>.
Alternatively it is possible to execute the installed <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#executing-installed-robot-module">robot.rebot module</=
a>
or <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#executing-installed-robot-dire=
ctory">robot/rebot.py file</a> directly using the selected interpreter. The=
 final
alternative is using the <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#standalo=
ne-jar-distribution">standalone JAR distribution</a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Versions prior to Robot Framework 3.0 installed the <tt c=
lass=3D"docutils literal">rebot</tt> script only
with Python, and used <tt class=3D"docutils literal">jyrebot</tt> and <tt c=
lass=3D"docutils literal">ipyrebot</tt> scripts with Jython and
IronPython, respectively. The old interpreter specific scripts were
removed in Robot Framework 3.1 and nowadays <tt class=3D"docutils literal">=
rebot</tt> must always be used.</p>
</div>
</div>
<div class=3D"section" id=3D"specifying-options-and-arguments">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id702">Specifying options and argume=
nts</a></h4>
<p>The basic syntax for using Rebot is exactly the same as when
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#starting-test-execution">starting=
 test execution</a> and also most of the command line options are
identical. The main difference is that arguments to Rebot are
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#output-file">XML output files</a>=
 instead of test data files or directories.</p>
</div>
<div class=3D"section" id=3D"return-codes-with-rebot">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id703">Return codes with Rebot</a></=
h4>
<p>Return codes from Rebot are exactly same as when <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#return-codes">running tests</a>.</p>
</div>
<div class=3D"section" id=3D"controlling-execution-mode">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id704">Controlling execution mode</a=
></h4>
<p>Rebot notices have <a class=3D"reference internal" href=3D"http://robotf=
ramework.org/robotframework/latest/RobotFrameworkUserGuide.html#starting-te=
st-execution">tests</a> or <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#task-e=
xecution">tasks</a> been run, and by default preserves the
execution mode. The mode affects logs and reports so that in the former cas=
e
they will use term <em>test</em> like <code>Test Log</code> and <code>Test =
Statistics</code>, and in
the latter case term <em>task</em> like <code>Task Log</code> and <code>Tas=
k Statistics</code>.</p>
<p>Rebot also supports using <span class=3D"option">--rpa</span> or <span c=
lass=3D"option">--norpa</span> options to set
the execution mode explicitly. This is necessary if multiple output files
are processed and they have conflicting modes.</p>
</div>
</div>
<div class=3D"section" id=3D"creating-different-reports-and-logs">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id705">3.4.2&nbsp;&nbsp;&nbsp;Creati=
ng different reports and logs</a></h3>
<p>You can use Rebot for creating the same reports and logs that
are created automatically during the test execution. Of course, it is
not sensible to create the exactly same files, but, for example,
having one report with all test cases and another with only some
subset of tests can be useful:</p>
<pre class=3D"literal-block">rebot output.xml
rebot path/to/output_file.xml
rebot --include smoke --name Smoke_Tests c:\results\output.xml
</pre>
<p>Another common usage is creating only the output file when running tests
(log and report generation can be disabled with  <code>--log NONE
--report NONE</code>) and generating logs and reports later. Tests can,
for example, be executed on different environments, output files collected
to a central place, and reports and logs created there. This approach can
also work very well if generating reports and logs takes a lot of time when
running tests on Jython. Disabling log and report generation and generating
them later with Rebot can save a lot of time and use less memory.</p>
</div>
<div class=3D"section" id=3D"combining-outputs">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id706">3.4.3&nbsp;&nbsp;&nbsp;Combin=
ing outputs</a></h3>
<p>An important feature in Rebot is its ability to combine
outputs from different test execution rounds. This capability allows,
for example, running the same test cases on different environments and
generating an overall report from all outputs. Combining outputs is
extremely easy, all that needs to be done is giving several output
files as arguments:</p>
<pre class=3D"literal-block">rebot output1.xml output2.xml
rebot outputs/*.xml
</pre>
<p>When outputs are combined, a new top-level test suite is created so
that test suites in the given output files are its child suites. This
works the same way when <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#specifyin=
g-test-data-to-be-executed">multiple test data files or directories are
executed</a>, and also in this case the name of the top-level test
suite is created by joining child suite names with an ampersand (&amp;)
and spaces. These automatically generated names are not that good, and
it is often a good idea to use <span class=3D"option">--name</span> to give=
 a more
meaningful name:</p>
<pre class=3D"literal-block">rebot --name Browser_Compatibility firefox.xml=
 opera.xml safari.xml ie.xml
rebot --include smoke --name Smoke_Tests c:\results\*.xml
</pre>
</div>
<div class=3D"section" id=3D"merging-outputs">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id707">3.4.4&nbsp;&nbsp;&nbsp;Mergin=
g outputs</a></h3>
<p>If same tests are re-executed or a single test suite executed in pieces,
combining results like discussed above creates an unnecessary top-level
test suite. In these cases it is typically better to merge results instead.
Merging is done by using <span class=3D"option">--merge (-R)</span> option =
which changes the way how
Rebot combines two or more output files. This option itself takes no
arguments and all other command line options can be used with it normally:<=
/p>
<pre class=3D"literal-block">rebot --merge --name Example --critical regres=
sion original.xml merged.xml
</pre>
<p>How merging works in practice is explained in the following sections dis=
cussing
its two main use cases.</p>
<div class=3D"section" id=3D"merging-re-executed-tests">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id708">Merging re-executed tests</a>=
</h4>
<p>There is often a need to re-execute a subset of tests, for example, afte=
r
fixing a bug in the system under test or in the tests themselves. This can =
be
accomplished by <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#selecting-test-ca=
ses">selecting test cases</a> by names (<span class=3D"option">--test</span=
> and
<span class=3D"option">--suite</span> options), tags (<span class=3D"option=
">--include</span> and <span class=3D"option">--exclude</span>),
or by previous status (<span class=3D"option">--rerunfailed</span> or <span=
 class=3D"option">--rerunfailedsuites</span>).</p>
<p>Combining re-execution results with the original results using the defau=
lt
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#combining-outputs">combining outp=
uts</a> approach does not work too well. The main problem is
that you get separate test suites and possibly already fixed failures are
also shown. In this situation it is better to use <span class=3D"option">--=
merge (-R)</span>
option to tell Rebot to merge the results instead. In practice this
means that tests from the latter test runs replace tests in the original.
The usage is best illustrated by a practical example using
<span class=3D"option">--rerunfailed</span> and <span class=3D"option">--me=
rge</span> together:</p>
<pre class=3D"literal-block">robot --output original.xml tests             =
             # first execute all tests
robot --rerunfailed original.xml --output rerun.xml tests  # then re-execut=
e failing
rebot --merge original.xml rerun.xml                       # finally merge =
results
</pre>
<p>The message of the merged tests contains a note that results have been
replaced. The message also shows the old status and message of the test.</p=
>
<p>Merged results must always have same top-level test suite. Tests and sui=
tes
in merged outputs that are not found from the original output are added int=
o
the resulting output. How this works in practice is discussed in the next
section.</p>
</div>
<div class=3D"section" id=3D"merging-suites-executed-in-pieces">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id709">Merging suites executed in pi=
eces</a></h4>
<p>Another important use case for the <span class=3D"option">--merge</span>=
 option is merging results
got when running a test suite in pieces using, for example, <span class=3D"=
option">--include</span>
and <span class=3D"option">--exclude</span> options:</p>
<pre class=3D"literal-block">robot --include smoke --output smoke.xml tests=
   # first run some tests
robot --exclude smoke --output others.xml tests  # then run others
rebot --merge smoke.xml others.xml               # finally merge results
</pre>
<p>When merging outputs like this, the resulting output contains all tests =
and
suites found from all given output files. If some test is found from multip=
le
outputs, latest results replace the earlier ones like explained in the prev=
ious
section. Also this merging strategy requires the top-level test suites to
be same in all outputs.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"configuring-execution">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id653">3.5&nbsp;&nbsp;&nbsp;Configur=
ing execution</a></h2>
<p>This section explains different command line options that can be used
for configuring the <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#starting-test=
-execution">test execution</a> or <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#post-processing-outputs">post-processing
outputs</a>. Options related to generated output files are discussed in
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#created-outputs">next section=
</a>.</p>
<div class=3D"contents local topic" id=3D"id219">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#selecting-files-to-parse" id=
=3D"id710">3.5.1&nbsp;&nbsp;&nbsp;Selecting files to parse</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#selecting-test-cases" id=3D"i=
d711">3.5.2&nbsp;&nbsp;&nbsp;Selecting test cases</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#by-test-suite-and-test-case-n=
ames" id=3D"id712">By test suite and test case names</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#by-tag-names" id=3D"id713">By=
 tag names</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#re-executing-failed-test-case=
s" id=3D"id714">Re-executing failed test cases</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#re-executing-failed-test-suit=
es" id=3D"id715">Re-executing failed test suites</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#when-no-tests-match-selection=
" id=3D"id716">When no tests match selection</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-criticality" id=3D"id=
717">3.5.3&nbsp;&nbsp;&nbsp;Setting criticality</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-metadata" id=3D"id718=
">3.5.4&nbsp;&nbsp;&nbsp;Setting metadata</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-the-name" id=3D"id719=
">Setting the name</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-the-documentation" id=
=3D"id720">Setting the documentation</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-free-metadata" id=3D"=
id721">Setting free metadata</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-tags" id=3D"id722">Se=
tting tags</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#configuring-where-to-search-l=
ibraries-and-other-extensions" id=3D"id723">3.5.5&nbsp;&nbsp;&nbsp;Configur=
ing where to search libraries and other extensions</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#locations-automatically-in-mo=
dule-search-path" id=3D"id724">Locations automatically in module search pat=
h</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#pythonpath-jythonpath-and-iro=
npythonpath" id=3D"id725"><tt class=3D"docutils literal">PYTHONPATH</tt>, <=
tt class=3D"docutils literal">JYTHONPATH</tt> and <tt class=3D"docutils lit=
eral">IRONPYTHONPATH</tt></a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-pythonpath-option" id=
=3D"id726">Using <code>--pythonpath</code> option</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#configuring-sys-path-programm=
atically" id=3D"id727">Configuring <code>sys.path</code> programmatically</=
a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#java-classpath" id=3D"id728">=
Java classpath</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-variables" id=3D"id72=
9">3.5.6&nbsp;&nbsp;&nbsp;Setting variables</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#dry-run" id=3D"id730">3.5.7&n=
bsp;&nbsp;&nbsp;Dry run</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#randomizing-execution-order" =
id=3D"id731">3.5.8&nbsp;&nbsp;&nbsp;Randomizing execution order</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#programmatic-modification-of-=
test-data" id=3D"id732">3.5.9&nbsp;&nbsp;&nbsp;Programmatic modification of=
 test data</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#example-select-every-xth-test=
" id=3D"id733">Example: Select every Xth test</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#example-exclude-tests-by-name=
" id=3D"id734">Example: Exclude tests by name</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#example-skip-setups-and-teard=
owns" id=3D"id735">Example: Skip setups and teardowns</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#controlling-console-output" i=
d=3D"id736">3.5.10&nbsp;&nbsp;&nbsp;Controlling console output</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#console-output-type" id=3D"id=
737">Console output type</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#console-width" id=3D"id738">C=
onsole width</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#console-colors" id=3D"id739">=
Console colors</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#console-markers" id=3D"id740"=
>Console markers</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-listeners" id=3D"id74=
1">3.5.11&nbsp;&nbsp;&nbsp;Setting listeners</a></li>
</ul>
</div>
<div class=3D"section" id=3D"selecting-files-to-parse">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id710">3.5.1&nbsp;&nbsp;&nbsp;Select=
ing files to parse</a></h3>
<p>Robot Framework supports test data in <a class=3D"reference internal" hr=
ef=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGui=
de.html#supported-file-formats">various formats</a>, but nowadays the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#plain-text-format">plain text for=
mat</a> in dedicated <code>*.robot</code> files is the most commonly used.
Prior to Robot Framework 3.1, all files in all supported formats were parse=
d,
meaning that also files not containing any test data could be parsed.
To avoid parsing non-data files, especially large and slow to parse files,
Robot Framework 3.0.1 added the <span class=3D"option">--extension (-F)</sp=
an> option to select
which files to parse. In Robot Framework 3.1 parsing other than <code>*.rob=
ot</code>
files was deprecated and the <span class=3D"option">--extension</span> opti=
on can be used to
explicitly tell the framework to parse other files.</p>
<p>The <span class=3D"option">--extension</span> option takes a file extens=
ion as an argument, and
only files with that extension are parsed. If there is a need to parse more
than one kind of files, it is possible to use a colon <code>:</code> to sep=
arate
extensions. Matching extensions is case insensitive.</p>
<pre class=3D"literal-block">robot --extension robot path/to/tests        #=
 Only parse *.robot files
robot --extension ROBOT:TXT path/to/tests    # Parse *.robot and *.txt file=
s
</pre>
<p>If files in one format use different extensions like <tt class=3D"docuti=
ls literal">*.rst</tt> and <tt class=3D"docutils literal">*.rest</tt>,
you need to specify those extensions separately. Using just one of them wou=
ld
mean that other files in that format are skipped.</p>
</div>
<div class=3D"section" id=3D"selecting-test-cases">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id711">3.5.2&nbsp;&nbsp;&nbsp;Select=
ing test cases</a></h3>
<p>Robot Framework offers several command line options for selecting
which test cases to execute. The same options work also when <a class=3D"re=
ference internal" href=3D"http://robotframework.org/robotframework/latest/R=
obotFrameworkUserGuide.html#executing-tasks">executing
tasks</a> and when post-processing outputs with <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#rebot">Rebot</a>.</p>
<div class=3D"section" id=3D"by-test-suite-and-test-case-names">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id712">By test suite and test case n=
ames</a></h4>
<p>Test suites and test cases can be selected by their names with the comma=
nd
line options <span class=3D"option">--suite (-s)</span> and <span class=3D"=
option">--test (-t)</span>,
respectively.  Both of these options can be used several times to
select several test suites or cases. Arguments to these options are
case- and space-insensitive, and there can also be <a class=3D"reference in=
ternal" href=3D"http://robotframework.org/robotframework/latest/RobotFramew=
orkUserGuide.html#simple-patterns">simple
patterns</a> matching multiple names.  If both the <span class=3D"option">-=
-suite</span> and
<span class=3D"option">--test</span> options are used, only test cases in m=
atching suites
with matching names are selected.</p>
<pre class=3D"literal-block">--test Example
--test mytest --test yourtest
--test example*
--test mysuite.mytest
--test *.suite.mytest
--suite example-??
--suite mysuite --test mytest --test your*
</pre>
<p>Using the <span class=3D"option">--suite</span> option is more or less t=
he same as executing only
the appropriate test case file or directory. One major benefit is the
possibility to select the suite based on its parent suite. The syntax
for this is specifying both the parent and child suite names separated
with a dot. In this case, the possible setup and teardown of the parent
suite are executed.</p>
<pre class=3D"literal-block">--suite parent.child
--suite myhouse.myhousemusic --test jack*
</pre>
<p>Selecting individual test cases with the <span class=3D"option">--test</=
span> option is very
practical when creating test cases, but quite limited when running tests
automatically. The <span class=3D"option">--suite</span> option can be usef=
ul in that
case, but in general, selecting test cases by tag names is more
flexible.</p>
<p>When <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#executing-tasks">executin=
g tasks</a>, it is possible to use the <span class=3D"option">--task</span>=
 option
as an alias for <span class=3D"option">--test</span>.</p>
</div>
<div class=3D"section" id=3D"by-tag-names">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id713">By tag names</a></h4>
<p>It is possible to include and exclude test cases by <a class=3D"referenc=
e internal" href=3D"http://robotframework.org/robotframework/latest/RobotFr=
ameworkUserGuide.html#tagging-test-cases">tag</a> names with the
<span class=3D"option">--include (-i)</span> and <span class=3D"option">--e=
xclude (-e)</span> options, respectively.
If the <span class=3D"option">--include</span> option is used, only test ca=
ses having a matching
tag are selected, and with the <span class=3D"option">--exclude</span> opti=
on test cases having a
matching tag are not. If both are used, only tests with a tag
matching the former option, and not with a tag matching the latter,
are selected.</p>
<pre class=3D"literal-block">--include example
--exclude not_ready
--include regression --exclude long_lasting
</pre>
<p>Both <span class=3D"option">--include</span> and <span class=3D"option">=
--exclude</span> can be used several
times to match multiple tags. In that case a test is selected
if it has a tag that matches any included tags, and also has no tag
that matches any excluded tags.</p>
<p>In addition to specifying a tag to match fully, it is possible to use
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#tag-patterns">tag patterns</a> wh=
ere <code>*</code> and <code>?</code> are wildcards and
<code>AND</code>, <code>OR</code>, and <code>NOT</code> operators can be us=
ed for
combining individual tags or patterns together:</p>
<pre class=3D"literal-block">--include feature-4?
--exclude bug*
--include fooANDbar
--exclude xxORyyORzz
--include fooNOTbar
</pre>
<p>Selecting test cases by tags is a very flexible mechanism and allows
many interesting possibilities:</p>
<ul class=3D"simple">
<li>A subset of tests to be executed before other tests, often called smoke
tests, can be tagged with <code>smoke</code> and executed with <code>--incl=
ude smoke</code>.</li>
<li>Unfinished test can be committed to version control with a tag such as
<code>not_ready</code> and excluded from the test execution with
<code>--exclude not_ready</code>.</li>
<li>Tests can be tagged with <code>sprint-&lt;num&gt;</code>, where
<code>&lt;num&gt;</code> specifies the number of the current sprint, and
after executing all test cases, a separate report containing only
the tests for a certain sprint can be generated (for example, <code>rebot
--include sprint-42 output.xml</code>).</li>
</ul>
</div>
<div class=3D"section" id=3D"re-executing-failed-test-cases">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id714">Re-executing failed test case=
s</a></h4>
<p>Command line option <span class=3D"option">--rerunfailed (-R)</span> can=
 be used to select all failed
tests from an earlier <a class=3D"reference internal" href=3D"http://robotf=
ramework.org/robotframework/latest/RobotFrameworkUserGuide.html#output-file=
">output file</a> for re-execution. This option is useful,
for example, if running all tests takes a lot of time and one wants to
iteratively fix failing test cases.</p>
<pre class=3D"literal-block">robot tests                             # firs=
t execute all tests
robot --rerunfailed output.xml tests    # then re-execute failing
</pre>
<p>Behind the scenes this option selects the failed tests as they would hav=
e been
selected individually with the <span class=3D"option">--test</span> option.=
 It is possible to further
fine-tune the list of selected tests by using <span class=3D"option">--test=
</span>, <span class=3D"option">--suite</span>,
<span class=3D"option">--include</span> and <span class=3D"option">--exclud=
e</span> options.</p>
<p>Using an output not originating from executing the same tests that are r=
un
now causes undefined results. Additionally, it is an error if the output
contains no failed tests. Using a special value <code>NONE</code> as the ou=
tput
is same as not specifying this option at all.</p>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p class=3D"last">Re-execution results and original results can be <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#merging-outputs">merged together</a>
using the <span class=3D"option">--merge</span> command line option.</p>
</div>
</div>
<div class=3D"section" id=3D"re-executing-failed-test-suites">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id715">Re-executing failed test suit=
es</a></h4>
<p>Command line option <span class=3D"option">--rerunfailedsuites (-S)</spa=
n> can be used to select all
failed suites from an earlier <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#out=
put-file">output file</a> for re-execution. Like
<span class=3D"option">--rerunfailed (-R)</span>, this option is useful whe=
n full test execution
takes a lot of time. Note that all tests from a failed test suite will be
re-executed, even passing ones. This option is useful when the tests in
a test suite depends on each other.</p>
<p>Behind the scenes this option selects the failed suites as they would ha=
ve been
selected individually with the <span class=3D"option">--suite</span> option=
. It is possible to further
fine-tune the list of selected tests by using <span class=3D"option">--test=
</span>, <span class=3D"option">--suite</span>,
<span class=3D"option">--include</span> and <span class=3D"option">--exclud=
e</span> options.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><span class=3D"option">--rerunfailedsuites</span> option =
was added in Robot Framework 3.0.1.</p>
</div>
</div>
<div class=3D"section" id=3D"when-no-tests-match-selection">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id716">When no tests match selection=
</a></h4>
<p>By default when no tests match the selection criteria test execution fai=
ls
with an error like:</p>
<pre class=3D"literal-block">[ ERROR ] Suite 'Example' with includes 'xxx' =
contains no test cases.
</pre>
<p>Because no outputs are generated, this behavior can be problematic if te=
sts
are executed and results processed automatically. Luckily a command line
option <span class=3D"option">--RunEmptySuite</span> can be used to force t=
he suite to be executed
also in this case. As a result normal outputs are created but show zero
executed tests. The same option can be used also to alter the behavior when
an empty directory or a test case file containing no tests is executed.</p>
<p>Similar situation can occur also when processing output files with <a cl=
ass=3D"reference internal" href=3D"http://robotframework.org/robotframework=
/latest/RobotFrameworkUserGuide.html#rebot">Rebot</a>.
It is possible that no test match the used filtering criteria or that
the output file contained no tests to begin with. By default executing
Rebot fails in these cases, but it has a separate
<span class=3D"option">--ProcessEmptySuite</span> option that can be used t=
o alter the behavior.
In practice this option works the same way as <span class=3D"option">--RunE=
mptySuite</span> when
running tests.</p>
</div>
</div>
<div class=3D"section" id=3D"setting-criticality">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id717">3.5.3&nbsp;&nbsp;&nbsp;Settin=
g criticality</a></h3>
<p>The final result of test execution is determined based on
critical tests. If a single critical test fails, the whole test run is
considered failed. On the other hand, non-critical test cases can
fail and the overall status is still considered passed.</p>
<p>All test cases are considered critical by default, but this can be chang=
ed
with the <span class=3D"option">--critical (-c)</span> and <span class=3D"o=
ption">--noncritical (-n)</span>
options. These options specify which tests are critical
based on <a class=3D"reference internal" href=3D"http://robotframework.org/=
robotframework/latest/RobotFrameworkUserGuide.html#tagging-test-cases">tags=
</a>, similarly as <span class=3D"option">--include</span> and
<span class=3D"option">--exclude</span> are used to <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#by-tag-names">select tests by tags</a>.
If only <span class=3D"option">--critical</span> is used, test cases with a
matching tag are critical. If only <span class=3D"option">--noncritical</sp=
an> is used,
tests without a matching tag are critical. Finally, if both are
used, only test with a critical tag but without a non-critical tag are
critical.</p>
<p>Both <span class=3D"option">--critical</span> and <span class=3D"option"=
>--noncritical</span> also support same <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#tag-patterns">tag
patterns</a> as <span class=3D"option">--include</span> and <span class=3D"=
option">--exclude</span>. This means that pattern
matching is case, space, and underscore insensitive, <code>*</code> and <co=
de>?</code>
are supported as wildcards, and <code>AND</code>, <code>OR</code> and <code=
>NOT</code>
operators can be used to create combined patterns.</p>
<pre class=3D"literal-block">--critical regression
--noncritical not_ready
--critical iter-* --critical req-* --noncritical req-6??
</pre>
<p>The most common use case for setting criticality is having test cases
that are not ready or test features still under development in the
test execution. These tests could also be excluded from the
test execution altogether with the <span class=3D"option">--exclude</span> =
option, but
including them as non-critical tests enables you to see when
they start to pass.</p>
<p>Criticality set when tests are
executed is not stored anywhere. If you want to keep same criticality
when <a class=3D"reference internal" href=3D"http://robotframework.org/robo=
tframework/latest/RobotFrameworkUserGuide.html#post-processing-outputs">pos=
t-processing outputs</a> with Rebot, you need to
use <span class=3D"option">--critical</span> and/or <span class=3D"option">=
--noncritical</span> also with it:</p>
<pre class=3D"literal-block"># Use rebot to create new log and report from =
the output created during execution
robot --critical regression --outputdir all tests.robot
rebot --name Smoke --include smoke --critical regression --outputdir smoke =
all/output.xml

# No need to use --critical/--noncritical when no log or report is created
robot --log NONE --report NONE tests.robot
rebot --critical feature1 output.xml
</pre>
</div>
<div class=3D"section" id=3D"setting-metadata">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id718">3.5.4&nbsp;&nbsp;&nbsp;Settin=
g metadata</a></h3>
<div class=3D"section" id=3D"setting-the-name">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id719">Setting the name</a></h4>
<p>When Robot Framework parses test data, <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#test-suite-name-and-documentation">test suite names are created
from file and directory names</a>. The name of the top-level test suite
can, however, be overridden with the command line option
<span class=3D"option">--name (-N)</span>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, underscores in the value we=
re
converted to spaces. Nowadays values containing spaces need
to be escaped or quoted like, for example, <code>--name "My example"</code>=
.</p>
</div>
</div>
<div class=3D"section" id=3D"setting-the-documentation">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id720">Setting the documentation</a>=
</h4>
<p>In addition to <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#test-suite-name=
-and-documentation">defining documentation in the test data</a>, documentat=
ion
of the top-level suite can be given from the command line with the
option <span class=3D"option">--doc (-D)</span> The value can contain simpl=
e <a class=3D"reference internal" href=3D"http://robotframework.org/robotfr=
amework/latest/RobotFrameworkUserGuide.html#documentation-formatting">HTML =
formatting</a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, underscores in the value we=
re
converted to spaces same way as with the <span class=3D"option">--name</spa=
n> option.</p>
</div>
</div>
<div class=3D"section" id=3D"setting-free-metadata">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id721">Setting free metadata</a></h4=
>
<p><a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#free-test-suite-metadata">Free=
 test suite metadata</a> may also be given from the command line with the
option <span class=3D"option">--metadata (-M)</span>. The argument must be =
in the format
<code>name:value</code>, where <code>name</code> the name of the metadata t=
o set and
<code>value</code> is its value. The value can contain simple <a class=3D"r=
eference internal" href=3D"http://robotframework.org/robotframework/latest/=
RobotFrameworkUserGuide.html#documentation-formatting">HTML formatting</a>.
This option may be used several times to set multiple metadata values.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, underscores in the value we=
re
converted to spaces same way as with the <span class=3D"option">--name</spa=
n> option.</p>
</div>
</div>
<div class=3D"section" id=3D"setting-tags">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id722">Setting tags</a></h4>
<p>The command line option <span class=3D"option">--settag (-G)</span> can =
be used to set
the given tag to all executed test cases. This option may be used
several times to set multiple tags.</p>
</div>
</div>
<div class=3D"section" id=3D"configuring-where-to-search-libraries-and-othe=
r-extensions">
<span id=3D"module-search-path"></span><h3><a class=3D"toc-backref" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#id723">3.5.5&nbsp;&nbsp;&nbsp;Configuring where to search libraries and =
other extensions</a></h3>
<p>When Robot Framework imports a <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#specifying-library-to-import">test library</a>, <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#setting-listeners">listener</a>, or some other
Python based extension, it uses the Python interpreter to import the module
containing the extension from the system. The list of locations where modul=
es
are looked for is called <em>the module search path</em>, and its contents =
can be
configured using different approaches explained in this section.
When importing Java based libraries or other extensions on Jython, Java
classpath is used in addition to the normal module search path.</p>
<p>Robot Framework uses Python's module search path also when importing <a =
class=3D"reference internal" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#resource-and-variable-files">resourc=
e
and variable files</a> if the specified path does not match any file direct=
ly.</p>
<p>The module search path being set correctly so that libraries and other
extensions are found is a requirement for successful test execution. If
you need to customize it using approaches explained below, it is often
a good idea to create a custom <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#st=
art-up-script">start-up script</a>.</p>
<div class=3D"section" id=3D"locations-automatically-in-module-search-path"=
>
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id724">Locations automatically in mo=
dule search path</a></h4>
<p>Python interpreters have their own standard library as well as a directo=
ry
where third party modules are installed automatically in the module search
path. This means that test libraries <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#packaging-libraries">packaged using Python's own packaging
system</a> are automatically installed so that they can be imported without
any additional configuration.</p>
</div>
<div class=3D"section" id=3D"pythonpath-jythonpath-and-ironpythonpath">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id725"><tt class=3D"docutils literal=
">PYTHONPATH</tt>, <tt class=3D"docutils literal">JYTHONPATH</tt> and <tt c=
lass=3D"docutils literal">IRONPYTHONPATH</tt></a></h4>
<p>Python, Jython and IronPython read additional locations to be added to
the module search path from <tt class=3D"docutils literal">PYTHONPATH</tt>,=
 <tt class=3D"docutils literal">JYTHONPATH</tt> and
<tt class=3D"docutils literal">IRONPYTHONPATH</tt> environment variables, r=
espectively. If you want to
specify more than one location in any of them, you need to separate
the locations with a colon on UNIX-like machines (e.g.
<code>/opt/libs:$HOME/testlibs</code>) and with a semicolon on Windows (e.g=
.
<code>D:\libs;%HOMEPATH%\testlibs</code>).</p>
<p>Environment variables can be configured permanently system wide or so th=
at
they affect only a certain user. Alternatively they can be set temporarily
before running a command, something that works extremely well in custom
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#start-up-scripts">start-up script=
s</a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 2.9, contents of <tt class=3D"do=
cutils literal">PYTHONPATH</tt> environment
variable were added to the module search path by the framework itself
when running on Jython and IronPython. Nowadays that is not done
anymore and <tt class=3D"docutils literal">JYTHONPATH</tt> and <tt class=3D=
"docutils literal">IRONPYTHONPATH</tt> must be used with
these interpreters.</p>
</div>
</div>
<div class=3D"section" id=3D"using-pythonpath-option">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id726">Using <code>--pythonpath</cod=
e> option</a></h4>
<p>Robot Framework has a separate command line option <span class=3D"option=
">--pythonpath (-P)</span>
for adding locations to the module search path. Although the option name ha=
s
the word Python in it, it works also on Jython and IronPython.</p>
<p>Multiple locations can be given by separating them with a colon, regardl=
ess
the operating system, or by using this option several times. The given path
can also be a glob pattern matching multiple paths, but then it typically
needs to be escaped when used on the console.</p>
<p>Examples:</p>
<pre class=3D"literal-block">--pythonpath libs
--pythonpath /opt/testlibs:mylibs.zip:yourlibs
--pythonpath mylib.jar --pythonpath lib/\*.jar    # '*' is escaped
</pre>
</div>
<div class=3D"section" id=3D"configuring-sys-path-programmatically">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id727">Configuring <code>sys.path</c=
ode> programmatically</a></h4>
<p>Python interpreters store the module search path they use as a list of s=
trings
in <a class=3D"reference external" href=3D"http://docs.python.org/library/s=
ys.html#sys.path">sys.path</a>
attribute. This list can be updated dynamically during execution, and chang=
es
are taken into account next time when something is imported.</p>
</div>
<div class=3D"section" id=3D"java-classpath">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id728">Java classpath</a></h4>
<p>When libraries implemented in Java are imported with Jython, they can be
either in Jython's normal module search path or in <a class=3D"reference ex=
ternal" href=3D"https://docs.oracle.com/javase/8/docs/technotes/tools/findi=
ngclasses.html">Java classpath</a>. The most
common way to alter classpath is setting the <tt class=3D"docutils literal"=
>CLASSPATH</tt> environment variable
similarly as <tt class=3D"docutils literal">PYTHONPATH</tt>, <tt class=3D"d=
ocutils literal">JYTHONPATH</tt> or <tt class=3D"docutils literal">IRONPYTH=
ONPATH</tt>.
Alternatively it is possible to use Java's <span class=3D"option">-cp</span=
> command line option.
This option is not exposed to the <tt class=3D"docutils literal">robot</tt>=
 <a class=3D"reference internal" href=3D"http://robotframework.org/robotfra=
mework/latest/RobotFrameworkUserGuide.html#using-robot-and-rebot-scripts">r=
unner script</a>, but it is
possible to use it with Jython by adding <span class=3D"option">-J</span> p=
refix like
<code>jython -J-cp example.jar -m robot.run tests.robot</code>.</p>
<p>When using the standalone JAR distribution, the classpath has to be set =
a
bit differently, due to the fact that <code>java -jar</code> command does s=
upport
the <tt class=3D"docutils literal">CLASSPATH</tt> environment variable nor =
the <span class=3D"option">-cp</span> option. There are
two different ways to configure the classpath:</p>
<pre class=3D"literal-block">java -cp lib/testlibrary.jar:lib/app.jar:robot=
framework-3.1.jar org.robotframework.RobotFramework tests.robot
java -Xbootclasspath/a:lib/testlibrary.jar:lib/app.jar -jar robotframework-=
3.1.jar tests.robot
</pre>
</div>
</div>
<div class=3D"section" id=3D"setting-variables">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id729">3.5.6&nbsp;&nbsp;&nbsp;Settin=
g variables</a></h3>
<p><a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#variables">Variables</a> can b=
e set from the command line either <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#setting-variables-in-command-line">individually</a>
using the <span class=3D"option">--variable (-v)</span> option or through <=
a class=3D"reference internal" href=3D"http://robotframework.org/robotframe=
work/latest/RobotFrameworkUserGuide.html#variable-files">variable files</a>
with the <span class=3D"option">--variablefile (-V)</span> option. Variable=
s and variable
files are explained in separate chapters, but the following examples
illustrate how to use these options:</p>
<pre class=3D"literal-block">--variable name:value
--variable OS:Linux --variable IP:10.0.0.42
--variablefile path/to/variables.py
--variablefile myvars.py:possible:arguments:here
--variable ENVIRONMENT:Windows --variablefile c:\resources\windows.py
</pre>
</div>
<div class=3D"section" id=3D"dry-run">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id730">3.5.7&nbsp;&nbsp;&nbsp;Dry ru=
n</a></h3>
<p>Robot Framework supports so called <em>dry run</em> mode where the tests=
 are
run normally otherwise, but the keywords coming from the test libraries
are not executed at all. The dry run mode can be used to validate the
test data; if the dry run passes, the data should be syntactically
correct. This mode is triggered using option <span class=3D"option">--dryru=
n</span>.</p>
<p>The dry run execution may fail for following reasons:</p>
<blockquote>
<ul class=3D"simple">
<li>Using keywords that are not found.</li>
<li>Using keywords with wrong number of arguments.</li>
<li>Using user keywords that have invalid syntax.</li>
</ul>
</blockquote>
<p>In addition to these failures, normal <a class=3D"reference internal" hr=
ef=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGui=
de.html#errors-and-warnings-during-execution">execution errors</a> are show=
n,
for example, when test library or resource file imports cannot be
resolved.</p>
<p>It is possible to disable dry run validation of specific <a class=3D"ref=
erence internal" href=3D"http://robotframework.org/robotframework/latest/Ro=
botFrameworkUserGuide.html#creating-user-keywords">user keywords</a>
by adding a special <code>robot:no-dry-run</code> <a class=3D"reference int=
ernal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewo=
rkUserGuide.html#user-keyword-tags">keyword tag</a> to them. This is useful
if a keyword fails in the dry run mode for some reason, but work fine when
executed normally. Disabling the dry run more is a new feature in Robot
Framework 3.0.2.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The dry run mode does not validate variables.</p>
</div>
</div>
<div class=3D"section" id=3D"randomizing-execution-order">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id731">3.5.8&nbsp;&nbsp;&nbsp;Random=
izing execution order</a></h3>
<p>The test execution order can be randomized using option
<span class=3D"option">--randomize &lt;what&gt;[:&lt;seed&gt;]</span>, wher=
e <code>&lt;what&gt;</code> is one of the following:</p>
<dl class=3D"docutils">
<dt><code>tests</code></dt>
<dd>Test cases inside each test suite are executed in random order.</dd>
<dt><code>suites</code></dt>
<dd>All test suites are executed in a random order, but test cases inside
suites are run in the order they are defined.</dd>
<dt><code>all</code></dt>
<dd>Both test cases and test suites are executed in a random order.</dd>
<dt><code>none</code></dt>
<dd>Neither execution order of test nor suites is randomized.
This value can be used to override the earlier value set with
<span class=3D"option">--randomize</span>.</dd>
</dl>
<p>It is possible to give a custom seed
to initialize the random generator. This is useful if you want to re-run te=
sts
using the same order as earlier. The seed is given as part of the value for
<span class=3D"option">--randomize</span> in format <code>&lt;what&gt;:&lt;=
seed&gt;</code> and it must be an integer.
If no seed is given, it is generated randomly. The executed top level test
suite automatically gets <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#free-tes=
t-suite-metadata">metadata</a> named <span class=3D"name">Randomized</span>=
 that tells both
what was randomized and what seed was used.</p>
<p>Examples:</p>
<pre class=3D"literal-block">robot --randomize tests my_test.robot
robot --randomize all:12345 path/to/tests
</pre>
</div>
<div class=3D"section" id=3D"programmatic-modification-of-test-data">
<span id=3D"pre-run-modifier"></span><h3><a class=3D"toc-backref" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#id732">3.5.9&nbsp;&nbsp;&nbsp;Programmatic modification of test data</a></=
h3>
<p>If the provided built-in features to modify test data before execution
are not enough, Robot Framework 2.9 and newer makes it possible to do
custom modifications programmatically. This is accomplished by creating
a so called <em>pre-run modifier</em> and activating it using the
<span class=3D"option">--prerunmodifier</span> option.</p>
<p>Pre-run modifiers should be implemented as visitors that can traverse th=
rough
the executable test suite structure and modify it as needed. The visitor
interface is explained as part of the <a class=3D"reference external" href=
=3D"http://robot-framework.readthedocs.org/en/master/autodoc/robot.model.ht=
ml#module-robot.model.visitor">Robot Framework API documentation</a>, and i=
t possible to modify executed <a class=3D"reference external" href=3D"http:=
//robot-framework.readthedocs.org/en/master/autodoc/robot.running.html#robo=
t.running.model.TestSuite">test suites</a>, <a class=3D"reference external"=
 href=3D"http://robot-framework.readthedocs.org/en/master/autodoc/robot.run=
ning.html#robot.running.model.TestCase">test cases</a> and <a class=3D"refe=
rence external" href=3D"http://robot-framework.readthedocs.org/en/master/au=
todoc/robot.running.html#robot.running.model.Keyword">keywords</a> using it=
. The examples below ought to give an idea of
how pre-run modifiers can be used and how powerful this functionality is.</=
p>
<p>When a pre-run modifier is taken into use on the command line using the
<span class=3D"option">--prerunmodifier</span> option, it can be specified =
either as a name of
the modifier class or a path to the modifier file. If the modifier is given
as a class name, the module containing the class must be in the <a class=3D=
"reference internal" href=3D"http://robotframework.org/robotframework/lates=
t/RobotFrameworkUserGuide.html#module-search-path">module search
path</a>, and if the module name is different than the class name, the give=
n
name must include both like <code>module.ModifierClass</code>. If the modif=
ier is given
as a path, the class name must be same as the file name. For most parts thi=
s
works exactly like when <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#specifyin=
g-library-to-import">importing a test library</a>.</p>
<p>If a modifier requires arguments, like the examples below do, they can b=
e
specified after the modifier name or path using either a colon (<code>:</co=
de>) or a
semicolon (<code>;</code>) as a separator. If both are used in the value, t=
he one first
is considered to be the actual separator.</p>
<p>If more than one pre-run modifier is needed, they can be specified by us=
ing
the <span class=3D"option">--prerunmodifier</span> option multiple times. I=
f similar modifying
is needed before creating logs and reports, <a class=3D"reference internal"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#programmatic-modification-of-results">programmatic modification =
of
results</a> can be enabled using the <span class=3D"option">--prerebotmodif=
ier</span> option.</p>
<div class=3D"section" id=3D"example-select-every-xth-test">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id733">Example: Select every Xth tes=
t</a></h4>
<p>The first example shows how a pre-run-modifier can remove tests from the
executed test suite structure. In this example only every Xth tests is
preserved, and the X is given from the command line along with an optional
start index.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"sd">"""Pre-run mo=
difier that selects only every Xth test for execution.</span>

<span class=3D"sd">Starts from the first test by default. Tests are selecte=
d per suite.</span>
<span class=3D"sd">"""</span>

<span class=3D"kn">from</span> <span class=3D"nn">robot.api</span> <span cl=
ass=3D"kn">import</span> <span class=3D"n">SuiteVisitor</span>


<span class=3D"k">class</span> <span class=3D"nc">SelectEveryXthTest</span>=
<span class=3D"p">(</span><span class=3D"n">SuiteVisitor</span><span class=
=3D"p">):</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">x</span><span class=3D"p">,</span> <span class=3D"n">star=
t</span><span class=3D"o">=3D</span><span class=3D"mi">0</span><span class=
=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">x</span> <span class=3D"o">=3D</span> <span class=3D"nb">int</span><=
span class=3D"p">(</span><span class=3D"n">x</span><span class=3D"p">)</spa=
n>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">start</span> <span class=3D"o">=3D</span> <span class=3D"nb">int</sp=
an><span class=3D"p">(</span><span class=3D"n">start</span><span class=3D"p=
">)</span>

    <span class=3D"k">def</span> <span class=3D"nf">start_suite</span><span=
 class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</spa=
n> <span class=3D"n">suite</span><span class=3D"p">):</span>
        <span class=3D"sd">"""Modify suite's tests to contain only every Xt=
h."""</span>
        <span class=3D"n">suite</span><span class=3D"o">.</span><span class=
=3D"n">tests</span> <span class=3D"o">=3D</span> <span class=3D"n">suite</s=
pan><span class=3D"o">.</span><span class=3D"n">tests</span><span class=3D"=
p">[</span><span class=3D"bp">self</span><span class=3D"o">.</span><span cl=
ass=3D"n">start</span><span class=3D"p">::</span><span class=3D"bp">self</s=
pan><span class=3D"o">.</span><span class=3D"n">x</span><span class=3D"p">]=
</span>

    <span class=3D"k">def</span> <span class=3D"nf">end_suite</span><span c=
lass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span>=
 <span class=3D"n">suite</span><span class=3D"p">):</span>
        <span class=3D"sd">"""Remove suites that are empty after removing t=
ests."""</span>
        <span class=3D"n">suite</span><span class=3D"o">.</span><span class=
=3D"n">suites</span> <span class=3D"o">=3D</span> <span class=3D"p">[</span=
><span class=3D"n">s</span> <span class=3D"k">for</span> <span class=3D"n">=
s</span> <span class=3D"ow">in</span> <span class=3D"n">suite</span><span c=
lass=3D"o">.</span><span class=3D"n">suites</span> <span class=3D"k">if</sp=
an> <span class=3D"n">s</span><span class=3D"o">.</span><span class=3D"n">t=
est_count</span> <span class=3D"o">&gt;</span> <span class=3D"mi">0</span><=
span class=3D"p">]</span>

    <span class=3D"k">def</span> <span class=3D"nf">visit_test</span><span =
class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span=
> <span class=3D"n">test</span><span class=3D"p">):</span>
        <span class=3D"sd">"""Avoid visiting tests and their keywords to sa=
ve a little time."""</span>
        <span class=3D"k">pass</span>
</pre></div>
<p>If the above pre-run modifier is in a file <span class=3D"file">SelectEv=
eryXthTest.py</span> and
the file is in the <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-=
path">module search path</a>, it could be used like this:</p>
<pre class=3D"literal-block"># Specify the modifier as a path. Run every se=
cond test.
robot --prerunmodifier path/to/SelectEveryXthTest.py:2 tests.robot

# Specify the modifier as a name. Run every third test, starting from the s=
econd.
robot --prerunmodifier SelectEveryXthTest:3:1 tests.robot
</pre>
</div>
<div class=3D"section" id=3D"example-exclude-tests-by-name">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id734">Example: Exclude tests by nam=
e</a></h4>
<p>Also the second example removes tests, this time based on a given name p=
attern.
In practice it works like a negative version of the built-in <span class=3D=
"option">--test</span>
option.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"sd">"""Pre-run mo=
difier that excludes tests by their name.</span>

<span class=3D"sd">Tests to exclude are specified by using a pattern that i=
s both case and space</span>
<span class=3D"sd">insensitive and supports '*' (match anything) and '?' (m=
atch single character)</span>
<span class=3D"sd">as wildcards.</span>
<span class=3D"sd">"""</span>

<span class=3D"kn">from</span> <span class=3D"nn">robot.api</span> <span cl=
ass=3D"kn">import</span> <span class=3D"n">SuiteVisitor</span>
<span class=3D"kn">from</span> <span class=3D"nn">robot.utils</span> <span =
class=3D"kn">import</span> <span class=3D"n">Matcher</span>


<span class=3D"k">class</span> <span class=3D"nc">ExcludeTests</span><span =
class=3D"p">(</span><span class=3D"n">SuiteVisitor</span><span class=3D"p">=
):</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">pattern</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">matcher</span> <span class=3D"o">=3D</span> <span class=3D"n">Matche=
r</span><span class=3D"p">(</span><span class=3D"n">pattern</span><span cla=
ss=3D"p">)</span>

    <span class=3D"k">def</span> <span class=3D"nf">start_suite</span><span=
 class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</spa=
n> <span class=3D"n">suite</span><span class=3D"p">):</span>
        <span class=3D"sd">"""Remove tests that match the given pattern."""=
</span>
        <span class=3D"n">suite</span><span class=3D"o">.</span><span class=
=3D"n">tests</span> <span class=3D"o">=3D</span> <span class=3D"p">[</span>=
<span class=3D"n">t</span> <span class=3D"k">for</span> <span class=3D"n">t=
</span> <span class=3D"ow">in</span> <span class=3D"n">suite</span><span cl=
ass=3D"o">.</span><span class=3D"n">tests</span> <span class=3D"k">if</span=
> <span class=3D"ow">not</span> <span class=3D"bp">self</span><span class=
=3D"o">.</span><span class=3D"n">_is_excluded</span><span class=3D"p">(</sp=
an><span class=3D"n">t</span><span class=3D"p">)]</span>

    <span class=3D"k">def</span> <span class=3D"nf">_is_excluded</span><spa=
n class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</sp=
an> <span class=3D"n">test</span><span class=3D"p">):</span>
        <span class=3D"k">return</span> <span class=3D"bp">self</span><span=
 class=3D"o">.</span><span class=3D"n">matcher</span><span class=3D"o">.</s=
pan><span class=3D"n">match</span><span class=3D"p">(</span><span class=3D"=
n">test</span><span class=3D"o">.</span><span class=3D"n">name</span><span =
class=3D"p">)</span> <span class=3D"ow">or</span> <span class=3D"bp">self</=
span><span class=3D"o">.</span><span class=3D"n">matcher</span><span class=
=3D"o">.</span><span class=3D"n">match</span><span class=3D"p">(</span><spa=
n class=3D"n">test</span><span class=3D"o">.</span><span class=3D"n">longna=
me</span><span class=3D"p">)</span>

    <span class=3D"k">def</span> <span class=3D"nf">end_suite</span><span c=
lass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span>=
 <span class=3D"n">suite</span><span class=3D"p">):</span>
        <span class=3D"sd">"""Remove suites that are empty after removing t=
ests."""</span>
        <span class=3D"n">suite</span><span class=3D"o">.</span><span class=
=3D"n">suites</span> <span class=3D"o">=3D</span> <span class=3D"p">[</span=
><span class=3D"n">s</span> <span class=3D"k">for</span> <span class=3D"n">=
s</span> <span class=3D"ow">in</span> <span class=3D"n">suite</span><span c=
lass=3D"o">.</span><span class=3D"n">suites</span> <span class=3D"k">if</sp=
an> <span class=3D"n">s</span><span class=3D"o">.</span><span class=3D"n">t=
est_count</span> <span class=3D"o">&gt;</span> <span class=3D"mi">0</span><=
span class=3D"p">]</span>

    <span class=3D"k">def</span> <span class=3D"nf">visit_test</span><span =
class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span=
> <span class=3D"n">test</span><span class=3D"p">):</span>
        <span class=3D"sd">"""Avoid visiting tests and their keywords to sa=
ve a little time."""</span>
        <span class=3D"k">pass</span>
</pre></div>
<p>Assuming the above modifier is in a file named <span class=3D"file">Excl=
udeTests.py</span>, it
could be used like this:</p>
<pre class=3D"literal-block"># Exclude test named 'Example'.
robot --prerunmodifier path/to/ExcludeTests.py:Example tests.robot

# Exclude all tests ending with 'something'.
robot --prerunmodifier path/to/ExcludeTests.py:*something tests.robot
</pre>
</div>
<div class=3D"section" id=3D"example-skip-setups-and-teardowns">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id735">Example: Skip setups and tear=
downs</a></h4>
<p>Sometimes when debugging tests it can be useful to disable setups or tea=
rdowns.
This can be accomplished by editing the test data, but pre-run modifiers ma=
ke
it easy to do that temporarily for a single run:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"sd">"""Pre-run mo=
difiers for disabling suite and test setups and teardowns."""</span>

<span class=3D"kn">from</span> <span class=3D"nn">robot.api</span> <span cl=
ass=3D"kn">import</span> <span class=3D"n">SuiteVisitor</span>


<span class=3D"k">class</span> <span class=3D"nc">SuiteSetup</span><span cl=
ass=3D"p">(</span><span class=3D"n">SuiteVisitor</span><span class=3D"p">):=
</span>

    <span class=3D"k">def</span> <span class=3D"nf">start_suite</span><span=
 class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</spa=
n> <span class=3D"n">suite</span><span class=3D"p">):</span>
        <span class=3D"n">suite</span><span class=3D"o">.</span><span class=
=3D"n">keywords</span><span class=3D"o">.</span><span class=3D"n">setup</sp=
an> <span class=3D"o">=3D</span> <span class=3D"bp">None</span>


<span class=3D"k">class</span> <span class=3D"nc">SuiteTeardown</span><span=
 class=3D"p">(</span><span class=3D"n">SuiteVisitor</span><span class=3D"p"=
>):</span>

    <span class=3D"k">def</span> <span class=3D"nf">start_suite</span><span=
 class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</spa=
n> <span class=3D"n">suite</span><span class=3D"p">):</span>
        <span class=3D"n">suite</span><span class=3D"o">.</span><span class=
=3D"n">keywords</span><span class=3D"o">.</span><span class=3D"n">teardown<=
/span> <span class=3D"o">=3D</span> <span class=3D"bp">None</span>


<span class=3D"k">class</span> <span class=3D"nc">TestSetup</span><span cla=
ss=3D"p">(</span><span class=3D"n">SuiteVisitor</span><span class=3D"p">):<=
/span>

    <span class=3D"k">def</span> <span class=3D"nf">start_test</span><span =
class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span=
> <span class=3D"n">test</span><span class=3D"p">):</span>
        <span class=3D"n">test</span><span class=3D"o">.</span><span class=
=3D"n">keywords</span><span class=3D"o">.</span><span class=3D"n">setup</sp=
an> <span class=3D"o">=3D</span> <span class=3D"bp">None</span>


<span class=3D"k">class</span> <span class=3D"nc">TestTeardown</span><span =
class=3D"p">(</span><span class=3D"n">SuiteVisitor</span><span class=3D"p">=
):</span>

    <span class=3D"k">def</span> <span class=3D"nf">start_test</span><span =
class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span=
> <span class=3D"n">test</span><span class=3D"p">):</span>
        <span class=3D"n">test</span><span class=3D"o">.</span><span class=
=3D"n">keywords</span><span class=3D"o">.</span><span class=3D"n">teardown<=
/span> <span class=3D"o">=3D</span> <span class=3D"bp">None</span>
</pre></div>
<p>Assuming that the above modifiers are all in a file named <span class=3D=
"file">disable.py</span>
and this file is in the <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-se=
arch-path">module search path</a>, setups and teardowns could be
disabled, for example, as follows:</p>
<pre class=3D"literal-block"># Disable suite teardowns.
robot --prerunmodifier disable.SuiteTeardown tests.robot

# Disable both test setups and teardowns by using '--prerunmodifier' twice.
robot --prerunmodifier disable.TestSetup --prerunmodifier disable.TestTeard=
own tests.robot
</pre>
</div>
</div>
<div class=3D"section" id=3D"controlling-console-output">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id736">3.5.10&nbsp;&nbsp;&nbsp;Contr=
olling console output</a></h3>
<p>There are various command line options to control how test execution is
reported on the console.</p>
<div class=3D"section" id=3D"console-output-type">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id737">Console output type</a></h4>
<p>The overall console output type is set with the <span class=3D"option">-=
-console</span> option.
It supports the following case-insensitive values:</p>
<dl class=3D"docutils">
<dt><code>verbose</code></dt>
<dd>Every test suite and test case is reported individually. This is
the default.</dd>
<dt><code>dotted</code></dt>
<dd>Only show <code>.</code> for passed test, <code>f</code> for failed non=
-critical tests, <code>F</code>
for failed critical tests, and <code>x</code> for tests which are skipped b=
ecause
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#stopping-test-execution-gracefull=
y">test execution exit</a>. Failed critical tests are listed separately
after execution. This output type makes it easy to see are there any
failures during execution even if there would be a lot of tests.</dd>
<dt><code>quiet</code></dt>
<dd>No output except for <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#errors-a=
nd-warnings">errors and warnings</a>.</dd>
<dt><code>none</code></dt>
<dd>No output whatsoever. Useful when creating a custom output using,
for example, <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#listener-interface">=
listeners</a>.</dd>
</dl>
<p>Separate convenience options <span class=3D"option">--dotted (-.)</span>=
 and <span class=3D"option">--quiet</span>
are shortcuts for <code>--console dotted</code> and <code>--console quiet</=
code>, respectively.</p>
<p>Examples:</p>
<pre class=3D"literal-block">robot --console quiet tests.robot
robot --dotted tests.robot
</pre>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><span class=3D"option">--console</span>, <span class=3D"o=
ption">--dotted</span> and <span class=3D"option">--quiet</span>
are new options in Robot Framework 2.9. Prior to that the output
was always the same as in the current <code>verbose</code> mode.</p>
</div>
</div>
<div class=3D"section" id=3D"console-width">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id738">Console width</a></h4>
<p>The width of the test execution output in the console can be set using
the option <span class=3D"option">--consolewidth (-W)</span>. The default w=
idth is 78 characters.</p>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p class=3D"last">On many UNIX-like machines you can use handy <code>$COLUM=
NS</code>
environment variable like <code>--consolewidth $COLUMNS</code>.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 2.9 this functionality was enabl=
ed with
<span class=3D"option">--monitorwidth</span> option that was first deprecat=
ed and is
nowadays removed. The short option <span class=3D"option">-W</span> works t=
he same way
in all versions.</p>
</div>
</div>
<div class=3D"section" id=3D"console-colors">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id739">Console colors</a></h4>
<p>The <span class=3D"option">--consolecolors (-C)</span> option is used to=
 control whether
colors should be used in the console output. Colors are implemented
using <a class=3D"reference external" href=3D"http://en.wikipedia.org/wiki/=
ANSI_escape_code">ANSI colors</a> except on Windows where, by default, Wind=
ows
APIs are used instead. Accessing these APIs from Jython is not possible,
and as a result colors do not work with Jython on Windows.</p>
<p>This option supports the following case-insensitive values:</p>
<dl class=3D"docutils">
<dt><code>auto</code></dt>
<dd>Colors are enabled when outputs are written into the console, but not
when they are redirected into a file or elsewhere. This is the default.</dd=
>
<dt><code>on</code></dt>
<dd>Colors are used also when outputs are redirected. Does not work on Wind=
ows.</dd>
<dt><code>ansi</code></dt>
<dd>Same as <code>on</code> but uses ANSI colors also on Windows. Useful, f=
or example,
when redirecting output to a program that understands ANSI colors.</dd>
<dt><code>off</code></dt>
<dd>Colors are disabled.</dd>
</dl>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 2.9 this functionality was enabl=
ed with
<span class=3D"option">--monitorcolors</span> option that was first depreca=
ted and is
nowadays removed. The short option <span class=3D"option">-C</span> works t=
he same way
in all versions.</p>
</div>
</div>
<div class=3D"section" id=3D"console-markers">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id740">Console markers</a></h4>
<p>Special markers <code>.</code> (success) and
<code>F</code> (failure) are shown on the console when using the <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#console-output-type">verbose output</a>
and top level keywords in test cases end. The markers allow following
the test execution in high level, and they are erased when test cases end.<=
/p>
<p>It is possible to configure when markers
are used with <span class=3D"option">--consolemarkers (-K)</span> option. I=
t supports the following
case-insensitive values:</p>
<dl class=3D"docutils">
<dt><code>auto</code></dt>
<dd>Markers are enabled when the standard output is written into the consol=
e,
but not when it is redirected into a file or elsewhere. This is the default=
.</dd>
<dt><code>on</code></dt>
<dd>Markers are always used.</dd>
<dt><code>off</code></dt>
<dd>Markers are disabled.</dd>
</dl>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 2.9 this functionality was enabl=
ed with
<span class=3D"option">--monitormarkers</span> option that was first deprec=
ated and is
nowadays removed. The short option <span class=3D"option">-K</span> works t=
he same way
in all versions.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"setting-listeners">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id741">3.5.11&nbsp;&nbsp;&nbsp;Setti=
ng listeners</a></h3>
<p><a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#listener-interface">Listeners<=
/a> can be used to monitor the test execution. When they are taken into
use from the command line, they are specified using the <span class=3D"opti=
on">--listener</span>
command line option. The value can either be a path to a listener or
a listener name. See the <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener=
-interface">Listener interface</a> section for more details
about importing listeners and using them in general.</p>
</div>
</div>
<div class=3D"section" id=3D"created-outputs">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id654">3.6&nbsp;&nbsp;&nbsp;Created =
outputs</a></h2>
<p>Several output files are created when tests are executed, and all of
them are somehow related to test results. This section discusses what
outputs are created, how to configure where they are created, and how
to fine-tune their contents.</p>
<div class=3D"contents local topic" id=3D"id238">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#different-output-files" id=3D=
"id742">3.6.1&nbsp;&nbsp;&nbsp;Different output files</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#output-directory" id=3D"id743=
">Output directory</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#output-file" id=3D"id744">Out=
put file</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#log-file" id=3D"id745">Log fi=
le</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#report-file" id=3D"id746">Rep=
ort file</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#xunit-compatible-result-file"=
 id=3D"id747">XUnit compatible result file</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#debug-file" id=3D"id748">Debu=
g file</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#timestamping-output-files" id=
=3D"id749">Timestamping output files</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-titles" id=3D"id750">=
Setting titles</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-background-colors" id=
=3D"id751">Setting background colors</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#log-levels" id=3D"id752">3.6.=
2&nbsp;&nbsp;&nbsp;Log levels</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#available-log-levels" id=3D"i=
d753">Available log levels</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-log-level" id=3D"id75=
4">Setting log level</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#visible-log-level" id=3D"id75=
5">Visible log level</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#splitting-logs" id=3D"id756">=
3.6.3&nbsp;&nbsp;&nbsp;Splitting logs</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#configuring-statistics" id=3D=
"id757">3.6.4&nbsp;&nbsp;&nbsp;Configuring statistics</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#configuring-displayed-suite-s=
tatistics" id=3D"id758">Configuring displayed suite statistics</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#including-and-excluding-tag-s=
tatistics" id=3D"id759">Including and excluding tag statistics</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#generating-combined-tag-stati=
stics" id=3D"id760">Generating combined tag statistics</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-links-from-tag-names=
" id=3D"id761">Creating links from tag names</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#adding-documentation-to-tags"=
 id=3D"id762">Adding documentation to tags</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#removing-and-flattening-keywo=
rds" id=3D"id763">3.6.5&nbsp;&nbsp;&nbsp;Removing and flattening keywords</=
a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#removing-keywords" id=3D"id76=
4">Removing keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#flattening-keywords" id=3D"id=
765">Flattening keywords</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#setting-start-and-end-time-of=
-execution" id=3D"id766">3.6.6&nbsp;&nbsp;&nbsp;Setting start and end time =
of execution</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#limiting-error-message-length=
-in-reports" id=3D"id767">3.6.7&nbsp;&nbsp;&nbsp;Limiting error message len=
gth in reports</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#programmatic-modification-of-=
results" id=3D"id768">3.6.8&nbsp;&nbsp;&nbsp;Programmatic modification of r=
esults</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#system-log" id=3D"id769">3.6.=
9&nbsp;&nbsp;&nbsp;System log</a></li>
</ul>
</div>
<div class=3D"section" id=3D"different-output-files">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id742">3.6.1&nbsp;&nbsp;&nbsp;Differ=
ent output files</a></h3>
<p>This section explains what different output files can be created and
how to configure where they are created. Output files are configured
using command line options, which get the path to the output file in
question as an argument. A special value <code>NONE</code>
(case-insensitive) can be used to disable creating a certain output
file.</p>
<div class=3D"section" id=3D"output-directory">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id743">Output directory</a></h4>
<p>All output files can be set using an absolute path, in which case they
are created to the specified place, but in other cases, the path is
considered relative to the output directory. The default output
directory is the directory where the execution is started from, but it
can be altered with the <span class=3D"option">--outputdir (-d)</span> opti=
on. The path
set with this option is, again, relative to the execution directory,
but can naturally be given also as an absolute path. Regardless of how
a path to an individual output file is obtained, its parent directory
is created automatically, if it does not exist already.</p>
</div>
<div class=3D"section" id=3D"output-file">
<span id=3D"output-xml"></span><h4><a class=3D"toc-backref" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#id744=
">Output file</a></h4>
<p>Output files contain all the test execution results in machine readable =
XML
format. <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#log-file">Log</a>, <a cla=
ss=3D"reference internal" href=3D"http://robotframework.org/robotframework/=
latest/RobotFrameworkUserGuide.html#report-file">report</a> and <a class=3D=
"reference internal" href=3D"http://robotframework.org/robotframework/lates=
t/RobotFrameworkUserGuide.html#xunit">xUnit</a> files are typically generat=
ed based on them,
and they can also be combined and otherwise post-processed with <a class=3D=
"reference internal" href=3D"http://robotframework.org/robotframework/lates=
t/RobotFrameworkUserGuide.html#rebot">Rebot</a>.</p>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p class=3D"last">Generating <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#repo=
rt-file">report</a> and <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#xunit">xU=
nit</a> files as part of test execution
does not require processing output files. Disabling <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#log-file">log</a> generation
when running tests can thus save memory.</p>
</div>
<p>The command line option <span class=3D"option">--output (-o)</span> dete=
rmines the path where
the output file is created relative to the <a class=3D"reference internal" =
href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserG=
uide.html#output-directory">output directory</a>. The default
name for the output file, when tests are run, is <span class=3D"file">outpu=
t.xml</span>.</p>
<p>When <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#post-processing-outputs">=
post-processing outputs</a> with Rebot, new output files are not created
unless the <span class=3D"option">--output</span> option is explicitly used=
.</p>
<p>It is possible to disable creation of the output file when running tests=
 by
giving a special value <code>NONE</code> to the <span class=3D"option">--ou=
tput</span> option. If no outputs
are needed, they should all be explicitly disabled using
<code>--output NONE --report NONE --log NONE</code>.</p>
</div>
<div class=3D"section" id=3D"log-file">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id745">Log file</a></h4>
<p>Log files contain details about the executed test cases in HTML
format. They have a hierarchical structure showing test suite, test
case and keyword details. Log files are needed nearly every time when
test results are to be investigated in detail. Even though log files
also have statistics, reports are better for
getting an higher-level overview.</p>
<p>The command line option <span class=3D"option">--log (-l)</span> determi=
nes where log
files are created. Unless the special value <code>NONE</code> is used,
log files are always created and their default name is
<span class=3D"file">log.html</span>.</p>
<div class=3D"figure">
<a class=3D"reference external image-reference" href=3D"http://robotframewo=
rk.org/robotframework/latest/images/log_passed.html"><img alt=3D"src/Execut=
ingTestCases/log_passed.png" src=3D"http://robotframework.org/robotframewor=
k/latest/images/log_passed.png" style=3D"width: 500px;"></a>
<p class=3D"caption">An example of beginning of a log file</p>
</div>
<div class=3D"figure">
<a class=3D"reference external image-reference" href=3D"http://robotframewo=
rk.org/robotframework/latest/images/log_failed.html"><img alt=3D"src/Execut=
ingTestCases/log_failed.png" src=3D"http://robotframework.org/robotframewor=
k/latest/images/log_failed.png" style=3D"width: 500px;"></a>
<p class=3D"caption">An example of a log file with keyword details visible<=
/p>
</div>
</div>
<div class=3D"section" id=3D"report-file">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id746">Report file</a></h4>
<p>Report files contain an overview of the test execution results in HTML
format. They have statistics based on tags and executed test suites,
as well as a list of all executed test cases. When both reports and
logs are generated, the report has links to the log file for easy
navigation to more detailed information.  It is easy to see the
overall test execution status from report, because its background
color is green, if all <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-cr=
iticality">critical tests</a> pass, and bright red
otherwise.</p>
<p>The command line option <span class=3D"option">--report (-r)</span> dete=
rmines where
report files are created. Similarly as log files, reports are always
created unless <code>NONE</code> is used as a value, and their default
name is <span class=3D"file">report.html</span>.</p>
<div class=3D"figure">
<a class=3D"reference external image-reference" href=3D"http://robotframewo=
rk.org/robotframework/latest/images/report_passed.html"><img alt=3D"src/Exe=
cutingTestCases/report_passed.png" src=3D"http://robotframework.org/robotfr=
amework/latest/images/report_passed.png" style=3D"width: 500px;"></a>
<p class=3D"caption">An example report file of successful test execution</p=
>
</div>
<div class=3D"figure">
<a class=3D"reference external image-reference" href=3D"http://robotframewo=
rk.org/robotframework/latest/images/report_failed.html"><img alt=3D"src/Exe=
cutingTestCases/report_failed.png" src=3D"http://robotframework.org/robotfr=
amework/latest/images/report_failed.png" style=3D"width: 500px;"></a>
<p class=3D"caption">An example report file of failed test execution</p>
</div>
</div>
<div class=3D"section" id=3D"xunit-compatible-result-file">
<span id=3D"xunit-file"></span><span id=3D"xunit"></span><h4><a class=3D"to=
c-backref" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#id747">XUnit compatible result file</a></h4>
<p>XUnit result files contain the test execution summary in <a class=3D"ref=
erence external" href=3D"http://en.wikipedia.org/wiki/XUnit">xUnit</a> comp=
atible
XML format. These files can thus be used as an input for external tools tha=
t
understand xUnit reports. For example, <a class=3D"reference external" href=
=3D"http://jenkins-ci.org/">Jenkins</a> continuous integration server
supports generating statistics based on xUnit compatible
results.</p>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p class=3D"last">Jenkins also has a separate <a class=3D"reference externa=
l" href=3D"https://wiki.jenkins-ci.org/display/JENKINS/Robot+Framework+Plug=
in">Robot Framework plugin</a>.</p>
</div>
<p>XUnit output files are not created unless the command line option
<span class=3D"option">--xunit (-x)</span> is used explicitly. This option =
requires a path to
the generated xUnit file, relatively to the <a class=3D"reference internal"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#output-directory">output directory</a>, as a value.</p>
<p>Because xUnit reports do not have the concept of <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#setting-criticality">non-critical tests</a>,
all tests in an xUnit report will be marked either passed or failed, with n=
o
distinction between critical and non-critical tests. If this is a problem,
<span class=3D"option">--xunitskipnoncritical</span> option can be used to =
mark non-critical tests
as skipped. Skipped tests will get a message containing the actual status a=
nd
possible message of the test case in a format like <code>FAIL: Error messag=
e</code>.</p>
</div>
<div class=3D"section" id=3D"debug-file">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id748">Debug file</a></h4>
<p>Debug files are plain text files that are written during the test
execution. All messages got from test libraries are written to them,
as well as information about started and ended test suites, test cases
and keywords. Debug files can be used for monitoring the test
execution. This can be done using, for example, a separate
<a class=3D"reference external" href=3D"https://bitbucket.org/robotframewor=
k/robottools/src/master/fileviewer/">fileviewer.py</a>
tool, or in UNIX-like systems, simply with the <tt class=3D"docutils litera=
l">tail <span class=3D"pre">-f</span></tt> command.</p>
<p>Debug files are not created unless the command line option
<span class=3D"option">--debugfile (-b)</span> is used explicitly.</p>
</div>
<div class=3D"section" id=3D"timestamping-output-files">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id749">Timestamping output files</a>=
</h4>
<p>All output files listed in this section can be automatically timestamped
with the option <span class=3D"option">--timestampoutputs (-T)</span>. When=
 this option is used,
a timestamp in the format <code>YYYYMMDD-hhmmss</code> is placed between
the extension and the base name of each file. The example below would,
for example, create such output files as
<span class=3D"file">output-20080604-163225.xml</span> and <span class=3D"f=
ile">mylog-20080604-163225.html</span>:</p>
<pre class=3D"literal-block">robot --timestampoutputs --log mylog.html --re=
port NONE tests.robot
</pre>
</div>
<div class=3D"section" id=3D"setting-titles">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id750">Setting titles</a></h4>
<p>The default titles for <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#log-fil=
e">logs</a> and <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#report-file">repo=
rts</a> are generated by prefixing
the name of the top-level test suite with <span class=3D"name">Test Log</sp=
an> or
<span class=3D"name">Test Report</span>. Custom titles can be given from th=
e command line
using the options <span class=3D"option">--logtitle</span> and <span class=
=3D"option">--reporttitle</span>,
respectively.</p>
<p>Example:</p>
<pre class=3D"literal-block">robot --logtitle "Smoke Test Log" --reporttitl=
e "Smoke Test Report" --include smoke my_tests/
</pre>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, underscores in the given ti=
tles were
converted to spaces. Nowadays spaces need to be escaped or quoted
like in the example above.</p>
</div>
</div>
<div class=3D"section" id=3D"setting-background-colors">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id751">Setting background colors</a>=
</h4>
<p>By default the <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#report-file">re=
port file</a> has a green background when all the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#setting-criticality">critical tes=
ts</a> pass and a red background otherwise.  These colors
can be customized by using the <span class=3D"option">--reportbackground</s=
pan> command line
option, which takes two or three colors separated with a colon as an
argument:</p>
<pre class=3D"literal-block">--reportbackground blue:red
--reportbackground green:yellow:red
--reportbackground #00E:#E00
</pre>
<p>If you specify two colors, the first one will be used instead of the
default green color and the second instead of the default red. This
allows, for example, using blue instead of green to make backgrounds
easier to separate for color blind people.</p>
<p>If you specify three colors, the first one will be used when all the
test succeed, the second when only non-critical tests have failed, and
the last when there are critical failures. This feature thus allows
using a separate background color, for example yellow, when
non-critical tests have failed.</p>
<p>The specified colors are used as a value for the <code>body</code>
element's <code>background</code> CSS property. The value is used as-is and
can be a HTML color name (e.g. <code>red</code>), a hexadecimal value
(e.g. <code>#f00</code> or <code>#ff0000</code>), or an RGB value
(e.g. <code>rgb(255,0,0)</code>). The default green and red colors are
specified using hexadecimal values <code>#9e9</code> and <code>#f66</code>,
respectively.</p>
</div>
</div>
<div class=3D"section" id=3D"log-levels">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id752">3.6.2&nbsp;&nbsp;&nbsp;Log le=
vels</a></h3>
<div class=3D"section" id=3D"available-log-levels">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id753">Available log levels</a></h4>
<p>Messages in <a class=3D"reference internal" href=3D"http://robotframewor=
k.org/robotframework/latest/RobotFrameworkUserGuide.html#log-file">log file=
s</a> can have different log levels. Some of the
messages are written by Robot Framework itself, but also executed
keywords can <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#logging-information"=
>log information</a> using different levels. The available
log levels are:</p>
<dl class=3D"docutils">
<dt><code>FAIL</code></dt>
<dd>Used when a keyword fails. Can be used only by Robot Framework itself.<=
/dd>
<dt><code>WARN</code></dt>
<dd>Used to display warnings. They shown also in <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#errors-and-warnings-during-execution">the console and in
the Test Execution Errors section in log files</a>, but they
do not affect the test case status.</dd>
<dt><code>INFO</code></dt>
<dd>The default level for normal messages. By default,
messages below this level are not shown in the log file.</dd>
<dt><code>DEBUG</code></dt>
<dd>Used for debugging purposes. Useful, for example, for
logging what libraries are doing internally. When a keyword fails,
a traceback showing where in the code the failure occurred is
logged using this level automatically.</dd>
<dt><code>TRACE</code></dt>
<dd>More detailed debugging level. The keyword arguments and return values
are automatically logged using this level.</dd>
</dl>
</div>
<div class=3D"section" id=3D"setting-log-level">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id754">Setting log level</a></h4>
<p>By default, log messages below the <code>INFO</code> level are not logge=
d, but this
threshold can be changed from the command line using the
<span class=3D"option">--loglevel (-L)</span> option. This option takes any=
 of the
available log levels as an argument, and that level becomes the new
threshold level. A special value <code>NONE</code> can also be used to
disable logging altogether.</p>
<p>It is possible to use the <span class=3D"option">--loglevel</span> optio=
n also when
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#post-processing-outputs">post-pro=
cessing outputs</a> with Rebot. This allows, for example,
running tests initially with the <code>TRACE</code> level, and generating s=
maller
log files for normal viewing later with the <code>INFO</code> level. By def=
ault
all the messages included during execution will be included also with
Rebot. Messages ignored during the execution cannot be recovered.</p>
<p>Another possibility to change the log level is using the <a class=3D"ref=
erence external" href=3D"http://robotframework.org/robotframework/latest/li=
braries/BuiltIn.html">BuiltIn</a>
keyword <span class=3D"name">Set Log Level</span> in the test data. It take=
s the same
arguments as the <span class=3D"option">--loglevel</span> option, and it al=
so returns the
old level so that it can be restored later, for example, in a <a class=3D"r=
eference internal" href=3D"http://robotframework.org/robotframework/latest/=
RobotFrameworkUserGuide.html#test-setup-and-teardown">test
teardown</a>.</p>
</div>
<div class=3D"section" id=3D"visible-log-level">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id755">Visible log level</a></h4>
<p>If the log file contains messages at
<code>DEBUG</code> or <code>TRACE</code> levels, a visible log level drop d=
own is shown
in the upper right corner. This allows users to remove messages below chose=
n
level from the view. This can be useful especially when running test at
<code>TRACE</code> level.</p>
<div class=3D"figure">
<a class=3D"reference external image-reference" href=3D"http://robotframewo=
rk.org/robotframework/latest/images/visible_log_level.html"><img alt=3D"src=
/ExecutingTestCases/visible_log_level.png" src=3D"http://robotframework.org=
/robotframework/latest/images/visible_log_level.png" style=3D"width: 500px;=
"></a>
<p class=3D"caption">An example log showing the visible log level drop down=
</p>
</div>
<p>By default the drop down will be set at the lowest level in the log file=
, so
that all messages are shown. The default visible log level can be changed u=
sing
<span class=3D"option">--loglevel</span> option by giving the default after=
 the normal log level
separated by a colon:</p>
<pre class=3D"literal-block">--loglevel DEBUG:INFO
</pre>
<p>In the above example, tests are run using level <code>DEBUG</code>, but
the default visible level in the log file is <code>INFO</code>.</p>
</div>
</div>
<div class=3D"section" id=3D"splitting-logs">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id756">3.6.3&nbsp;&nbsp;&nbsp;Splitt=
ing logs</a></h3>
<p>Normally the log file is just a single HTML file. When the amount of the=
 test
cases increases, the size of the file can grow so large that opening it int=
o
a browser is inconvenient or even impossible. Hence, it is possible to use
the <span class=3D"option">--splitlog</span> option to split parts of the l=
og into external files
that are loaded transparently into the browser when needed.</p>
<p>The main benefit of splitting logs is that individual log parts are so s=
mall
that opening and browsing the log file is possible even if the amount
of the test data is very large. A small drawback is that the overall size t=
aken
by the log file increases.</p>
<p>Technically the test data related to each test case is saved into
a JavaScript file in the same folder as the main log file. These files have
names such as <span class=3D"file">log-42.js</span> where <span class=3D"fi=
le">log</span> is the base name of the
main log file and <span class=3D"file">42</span> is an incremented index.</=
p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">When copying the log files, you need to copy also all the
<span class=3D"file">log-*.js</span> files or some information will be miss=
ing.</p>
</div>
</div>
<div class=3D"section" id=3D"configuring-statistics">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id757">3.6.4&nbsp;&nbsp;&nbsp;Config=
uring statistics</a></h3>
<p>There are several command line options that can be used to configure
and adjust the contents of the <span class=3D"name">Statistics by Tag</span=
>, <span class=3D"name">Statistics
by Suite</span> and <span class=3D"name">Test Details by Tag</span> tables =
in different output
files. All these options work both when executing test cases and when
post-processing outputs.</p>
<div class=3D"section" id=3D"configuring-displayed-suite-statistics">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id758">Configuring displayed suite s=
tatistics</a></h4>
<p>When a deeper suite structure is executed, showing all the test suite
levels in the <span class=3D"name">Statistics by Suite</span> table may mak=
e the table
somewhat difficult to read. By default all suites are shown, but you can
control this with the command line option <span class=3D"option">--suitesta=
tlevel</span> which
takes the level of suites to show as an argument:</p>
<pre class=3D"literal-block">--suitestatlevel 3
</pre>
</div>
<div class=3D"section" id=3D"including-and-excluding-tag-statistics">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id759">Including and excluding tag s=
tatistics</a></h4>
<p>When many tags are used, the <span class=3D"name">Statistics by Tag</spa=
n> table can become
quite congested. If this happens, the command line options
<span class=3D"option">--tagstatinclude</span> and <span class=3D"option">-=
-tagstatexclude</span> can be
used to select which tags to display, similarly as
<span class=3D"option">--include</span> and <span class=3D"option">--exclud=
e</span> are used to <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#by-tag-names=
">select test
cases</a>:</p>
<pre class=3D"literal-block">--tagstatinclude some-tag --tagstatinclude ano=
ther-tag
--tagstatexclude owner-*
--tagstatinclude prefix-* --tagstatexclude prefix-13
</pre>
</div>
<div class=3D"section" id=3D"generating-combined-tag-statistics">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id760">Generating combined tag stati=
stics</a></h4>
<p>The command line option <span class=3D"option">--tagstatcombine</span> c=
an be used to
generate aggregate tags that combine statistics from multiple
tags. The combined tags are specified using <a class=3D"reference internal"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#tag-patterns">tag patterns</a> where
<code>*</code> and <code>?</code> are supported as wildcards and <code>AND<=
/code>,
<code>OR</code> and <code>NOT</code> operators can be used for combining
individual tags or patterns together.</p>
<p>The following examples illustrate creating combined tag statistics using
different patterns, and the figure below shows a snippet of the resulting
<span class=3D"name">Statistics by Tag</span> table:</p>
<pre class=3D"literal-block">--tagstatcombine owner-*
--tagstatcombine smokeANDmytag
--tagstatcombine smokeNOTowner-janne*
</pre>
<div class=3D"figure">
<img alt=3D"src/ExecutingTestCases/tagstatcombine.png" src=3D"http://robotf=
ramework.org/robotframework/latest/images/tagstatcombine.png" style=3D"widt=
h: 550px;">
<p class=3D"caption">Examples of combined tag statistics</p>
</div>
<p>As the above example illustrates, the name of the added combined statist=
ic
is, by default, just the given pattern. If this is not good enough, it
is possible to give a custom name after the pattern by separating them
with a colon (<code>:</code>):</p>
<pre class=3D"literal-block">--tagstatcombine "prio1ORprio2:High priority t=
ests"
</pre>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, underscores in the custom n=
ame were
converted to spaces. Nowadays spaces need to be escaped or quoted
like in the example above.</p>
</div>
</div>
<div class=3D"section" id=3D"creating-links-from-tag-names">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id761">Creating links from tag names=
</a></h4>
<p>You can add external links to the <span class=3D"name">Statistics by Tag=
</span> table by
using the command line option <span class=3D"option">--tagstatlink</span>. =
Arguments to this
option are given in the format <code>tag:link:name</code>, where <code>tag<=
/code>
specifies the tags to assign the link to, <code>link</code> is the link to
be created, and <code>name</code> is the name to give to the link.</p>
<p><code>tag</code> may be a single tag, but more commonly a <a class=3D"re=
ference internal" href=3D"http://robotframework.org/robotframework/latest/R=
obotFrameworkUserGuide.html#simple-patterns">simple pattern</a>
where <code>*</code> matches anything and <code>?</code> matches any single
character. When <code>tag</code> is a pattern, the matches to wildcards may
be used in <code>link</code> and <code>title</code> with the syntax <code>%=
N</code>,
where "N" is the index of the match starting from 1.</p>
<p>The following examples illustrate the usage of this option, and the
figure below shows a snippet of the resulting <span class=3D"name">Statisti=
cs by
Tag</span> table when example test data is executed with these options:</p>
<pre class=3D"literal-block">--tagstatlink mytag:http://www.google.com:Goog=
le
--tagstatlink jython-bug-*:http://bugs.jython.org/issue_%1:Jython-bugs
--tagstatlink owner-*:mailto:%1@domain.com?subject=3DAcceptance_Tests:Send_=
Mail
</pre>
<div class=3D"figure">
<img alt=3D"src/ExecutingTestCases/tagstatlink.png" src=3D"http://robotfram=
ework.org/robotframework/latest/images/tagstatlink.png" style=3D"width: 550=
px;">
<p class=3D"caption">Examples of links from tag names</p>
</div>
</div>
<div class=3D"section" id=3D"adding-documentation-to-tags">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id762">Adding documentation to tags<=
/a></h4>
<p>Tags can be given a documentation with the command line option
<span class=3D"option">--tagdoc</span>, which takes an argument in the form=
at
<code>tag:doc</code>. <code>tag</code> is the name of the tag to assign the
documentation to, and it can also be a <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#simple-patterns">simple pattern</a> matching
multiple tags. <code>doc</code> is the assigned documentation. It can conta=
in
simple <a class=3D"reference internal" href=3D"http://robotframework.org/ro=
botframework/latest/RobotFrameworkUserGuide.html#documentation-formatting">=
HTML formatting</a>.</p>
<p>The given documentation is shown with matching tags in the <span class=
=3D"name">Test
Details by Tag</span> table, and as a tool tip for these tags in the
<span class=3D"name">Statistics by Tag</span> table. If one tag gets multip=
le documentations,
they are combined together and separated with an ampersand.</p>
<p>Examples:</p>
<pre class=3D"literal-block">--tagdoc mytag:Example
--tagdoc "regression:*See* http://info.html"
--tagdoc "owner-*:Original author"
</pre>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, underscores in the document=
ation were
converted to spaces. Nowadays spaces need to be escaped or quoted
like in the examples above.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"removing-and-flattening-keywords">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id763">3.6.5&nbsp;&nbsp;&nbsp;Removi=
ng and flattening keywords</a></h3>
<p>Most of the content of <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#output-=
file">output files</a> comes from keywords and their
log messages. When creating higher level reports, log files are not necessa=
rily
needed at all, and in that case keywords and their messages just take space
unnecessarily. Log files themselves can also grow overly large, especially =
if
they contain <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#for-loops">for loops=
</a> or other constructs that repeat certain keywords
multiple times.</p>
<p>In these situations, command line options <span class=3D"option">--remov=
ekeywords</span> and
<span class=3D"option">--flattenkeywords</span> can be used to dispose or f=
latten unnecessary keywords.
They can be used both when <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#id175"=
>executing test cases</a> and when <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#post-processing-outputs">post-processing
outputs</a>. When used during execution, they only affect the log file, not
the XML output file. With <code>rebot</code> they affect both logs and poss=
ibly
generated new output XML files.</p>
<div class=3D"section" id=3D"removing-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id764">Removing keywords</a></h4>
<p>The <span class=3D"option">--removekeywords</span> option removes keywor=
ds and their messages
altogether. It has the following modes of operation, and it can be used
multiple times to enable multiple modes. Keywords that contain <a class=3D"=
reference internal" href=3D"http://robotframework.org/robotframework/latest=
/RobotFrameworkUserGuide.html#errors-and-warnings">errors
or warnings</a> are not removed except when using the <code>ALL</code> mode=
.</p>
<dl class=3D"docutils">
<dt><code>ALL</code></dt>
<dd>Remove data from all keywords unconditionally.</dd>
<dt><code>PASSED</code></dt>
<dd>Remove keyword data from passed test cases. In most cases, log files
created using this option contain enough information to investigate
possible failures.</dd>
<dt><code>FOR</code></dt>
<dd>Remove all passed iterations from <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#for-loops">for loops</a> except the last one.</dd>
<dt><code>WUKS</code></dt>
<dd>Remove all failing keywords inside <a class=3D"reference external" href=
=3D"http://robotframework.org/robotframework/latest/libraries/BuiltIn.html"=
>BuiltIn</a> keyword
<span class=3D"name">Wait Until Keyword Succeeds</span> except the last one=
.</dd>
<dt><code>NAME:&lt;pattern&gt;</code></dt>
<dd>Remove data from all keywords matching the given pattern regardless the
keyword status. The pattern is
matched against the full name of the keyword, prefixed with
the possible library or resource file name. The pattern is case, space, and
underscore insensitive, and it supports <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#simple-patterns">simple patterns</a> with <code>*</code>
and <code>?</code> as wildcards.</dd>
<dt><code>TAG:&lt;pattern&gt;</code></dt>
<dd>Remove data from keywords with tags that match the given pattern. Tags =
are
case and space insensitive and they can be specified using <a class=3D"refe=
rence internal" href=3D"http://robotframework.org/robotframework/latest/Rob=
otFrameworkUserGuide.html#tag-patterns">tag patterns</a>
where <code>*</code> and <code>?</code> are supported as wildcards and <cod=
e>AND</code>, <code>OR</code> and <code>NOT</code>
operators can be used for combining individual tags or patterns together.
Can be used both with <a class=3D"reference internal" href=3D"http://robotf=
ramework.org/robotframework/latest/RobotFrameworkUserGuide.html#keyword-tag=
s">library keyword tags</a> and <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#u=
ser-keyword-tags">user keyword tags</a>.</dd>
</dl>
<p>Examples:</p>
<pre class=3D"literal-block">rebot --removekeywords all --output removed.xm=
l output.xml
robot --removekeywords passed --removekeywords for tests.robot
robot --removekeywords name:HugeKeyword --removekeywords name:resource.* te=
sts.robot
robot --removekeywords tag:huge tests.robot
</pre>
<p>Removing keywords is done after parsing the <a class=3D"reference intern=
al" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#output-file">output file</a> and generating
an internal model based on it. Thus it does not reduce memory usage as much
as <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#flattening-keywords">flattenin=
g keywords</a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><code>TAG:&lt;pattern&gt;</code> mode was added in Robot =
Framework 2.9.</p>
</div>
</div>
<div class=3D"section" id=3D"flattening-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id765">Flattening keywords</a></h4>
<p>The <span class=3D"option">--flattenkeywords</span> option flattens matc=
hing keywords. In practice
this means that matching keywords get all log messages from their child
keywords, recursively, and child keywords are discarded otherwise. Flatteni=
ng
supports the following modes:</p>
<dl class=3D"docutils">
<dt><code>FOR</code></dt>
<dd>Flatten <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#for-loops">for loops<=
/a> fully.</dd>
<dt><code>FORITEM</code></dt>
<dd>Flatten individual for loop iterations.</dd>
<dt><code>NAME:&lt;pattern&gt;</code></dt>
<dd>Flatten keywords matching the given pattern. Pattern matching rules are
same as when <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#removing-keywords">r=
emoving keywords</a> using <code>NAME:&lt;pattern&gt;</code> mode.</dd>
<dt><code>TAG:&lt;pattern&gt;</code></dt>
<dd>Flatten keywords with tags matching the given pattern. Pattern matching
rules are same as when <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#removing-k=
eywords">removing keywords</a> using <code>TAG:&lt;pattern&gt;</code> mode.=
</dd>
</dl>
<p>Examples:</p>
<pre class=3D"literal-block">robot --flattenkeywords name:HugeKeyword --fla=
ttenkeywords name:resource.* tests.robot
rebot --flattenkeywords foritem --output flattened.xml original.xml
</pre>
<p>Flattening keywords is done already when the <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#output-file">output file</a> is parsed
initially. This can save a significant amount of memory especially with
deeply nested keyword structures.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><code>TAG:&lt;pattern&gt;</code> mode was added in Robot =
Framework 2.9.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"setting-start-and-end-time-of-execution">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id766">3.6.6&nbsp;&nbsp;&nbsp;Settin=
g start and end time of execution</a></h3>
<p>When <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#combining-outputs">combin=
ing outputs</a> using Rebot, it is possible to set the start
and end time of the combined test suite using the options <span class=3D"op=
tion">--starttime</span>
and <span class=3D"option">--endtime</span>, respectively. This is convenie=
nt, because by default,
combined suites do not have these values. When both the start and end time =
are
given, the elapsed time is also calculated based on them. Otherwise the ela=
psed
time is got by adding the elapsed times of the child test suites together.<=
/p>
<p>It is also possible to use the above mentioned options to set start and =
end
times for a single suite when using Rebot.  Using these options with a
single output always affects the elapsed time of the suite.</p>
<p>Times must be given as timestamps in the format <code>YYYY-MM-DD
hh:mm:ss.mil</code>, where all separators are optional and the parts from
milliseconds to hours can be omitted. For example, <code>2008-06-11
17:59:20.495</code> is equivalent both to <code>20080611-175920.495</code> =
and
<code>20080611175920495</code>, and also mere <code>20080611</code> would w=
ork.</p>
<p>Examples:</p>
<pre class=3D"literal-block">rebot --starttime 20080611-17:59:20.495 output=
1.xml output2.xml
rebot --starttime 20080611-175920 --endtime 20080611-180242 *.xml
rebot --starttime 20110302-1317 --endtime 20110302-11418 myoutput.xml
</pre>
</div>
<div class=3D"section" id=3D"limiting-error-message-length-in-reports">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id767">3.6.7&nbsp;&nbsp;&nbsp;Limiti=
ng error message length in reports</a></h3>
<p>If a test case fails and has a long error message, the message shown in
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#report-file">reports</a> is autom=
atically cut from the middle to keep reports easier to
read. By default messages longer than 40 lines are cut, but that can be
configured by using the <span class=3D"option">--maxerrorlines</span> comma=
nd line option.
The minimum value for this option is 10, and it is also possible to use
a special value <code>NONE</code> to show the full message.</p>
<p>Full error messages are always visible in <a class=3D"reference internal=
" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUse=
rGuide.html#log-file">log files</a> as messages of
the failed keywords.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The <span class=3D"option">--maxerrorlines</span> option =
is new in Robot Framework 3.1.</p>
</div>
</div>
<div class=3D"section" id=3D"programmatic-modification-of-results">
<span id=3D"pre-rebot-modifier"></span><h3><a class=3D"toc-backref" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#id768">3.6.8&nbsp;&nbsp;&nbsp;Programmatic modification of results</a></=
h3>
<p>If the provided built-in features to modify results are are not enough,
Robot Framework 2.9 and newer makes it possible to do custom modifications
programmatically. This is accomplished by creating a model modifier and
activating it using the <span class=3D"option">--prerebotmodifier</span> op=
tion.</p>
<p>This functionality works nearly exactly like <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#programmatic-modification-of-test-data">programmatic modific=
ation of
test data</a> that can be enabled with the <span class=3D"option">--prerunm=
odifier</span> option.
The obvious difference is that this time modifiers operate with the
<a class=3D"reference external" href=3D"http://robot-framework.readthedocs.=
org/en/master/autodoc/robot.result.html#module-robot.result.model">result m=
odel</a>, not the <a class=3D"reference external" href=3D"http://robot-fram=
ework.readthedocs.org/en/master/autodoc/robot.running.html#module-robot.run=
ning.model">running model</a>. For example, the following modifier
marks all passed tests that have taken more time than allowed as failed:</p=
>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">robot.api</span> <span class=3D"kn">import</span> <span c=
lass=3D"n">SuiteVisitor</span>


<span class=3D"k">class</span> <span class=3D"nc">ExecutionTimeChecker</spa=
n><span class=3D"p">(</span><span class=3D"n">SuiteVisitor</span><span clas=
s=3D"p">):</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">max_seconds</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">max_milliseconds</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">float</span><span class=3D"p">(</span><span class=3D"n">max_seconds</sp=
an><span class=3D"p">)</span> <span class=3D"o">*</span> <span class=3D"mi"=
>1000</span>

    <span class=3D"k">def</span> <span class=3D"nf">visit_test</span><span =
class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span=
> <span class=3D"n">test</span><span class=3D"p">):</span>
        <span class=3D"k">if</span> <span class=3D"n">test</span><span clas=
s=3D"o">.</span><span class=3D"n">status</span> <span class=3D"o">=3D=3D</s=
pan> <span class=3D"s1">'PASS'</span> <span class=3D"ow">and</span> <span c=
lass=3D"n">test</span><span class=3D"o">.</span><span class=3D"n">elapsedti=
me</span> <span class=3D"o">&gt;</span> <span class=3D"bp">self</span><span=
 class=3D"o">.</span><span class=3D"n">max_milliseconds</span><span class=
=3D"p">:</span>
            <span class=3D"n">test</span><span class=3D"o">.</span><span cl=
ass=3D"n">status</span> <span class=3D"o">=3D</span> <span class=3D"s1">'FA=
IL'</span>
            <span class=3D"n">test</span><span class=3D"o">.</span><span cl=
ass=3D"n">message</span> <span class=3D"o">=3D</span> <span class=3D"s1">'T=
est execution took too long.'</span>
</pre></div>
<p>If the above modifier would be in file <span class=3D"file">ExecutionTim=
eChecker.py</span>, it
could be used, for example, like this:</p>
<pre class=3D"literal-block"># Specify modifier as a path when running test=
s. Maximum time is 42 seconds.
robot --prerebotmodifier path/to/ExecutionTimeChecker.py:42 tests.robot

# Specify modifier as a name when using Rebot. Maximum time is 3.14 seconds=
.
# ExecutionTimeChecker.py must be in the module search path.
rebot --prerebotmodifier ExecutionTimeChecker:3.14 output.xml
</pre>
<p>If more than one model modifier is needed, they can be specified by usin=
g
the <span class=3D"option">--prerebotmodifier</span> option multiple times.=
 When executing tests,
it is possible to use <span class=3D"option">--prerunmodifier</span> and
<span class=3D"option">--prerebotmodifier</span> options together.</p>
</div>
<div class=3D"section" id=3D"system-log">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id769">3.6.9&nbsp;&nbsp;&nbsp;System=
 log</a></h3>
<p>Robot Framework has its own plain-text system log where it writes
information about</p>
<blockquote>
<ul class=3D"simple">
<li>Processed and skipped test data files</li>
<li>Imported test libraries, resource files and variable files</li>
<li>Executed test suites and test cases</li>
<li>Created outputs</li>
</ul>
</blockquote>
<p>Normally users never need this information, but it can be
useful when investigating problems with test libraries or Robot Framework
itself. A system log is not created by default, but it can be enabled
by setting the environment variable <tt class=3D"docutils literal">ROBOT_SY=
SLOG_FILE</tt> so
that it contains a path to the selected file.</p>
<p>A system log has the same <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#log-=
levels">log levels</a> as a normal log file, with the
exception that instead of <code>FAIL</code> it has the <code>ERROR</code>
level. The threshold level to use can be altered using the
<tt class=3D"docutils literal">ROBOT_SYSLOG_LEVEL</tt> environment variable=
 like shown in the
example below.  Possible <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#errors-a=
nd-warnings-during-execution">unexpected errors and warnings</a> are
written into the system log in addition to the console and the normal
log file.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"ch">#!/bin/bash</=
span>

<span class=3D"nb">export</span> <span class=3D"nv">ROBOT_SYSLOG_FILE</span=
><span class=3D"o">=3D</span>/tmp/syslog.txt
<span class=3D"nb">export</span> <span class=3D"nv">ROBOT_SYSLOG_LEVEL</spa=
n><span class=3D"o">=3D</span>DEBUG

robot --name Syslog_example path/to/tests
</pre></div>
</div>
</div>
</div>
<div class=3D"section" id=3D"extending-robot-framework">
<h1><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id448">4&nbsp;&nbsp;&nbsp;Extending =
Robot Framework</a></h1>
<div class=3D"contents local topic" id=3D"id249">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-test-libraries" id=
=3D"id770">4.1&nbsp;&nbsp;&nbsp;Creating test libraries</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#remote-library-interface" id=
=3D"id771">4.2&nbsp;&nbsp;&nbsp;Remote library interface</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#listener-interface" id=3D"id7=
72">4.3&nbsp;&nbsp;&nbsp;Listener interface</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#extending-the-robot-framework=
-jar" id=3D"id773">4.4&nbsp;&nbsp;&nbsp;Extending the Robot Framework Jar</=
a></li>
</ul>
</div>
<div class=3D"section" id=3D"creating-test-libraries">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id770">4.1&nbsp;&nbsp;&nbsp;Creating=
 test libraries</a></h2>
<p>Robot Framework's actual testing capabilities are provided by test
libraries. There are many existing libraries, some of which are even
bundled with the core framework, but there is still often a need to
create new ones. This task is not too complicated because, as this
chapter illustrates, Robot Framework's library API is simple
and straightforward.</p>
<div class=3D"contents local topic" id=3D"id250">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id251" id=3D"id774">4.1.1&nbs=
p;&nbsp;&nbsp;Introduction</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#supported-programming-languag=
es" id=3D"id775">Supported programming languages</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#different-test-library-apis" =
id=3D"id776">Different test library APIs</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-test-library-class-o=
r-module" id=3D"id777">4.1.2&nbsp;&nbsp;&nbsp;Creating test library class o=
r module</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-library-names" id=3D"id7=
78">Test library names</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#providing-arguments-to-test-l=
ibraries" id=3D"id779">Providing arguments to test libraries</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-library-scope" id=3D"id7=
80">Test library scope</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#specifying-library-version" i=
d=3D"id781">Specifying library version</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#specifying-documentation-form=
at" id=3D"id782">Specifying documentation format</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#library-acting-as-listener" i=
d=3D"id783">Library acting as listener</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#creating-static-keywords" id=
=3D"id784">4.1.3&nbsp;&nbsp;&nbsp;Creating static keywords</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#what-methods-are-considered-k=
eywords" id=3D"id785">What methods are considered keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#keyword-names" id=3D"id786">K=
eyword names</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#keyword-tags" id=3D"id787">Ke=
yword tags</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#keyword-arguments" id=3D"id78=
8">Keyword arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#default-values-to-keywords" i=
d=3D"id789">Default values to keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variable-number-of-arguments-=
varargs" id=3D"id790">Variable number of arguments (<code>*varargs</code>)<=
/a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#free-keyword-arguments-kwargs=
" id=3D"id791">Free keyword arguments (<code>**kwargs</code>)</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#keyword-only-arguments" id=3D=
"id792">Keyword-only arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#argument-types" id=3D"id793">=
Argument types</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-decorators" id=3D"id794=
">Using decorators</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#embedding-arguments-into-keyw=
ord-names" id=3D"id795">Embedding arguments into keyword names</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#communicating-with-robot-fram=
ework" id=3D"id796">4.1.4&nbsp;&nbsp;&nbsp;Communicating with Robot Framewo=
rk</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#reporting-keyword-status" id=
=3D"id797">Reporting keyword status</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#stopping-test-execution" id=
=3D"id798">Stopping test execution</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#continuing-test-execution-des=
pite-of-failures" id=3D"id799">Continuing test execution despite of failure=
s</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#logging-information" id=3D"id=
800">Logging information</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#programmatic-logging-apis" id=
=3D"id801">Programmatic logging APIs</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#logging-during-library-initia=
lization" id=3D"id802">Logging during library initialization</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#returning-values" id=3D"id803=
">Returning values</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#communication-when-using-thre=
ads" id=3D"id804">Communication when using threads</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#distributing-test-libraries" =
id=3D"id805">4.1.5&nbsp;&nbsp;&nbsp;Distributing test libraries</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#documenting-libraries" id=3D"=
id806">Documenting libraries</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#testing-libraries" id=3D"id80=
7">Testing libraries</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#packaging-libraries" id=3D"id=
808">Packaging libraries</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#deprecating-keywords" id=3D"i=
d809">Deprecating keywords</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#dynamic-library-api" id=3D"id=
810">4.1.6&nbsp;&nbsp;&nbsp;Dynamic library API</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-keyword-names" id=3D"=
id811">Getting keyword names</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#running-keywords" id=3D"id812=
">Running keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-keyword-arguments" id=
=3D"id813">Getting keyword arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-keyword-argument-type=
s" id=3D"id814">Getting keyword argument types</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-keyword-tags" id=3D"i=
d815">Getting keyword tags</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-keyword-documentation=
" id=3D"id816">Getting keyword documentation</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-general-library-docum=
entation" id=3D"id817">Getting general library documentation</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#named-argument-syntax-with-dy=
namic-libraries" id=3D"id818">Named argument syntax with dynamic libraries<=
/a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#free-named-arguments-with-dyn=
amic-libraries" id=3D"id819">Free named arguments with dynamic libraries</a=
></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#named-only-arguments-with-dyn=
amic-libraries" id=3D"id820">Named-only arguments with dynamic libraries</a=
></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#summary" id=3D"id821">Summary=
</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#hybrid-library-api" id=3D"id8=
22">4.1.7&nbsp;&nbsp;&nbsp;Hybrid library API</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id331" id=3D"id823">Getting k=
eyword names</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id332" id=3D"id824">Running k=
eywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-keyword-arguments-and=
-documentation" id=3D"id825">Getting keyword arguments and documentation</a=
></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id334" id=3D"id826">Summary</=
a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-robot-framework-s-inter=
nal-modules" id=3D"id827">4.1.8&nbsp;&nbsp;&nbsp;Using Robot Framework's in=
ternal modules</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#available-apis" id=3D"id828">=
Available APIs</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-builtin-library" id=3D"=
id829">Using BuiltIn library</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#extending-existing-test-libra=
ries" id=3D"id830">4.1.9&nbsp;&nbsp;&nbsp;Extending existing test libraries=
</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#modifying-original-source-cod=
e" id=3D"id831">Modifying original source code</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-inheritance" id=3D"id83=
2">Using inheritance</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#using-other-libraries-directl=
y" id=3D"id833">Using other libraries directly</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-active-library-instan=
ce-from-robot-framework" id=3D"id834">Getting active library instance from =
Robot Framework</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#libraries-using-dynamic-or-hy=
brid-api" id=3D"id835">Libraries using dynamic or hybrid API</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"id251">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id774">4.1.1&nbsp;&nbsp;&nbsp;Introd=
uction</a></h3>
<div class=3D"section" id=3D"supported-programming-languages">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id775">Supported programming languag=
es</a></h4>
<p>Robot Framework itself is written with <a class=3D"reference external" h=
ref=3D"http://python.org/">Python</a> and naturally test
libraries extending it can be implemented using the same
language. When running the framework on <a class=3D"reference external" hre=
f=3D"http://jython.org/">Jython</a>, libraries can also be
implemented using <a class=3D"reference external" href=3D"http://java.com/"=
>Java</a>. Pure Python code works both on Python and
Jython, assuming that it does not use syntax or modules that are not
available on Jython. When using Python, it is also possible to
implement libraries with C using <a class=3D"reference external" href=3D"ht=
tp://docs.python.org/c-api/index.html">Python C API</a>, although it is
often easier to interact with C code from Python libraries using
<a class=3D"reference external" href=3D"http://docs.python.org/library/ctyp=
es.html">ctypes</a> module.</p>
<p>Libraries implemented using these natively supported languages can
also act as wrappers to functionality implemented using other
programming languages. A good example of this approach is the <a class=3D"r=
eference internal" href=3D"http://robotframework.org/robotframework/latest/=
RobotFrameworkUserGuide.html#remote-library">Remote
library</a>, and another widely used approaches is running external
scripts or tools as separate processes.</p>
</div>
<div class=3D"section" id=3D"different-test-library-apis">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id776">Different test library APIs</=
a></h4>
<p>Robot Framework has three different test library APIs.</p>
<p>Static API</p>
<blockquote>
The simplest approach is having a module (in Python) or a class
(in Python or Java) with methods which map directly to
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#keyword-names">keyword names</a>.=
 Keywords also take the same <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#keyw=
ord-arguments">arguments</a> as
the methods implementing them.  Keywords <a class=3D"reference internal" hr=
ef=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGui=
de.html#reporting-keyword-status">report failures</a> with
exceptions, <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#logging-information">=
log</a> by writing to standard output and can <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#returning-values">return
values</a> using the <code>return</code> statement.</blockquote>
<p>Dynamic API</p>
<blockquote>
Dynamic libraries are classes that implement a method to get the names
of the keywords they implement, and another method to execute a named
keyword with given arguments. The names of the keywords to implement, as
well as how they are executed, can be determined dynamically at
runtime, but reporting the status, logging and returning values is done
similarly as in the static API.</blockquote>
<p>Hybrid API</p>
<blockquote>
This is a hybrid between the static and the dynamic API. Libraries are
classes with a method telling what keywords they implement, but
those keywords must be available directly. Everything else except
discovering what keywords are implemented is similar as in the
static API.</blockquote>
<p>All these APIs are described in this chapter. Everything is based on
how the static API works, so its functions are discussed first. How
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#dynamic-library-api">dynamic =
library API</a> and the <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#hybrid-li=
brary-api">hybrid library API</a> differ from it
is then discussed in sections of their own.</p>
<p>The examples in this chapter are mainly about using Python, but they
should be easy to understand also for Java-only developers. In those
few cases where APIs have differences, both usages are explained with
adequate examples.</p>
</div>
</div>
<div class=3D"section" id=3D"creating-test-library-class-or-module">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id777">4.1.2&nbsp;&nbsp;&nbsp;Creati=
ng test library class or module</a></h3>
<p>Test libraries can be implemented as Python modules and Python or Java
classes.</p>
<div class=3D"section" id=3D"test-library-names">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id778">Test library names</a></h4>
<p>The name of a test library that is used when a library is imported is
the same as the name of the module or class implementing it. For
example, if you have a Python module <code>MyLibrary</code> (that is,
file <span class=3D"file">MyLibrary.py</span>), it will create a library wi=
th name
<span class=3D"name">MyLibrary</span>. Similarly, a Java class <code>YourLi=
brary</code>, when
it is not in any package, creates a library with exactly that name.</p>
<p>Python classes are always inside a module. If the name of a class
implementing a library is the same as the name of the module, Robot
Framework allows dropping the class name when importing the
library. For example, class <code>MyLib</code> in <span class=3D"file">MyLi=
b.py</span>
file can be used as a library with just name <span class=3D"name">MyLib</sp=
an>. This also
works with submodules so that if, for example, <code>parent.MyLib</code> mo=
dule
has class <code>MyLib</code>, importing it using just <span class=3D"name">=
parent.MyLib</span>
works. If the module name and class name are different, libraries must be
taken into use using both module and class names, such as
<span class=3D"name">mymodule.MyLibrary</span> or <span class=3D"name">pare=
nt.submodule.MyLib</span>.</p>
<p>Java classes in a non-default package must be taken into use with the
full name. For example, class <code>MyLib</code> in <code>com.mycompany.myp=
roject</code>
package must be imported with name <span class=3D"name">com.mycompany.mypro=
ject.MyLib</span>.</p>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p class=3D"last">If the library name is really long, for example when the =
Java
package name is long, it is recommended to give the library a
simpler alias by using the <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#settin=
g-custom-name-to-test-library">WITH NAME syntax</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"providing-arguments-to-test-libraries">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id779">Providing arguments to test l=
ibraries</a></h4>
<p>All test libraries implemented as classes can take arguments. These
arguments are specified in the Setting table after the library name,
and when Robot Framework creates an instance of the imported library,
it passes them to its constructor. Libraries implemented as a module
cannot take any arguments, so trying to use those results in an error.</p>
<p>The number of arguments needed by the library is the same
as the number of arguments accepted by the library's
constructor. The default values and variable number of arguments work
similarly as with <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#keyword-argumen=
ts">keyword arguments</a>, with the exception that there
is no variable argument support for Java libraries. Arguments passed
to the library, as well as the library name itself, can be specified
using variables, so it is possible to alter them, for example, from the
command line.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">MyLibrary</span><span class=3D"p">     </span><span class=3D"s">10.=
0.0.1</span><span class=3D"p">    </span><span class=3D"s">8080</span><span=
 class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">AnotherLib</span><span class=3D"p">    ${</span><span class=3D"nv">=
VAR</span><span class=3D"p">}</span>
</pre></div>
<p>Example implementations, first one in Python and second in Java, for
the libraries used in the above example:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">example</span> <span class=3D"kn">import</span> <span cla=
ss=3D"n">Connection</span>

<span class=3D"k">class</span> <span class=3D"nc">MyLibrary</span><span cla=
ss=3D"p">:</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">host</span><span class=3D"p">,</span> <span class=3D"n">p=
ort</span><span class=3D"o">=3D</span><span class=3D"mi">80</span><span cla=
ss=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">_conn</span> <span class=3D"o">=3D</span> <span class=3D"n">Connecti=
on</span><span class=3D"p">(</span><span class=3D"n">host</span><span class=
=3D"p">,</span> <span class=3D"nb">int</span><span class=3D"p">(</span><spa=
n class=3D"n">port</span><span class=3D"p">))</span>

    <span class=3D"k">def</span> <span class=3D"nf">send_message</span><spa=
n class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</sp=
an> <span class=3D"n">message</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">_conn</span><span class=3D"o">.</span><span class=3D"n">send</span><=
span class=3D"p">(</span><span class=3D"n">message</span><span class=3D"p">=
)</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">AnotherLib</span> <span=
 class=3D"o">{</span>

    <span class=3D"kd">private</span> <span class=3D"n">String</span> <span=
 class=3D"n">setting</span> <span class=3D"o">=3D</span> <span class=3D"kc"=
>null</span><span class=3D"o">;</span>

    <span class=3D"kd">public</span> <span class=3D"nf">AnotherLib</span><s=
pan class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">s=
etting</span><span class=3D"o">)</span> <span class=3D"o">{</span>
        <span class=3D"n">setting</span> <span class=3D"o">=3D</span> <span=
 class=3D"n">setting</span><span class=3D"o">;</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">doSomething</span><span class=3D"o">()</span> <span class=3D"o"=
>{</span>
        <span class=3D"k">if</span> <span class=3D"n">setting</span><span c=
lass=3D"o">.</span><span class=3D"na">equals</span><span class=3D"o">(</spa=
n><span class=3D"s">"42"</span><span class=3D"o">)</span> <span class=3D"o"=
>{</span>
            <span class=3D"c1">// do something ...</span>
        <span class=3D"o">}</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"test-library-scope">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id780">Test library scope</a></h4>
<p>Libraries implemented as classes can have an internal state, which can
be altered by keywords and with arguments to the constructor of the
library. Because the state can affect how keywords actually behave, it
is important to make sure that changes in one test case do not
accidentally affect other test cases. These kind of dependencies may
create hard-to-debug problems, for example, when new test cases are
added and they use the library inconsistently.</p>
<p>Robot Framework attempts to keep test cases independent from each
other: by default, it creates new instances of test libraries for
every test case. However, this behavior is not always desirable,
because sometimes test cases should be able to share a common
state. Additionally, all libraries do not have a state and creating
new instances of them is simply not needed.</p>
<p>Test libraries can control when new libraries are created with a
class attribute <code>ROBOT_LIBRARY_SCOPE</code> . This attribute must be
a string and it can have the following three values:</p>
<dl class=3D"docutils">
<dt><code>TEST CASE</code></dt>
<dd>A new instance is created for every test case. A possible suite setup
and suite teardown share yet another instance. This is the default.</dd>
<dt><code>TEST SUITE</code></dt>
<dd>A new instance is created for every test suite. The lowest-level test
suites, created from test case files and containing test cases, have
instances of their own, and higher-level suites all get their own instances
for their possible setups and teardowns.</dd>
<dt><code>GLOBAL</code></dt>
<dd>Only one instance is created during the whole test execution and it
is shared by all test cases and test suites. Libraries created from
modules are always global.</dd>
</dl>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If a library is imported multiple times with different <a=
 class=3D"reference internal" href=3D"http://robotframework.org/robotframew=
ork/latest/RobotFrameworkUserGuide.html#providing-arguments-to-test-librari=
es">arguments</a>,
a new instance is created every time regardless the scope.</p>
</div>
<p>When the <code>TEST SUITE</code> or <code>GLOBAL</code> scopes are used =
with test
libraries that have a state, it is recommended that libraries have some
special keyword for cleaning up the state. This keyword can then be
used, for example, in a suite setup or teardown to ensure that test
cases in the next test suites can start from a known state. For example,
<span class=3D"name">SeleniumLibrary</span> uses the <code>GLOBAL</code> sc=
ope to enable
using the same browser in different test cases without having to
reopen it, and it also has the <span class=3D"name">Close All Browsers</spa=
n> keyword for
easily closing all opened browsers.</p>
<p>Example Python library using the <code>TEST SUITE</code> scope:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">ExampleLibrary</span><span class=3D"p">:</span>

    <span class=3D"n">ROBOT_LIBRARY_SCOPE</span> <span class=3D"o">=3D</spa=
n> <span class=3D"s1">'TEST SUITE'</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">_counter</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</s=
pan>

    <span class=3D"k">def</span> <span class=3D"nf">count</span><span class=
=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">_counter</span> <span class=3D"o">+=3D</span> <span class=3D"mi">1</=
span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"bp">self</span><span class=3D"o">.</span><span class=3D"n">_counter</sp=
an><span class=3D"p">)</span>

    <span class=3D"k">def</span> <span class=3D"nf">clear_counter</span><sp=
an class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</=
span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">_counter</span> <span class=3D"o">=3D</span> <span class=3D"mi">0</s=
pan>
</pre></div>
<p>Example Java library using the <code>GLOBAL</code> scope:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">ExampleLibrary</span> <=
span class=3D"o">{</span>

    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"n">String</span> <span class=3D"n=
">ROBOT_LIBRARY_SCOPE</span> <span class=3D"o">=3D</span> <span class=3D"s"=
>"GLOBAL"</span><span class=3D"o">;</span>

    <span class=3D"kd">private</span> <span class=3D"kt">int</span> <span c=
lass=3D"n">counter</span> <span class=3D"o">=3D</span> <span class=3D"mi">0=
</span><span class=3D"o">;</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">count</span><span class=3D"o">()</span> <span class=3D"o">{</sp=
an>
        <span class=3D"n">counter</span> <span class=3D"o">+=3D</span> <spa=
n class=3D"mi">1</span><span class=3D"o">;</span>
        <span class=3D"n">System</span><span class=3D"o">.</span><span clas=
s=3D"na">out</span><span class=3D"o">.</span><span class=3D"na">println</sp=
an><span class=3D"o">(</span><span class=3D"n">counter</span><span class=3D=
"o">);</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">clearCounter</span><span class=3D"o">()</span> <span class=3D"o=
">{</span>
        <span class=3D"n">counter</span> <span class=3D"o">=3D</span> <span=
 class=3D"mi">0</span><span class=3D"o">;</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"specifying-library-version">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id781">Specifying library version</a=
></h4>
<p>When a test library is taken into use, Robot Framework tries to
determine its version. This information is then written into the <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#system-log">syslog</a>
to provide debugging information. Library documentation tool
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#libdoc">Libdoc</a> also writes th=
is information into the keyword
documentations it generates.</p>
<p>Version information is read from attribute
<code>ROBOT_LIBRARY_VERSION</code>, similarly as <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#test-library-scope">test library scope</a> is
read from <code>ROBOT_LIBRARY_SCOPE</code>. If
<code>ROBOT_LIBRARY_VERSION</code> does not exist, information is tried to
be read from <code>__version__</code> attribute. These attributes must be
class or module attributes, depending whether the library is
implemented as a class or a module.  For Java libraries the version
attribute must be declared as <code>static final</code>.</p>
<p>An example Python module using <code>__version__</code>:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"n">__version__</s=
pan> <span class=3D"o">=3D</span> <span class=3D"s1">'0.1'</span>

<span class=3D"k">def</span> <span class=3D"nf">keyword</span><span class=
=3D"p">():</span>
    <span class=3D"k">pass</span>
</pre></div>
<p>A Java class using <code>ROBOT_LIBRARY_VERSION</code>:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">VersionExample</span> <=
span class=3D"o">{</span>

    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"n">String</span> <span class=3D"n=
">ROBOT_LIBRARY_VERSION</span> <span class=3D"o">=3D</span> <span class=3D"=
s">"1.0.2"</span><span class=3D"o">;</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">keyword</span><span class=3D"o">()</span> <span class=3D"o">{</=
span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"specifying-documentation-format">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id782">Specifying documentation form=
at</a></h4>
<p>Library documentation tool <a class=3D"reference internal" href=3D"http:=
//robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#lib=
doc">Libdoc</a>
supports documentation in multiple formats. If you want to use something
else than Robot Framework's own <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#d=
ocumentation-formatting">documentation formatting</a>, you can specify
the format in the source code using  <code>ROBOT_LIBRARY_DOC_FORMAT</code> =
attribute
similarly as <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#test-library-scope">=
scope</a> and <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#specifying-library-=
version">version</a> are set with their own
<code>ROBOT_LIBRARY_*</code> attributes.</p>
<p>The possible case-insensitive values for documentation format are
<code>ROBOT</code> (default), <code>HTML</code>, <code>TEXT</code> (plain t=
ext),
and <code>reST</code> (<a class=3D"reference external" href=3D"http://docut=
ils.sourceforge.net/rst.html">reStructuredText</a>). Using the <code>reST</=
code> format requires
the <a class=3D"reference external" href=3D"https://pypi.python.org/pypi/do=
cutils">docutils</a> module to be installed when documentation is generated=
.</p>
<p>Setting the documentation format is illustrated by the following Python =
and
Java examples that use reStructuredText and HTML formats, respectively.
See <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#documenting-libraries">Docume=
nting libraries</a> section and <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#l=
ibdoc">Libdoc</a> chapter for more information
about documenting test libraries in general.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"sd">"""A library =
for *documentation format* demonstration purposes.</span>

<span class=3D"sd">This documentation is created using reStructuredText__. =
Here is a link</span>
<span class=3D"sd">to the only \`Keyword\`.</span>

<span class=3D"sd">__ http://docutils.sourceforge.net</span>
<span class=3D"sd">"""</span>

<span class=3D"n">ROBOT_LIBRARY_DOC_FORMAT</span> <span class=3D"o">=3D</sp=
an> <span class=3D"s1">'reST'</span>

<span class=3D"k">def</span> <span class=3D"nf">keyword</span><span class=
=3D"p">():</span>
    <span class=3D"sd">"""**Nothing** to see here. Not even in the table be=
low.</span>

<span class=3D"sd">    =3D=3D=3D=3D=3D=3D=3D  =3D=3D=3D=3D=3D  =3D=3D=3D=3D=
=3D</span>
<span class=3D"sd">    Table    here   has</span>
<span class=3D"sd">    nothing  to     see.</span>
<span class=3D"sd">    =3D=3D=3D=3D=3D=3D=3D  =3D=3D=3D=3D=3D  =3D=3D=3D=3D=
=3D</span>
<span class=3D"sd">    """</span>
    <span class=3D"k">pass</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"cm">/**</span>
<span class=3D"cm"> * A library for &lt;i&gt;documentation format&lt;/i&gt;=
 demonstration purposes.</span>
<span class=3D"cm"> *</span>
<span class=3D"cm"> * This documentation is created using &lt;a href=3D"htt=
p://www.w3.org/html"&gt;HTML&lt;/a&gt;.</span>
<span class=3D"cm"> * Here is a link to the only `Keyword`.</span>
<span class=3D"cm"> */</span>
<span class=3D"kd">public</span> <span class=3D"kd">class</span> <span clas=
s=3D"nc">DocFormatExample</span> <span class=3D"o">{</span>

    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"n">String</span> <span class=3D"n=
">ROBOT_LIBRARY_DOC_FORMAT</span> <span class=3D"o">=3D</span> <span class=
=3D"s">"HTML"</span><span class=3D"o">;</span>

    <span class=3D"cm">/**&lt;b&gt;Nothing&lt;/b&gt; to see here. Not even =
in the table below.</span>
<span class=3D"cm">     *</span>
<span class=3D"cm">     * &lt;table&gt;</span>
<span class=3D"cm">     * &lt;tr&gt;&lt;td&gt;Table&lt;/td&gt;&lt;td&gt;her=
e&lt;/td&gt;&lt;td&gt;has&lt;/td&gt;&lt;/tr&gt;</span>
<span class=3D"cm">     * &lt;tr&gt;&lt;td&gt;nothing&lt;/td&gt;&lt;td&gt;t=
o&lt;/td&gt;&lt;td&gt;see.&lt;/td&gt;&lt;/tr&gt;</span>
<span class=3D"cm">     * &lt;/table&gt;</span>
<span class=3D"cm">     */</span>
    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">keyword</span><span class=3D"o">()</span> <span class=3D"o">{</=
span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"library-acting-as-listener">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id783">Library acting as listener</a=
></h4>
<p><a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#listener-interface">Listener i=
nterface</a> allows external listeners to get notifications about
test execution. They are called, for example, when suites, tests, and keywo=
rds
start and end. Sometimes getting such notifications is also useful for test
libraries, and they can register a custom listener by using
<code>ROBOT_LIBRARY_LISTENER</code> attribute. The value of this attribute
should be an instance of the listener to use, possibly the library itself.
For more information and examples see <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#test-libraries-as-listeners">Test libraries as listeners</a> section.=
</p>
</div>
</div>
<div class=3D"section" id=3D"creating-static-keywords">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id784">4.1.3&nbsp;&nbsp;&nbsp;Creati=
ng static keywords</a></h3>
<div class=3D"section" id=3D"what-methods-are-considered-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id785">What methods are considered k=
eywords</a></h4>
<p>When the static library API is used, Robot Framework uses reflection
to find out what public methods the library class or module contains.
It will exclude all methods starting with an underscore (unless <a class=3D=
"reference internal" href=3D"http://robotframework.org/robotframework/lates=
t/RobotFrameworkUserGuide.html#using-a-custom-keyword-name">using
a custom keyword name</a>), and with Java libraries also methods implemente=
d
only in the implicit base class <code>java.lang.Object</code> are excluded.=
 All
the methods that are not ignored are considered keywords. For example, the
Python and Java libraries below implement a single keyword <span class=3D"n=
ame">My Keyword</span>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">MyLibrary</span><span class=3D"p">:</span>

    <span class=3D"k">def</span> <span class=3D"nf">my_keyword</span><span =
class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span=
> <span class=3D"n">arg</span><span class=3D"p">):</span>
        <span class=3D"k">return</span> <span class=3D"bp">self</span><span=
 class=3D"o">.</span><span class=3D"n">_helper_method</span><span class=3D"=
p">(</span><span class=3D"n">arg</span><span class=3D"p">)</span>

    <span class=3D"k">def</span> <span class=3D"nf">_helper_method</span><s=
pan class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</=
span> <span class=3D"n">arg</span><span class=3D"p">):</span>
        <span class=3D"k">return</span> <span class=3D"n">arg</span><span c=
lass=3D"o">.</span><span class=3D"n">upper</span><span class=3D"p">()</span=
>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">MyLibrary</span> <span =
class=3D"o">{</span>

    <span class=3D"kd">public</span> <span class=3D"n">String</span> <span =
class=3D"nf">myKeyword</span><span class=3D"o">(</span><span class=3D"n">St=
ring</span> <span class=3D"n">arg</span><span class=3D"o">)</span> <span cl=
ass=3D"o">{</span>
        <span class=3D"k">return</span> <span class=3D"n">helperMethod</spa=
n><span class=3D"o">(</span><span class=3D"n">arg</span><span class=3D"o">)=
;</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">private</span> <span class=3D"n">String</span> <span=
 class=3D"nf">helperMethod</span><span class=3D"o">(</span><span class=3D"n=
">String</span> <span class=3D"n">arg</span><span class=3D"o">)</span> <spa=
n class=3D"o">{</span>
        <span class=3D"k">return</span> <span class=3D"n">arg</span><span c=
lass=3D"o">.</span><span class=3D"na">toUpperCase</span><span class=3D"o">(=
);</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
<p>When implementing a library as a Python or Java class, also methods in
possible base classes are considered keywords. When implementing a library
as a Python module, also possible functions imported into the module namesp=
ace
become keywords. For example, if the module below would be used as a librar=
y,
it would contain keywords <span class=3D"name">Example Keyword</span>, <spa=
n class=3D"name">Second Example</span> and
also <span class=3D"name">Current Thread</span>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">threading</span> <span class=3D"kn">import</span> <span c=
lass=3D"n">current_thread</span>


<span class=3D"k">def</span> <span class=3D"nf">example_keyword</span><span=
 class=3D"p">():</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'Running in thread "</span><span class=3D"si">%s</span><span class=3D"s=
1">".'</span> <span class=3D"o">%</span> <span class=3D"n">current_thread</=
span><span class=3D"p">()</span><span class=3D"o">.</span><span class=3D"n"=
>name</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">second_example</span><span =
class=3D"p">():</span>
    <span class=3D"k">pass</span>
</pre></div>
<p>A simple way to avoid imported functions becoming keywords is to only
import modules (e.g. <code>import threading</code>) and use functions via t=
he module
(e.g <code>threading.current_thread()</code>). Alternatively functions coul=
d be
given an alias starting with an underscore at the import time (e.g.
<code>from threading import current_thread as _current_thread</code>).</p>
<p>A more explicit way to limit what functions become keywords is using
the module level <code>__all__</code> attribute that <a class=3D"reference =
external" href=3D"https://docs.python.org/tutorial/modules.html#importing-f=
rom-a-package">Python itself uses for similar
purposes</a>. If it is used, only the listed functions can be keywords.
For example, the library below implements only keywords
<span class=3D"name">Example Keyword</span> and <span class=3D"name">Second=
 Example</span>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">threading</span> <span class=3D"kn">import</span> <span c=
lass=3D"n">current_thread</span>


<span class=3D"n">__all__</span> <span class=3D"o">=3D</span> <span class=
=3D"p">[</span><span class=3D"s1">'example_keyword'</span><span class=3D"p"=
>,</span> <span class=3D"s1">'second_example'</span><span class=3D"p">]</sp=
an>


<span class=3D"k">def</span> <span class=3D"nf">example_keyword</span><span=
 class=3D"p">():</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'Running in thread "</span><span class=3D"si">%s</span><span class=3D"s=
1">".'</span> <span class=3D"o">%</span> <span class=3D"n">current_thread</=
span><span class=3D"p">()</span><span class=3D"o">.</span><span class=3D"n"=
>name</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">second_example</span><span =
class=3D"p">():</span>
    <span class=3D"k">pass</span>

<span class=3D"k">def</span> <span class=3D"nf">not_exposed_as_keyword</spa=
n><span class=3D"p">():</span>
    <span class=3D"k">pass</span>
</pre></div>
</div>
<div class=3D"section" id=3D"keyword-names">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id786">Keyword names</a></h4>
<p>Keyword names used in the test data are compared with method names to
find the method implementing these keywords. Name comparison is
case-insensitive, and also spaces and underscores are ignored. For
example, the method <code>hello</code> maps to the keyword name
<span class=3D"name">Hello</span>, <span class=3D"name">hello</span> or eve=
n <span class=3D"name">h e l l o</span>. Similarly both the
<code>do_nothing</code> and <code>doNothing</code> methods can be used as t=
he
<span class=3D"name">Do Nothing</span> keyword in the test data.</p>
<p>Example Python library implemented as a module in the <span class=3D"fil=
e">MyLibrary.py</span> file:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">hello</span><span class=3D"p">(</span><span class=3D"n">nam=
e</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s2">"Hello, </span><span class=3D"si">%s</span><span class=3D"s2">!"</span>=
 <span class=3D"o">%</span> <span class=3D"n">name</span><span class=3D"p">=
)</span>

<span class=3D"k">def</span> <span class=3D"nf">do_nothing</span><span clas=
s=3D"p">():</span>
    <span class=3D"k">pass</span>
</pre></div>
<p>Example Java library implemented as a class in the <span class=3D"file">=
MyLibrary.java</span> file:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">MyLibrary</span> <span =
class=3D"o">{</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">hello</span><span class=3D"o">(</span><span class=3D"n">String<=
/span> <span class=3D"n">name</span><span class=3D"o">)</span> <span class=
=3D"o">{</span>
        <span class=3D"n">System</span><span class=3D"o">.</span><span clas=
s=3D"na">out</span><span class=3D"o">.</span><span class=3D"na">println</sp=
an><span class=3D"o">(</span><span class=3D"s">"Hello, "</span> <span class=
=3D"o">+</span> <span class=3D"n">name</span> <span class=3D"o">+</span> <s=
pan class=3D"s">"!"</span><span class=3D"o">);</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">doNothing</span><span class=3D"o">()</span> <span class=3D"o">{=
</span>
    <span class=3D"o">}</span>

<span class=3D"o">}</span>
</pre></div>
<p>The example below illustrates how the example libraries above can be
used. If you want to try this yourself, make sure that the library is
in the <a class=3D"reference internal" href=3D"http://robotframework.org/ro=
botframework/latest/RobotFrameworkUserGuide.html#module-search-path">module=
 search path</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">MyLibrary</span><span class=3D"p"></span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">My Test</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Do Nothing</span><span clas=
s=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Hello</span><span class=3D"=
p">    </span><span class=3D"s">world</span><span class=3D"p"></span>
</pre></div>
<div class=3D"section" id=3D"using-a-custom-keyword-name">
<h5>Using a custom keyword name</h5>
<p>It is possible to expose a different name for a keyword instead of the
default keyword name which maps to the method name.  This can be accomplish=
ed
by setting the <code>robot_name</code> attribute on the method to the desir=
ed custom name.
This is typically easiest done by using the <code>robot.api.deco.keyword</c=
ode> decorator
as follows:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">robot.api.deco</span> <span class=3D"kn">import</span> <s=
pan class=3D"n">keyword</span>

<span class=3D"nd">@keyword</span><span class=3D"p">(</span><span class=3D"=
s1">'Login Via User Panel'</span><span class=3D"p">)</span>
<span class=3D"k">def</span> <span class=3D"nf">login</span><span class=3D"=
p">(</span><span class=3D"n">username</span><span class=3D"p">,</span> <spa=
n class=3D"n">password</span><span class=3D"p">):</span>
    <span class=3D"c1"># ...</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">My Test</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Login Via User Panel</span>=
<span class=3D"p">    ${</span><span class=3D"nv">username</span><span clas=
s=3D"p">}    ${</span><span class=3D"nv">password</span><span class=3D"p">}=
</span>
</pre></div>
<p>Using this decorator without an argument will have no effect on the expo=
sed
keyword name, but will still set the <code>robot_name</code> attribute.  Th=
is allows
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#marking-methods-to-expose-as-keyw=
ords">marking methods to expose as keywords</a> without actually changing k=
eyword
names. Starting from Robot Framework 3.0.2, methods that have the <code>rob=
ot_name</code>
attribute also create keywords even if the method name itself would start w=
ith
an underscore.</p>
<p>Setting a custom keyword name can also enable library keywords to accept
arguments using <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#embedding-argumen=
ts-into-keyword-names">Embedded Arguments</a> syntax.</p>
</div>
</div>
<div class=3D"section" id=3D"keyword-tags">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id787">Keyword tags</a></h4>
<p>Starting from Robot Framework 2.9, library keywords and <a class=3D"refe=
rence internal" href=3D"http://robotframework.org/robotframework/latest/Rob=
otFrameworkUserGuide.html#user-keyword-tags">user keywords</a> can
have tags. Library keywords can define them by setting the <code>robot_tags=
</code>
attribute on the method to a list of desired tags. The <code>robot.api.deco=
.keyword</code>
decorator may be used as a shortcut for setting this attribute when used as
follows:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">robot.api.deco</span> <span class=3D"kn">import</span> <s=
pan class=3D"n">keyword</span>

<span class=3D"nd">@keyword</span><span class=3D"p">(</span><span class=3D"=
n">tags</span><span class=3D"o">=3D</span><span class=3D"p">[</span><span c=
lass=3D"s1">'tag1'</span><span class=3D"p">,</span> <span class=3D"s1">'tag=
2'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">login</span><span class=3D"=
p">(</span><span class=3D"n">username</span><span class=3D"p">,</span> <spa=
n class=3D"n">password</span><span class=3D"p">):</span>
    <span class=3D"c1"># ...</span>

<span class=3D"nd">@keyword</span><span class=3D"p">(</span><span class=3D"=
s1">'Custom name'</span><span class=3D"p">,</span> <span class=3D"p">[</spa=
n><span class=3D"s1">'tags'</span><span class=3D"p">,</span> <span class=3D=
"s1">'here'</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">another_example</span><span=
 class=3D"p">():</span>
    <span class=3D"c1"># ...</span>
</pre></div>
<p>Another option for setting tags is giving them on the last line of
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#documenting-libraries">keyword do=
cumentation</a> with <code>Tags:</code> prefix and separated by a comma. Fo=
r
example:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">login</span><span class=3D"p">(</span><span class=3D"n">use=
rname</span><span class=3D"p">,</span> <span class=3D"n">password</span><sp=
an class=3D"p">):</span>
    <span class=3D"sd">"""Log user in to SUT.</span>

<span class=3D"sd">    Tags: tag1, tag2</span>
<span class=3D"sd">    """</span>
    <span class=3D"c1"># ...</span>
</pre></div>
</div>
<div class=3D"section" id=3D"keyword-arguments">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id788">Keyword arguments</a></h4>
<p>With a static and hybrid API, the information on how many arguments a
keyword needs is got directly from the method that implements it.
Libraries using the <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#dynamic-libra=
ry-api">dynamic library API</a> have other means for sharing
this information, so this section is not relevant to them.</p>
<p>The most common and also the simplest situation is when a keyword needs =
an
exact number of arguments. In this case, both the Python and Java methods
simply take exactly those arguments. For example, a method implementing a
keyword with no arguments takes no arguments either, a method
implementing a keyword with one argument also takes one argument, and
so on.</p>
<p>Example Python keywords taking different numbers of arguments:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">no_arguments</span><span class=3D"p">():</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s2">"Keyword got no arguments."</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">one_argument</span><span cl=
ass=3D"p">(</span><span class=3D"n">arg</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s2">"Keyword got one argument '</span><span class=3D"si">%s</span><span cla=
ss=3D"s2">'."</span> <span class=3D"o">%</span> <span class=3D"n">arg</span=
><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">three_arguments</span><span=
 class=3D"p">(</span><span class=3D"n">a1</span><span class=3D"p">,</span> =
<span class=3D"n">a2</span><span class=3D"p">,</span> <span class=3D"n">a3<=
/span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s2">"Keyword got three arguments '</span><span class=3D"si">%s</span><span =
class=3D"s2">', '</span><span class=3D"si">%s</span><span class=3D"s2">' an=
d '</span><span class=3D"si">%s</span><span class=3D"s2">'."</span> <span c=
lass=3D"o">%</span> <span class=3D"p">(</span><span class=3D"n">a1</span><s=
pan class=3D"p">,</span> <span class=3D"n">a2</span><span class=3D"p">,</sp=
an> <span class=3D"n">a3</span><span class=3D"p">))</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">A major limitation with Java libraries using the static l=
ibrary API
is that they do not support the <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#n=
amed-argument-syntax">named argument syntax</a>. If this
is a blocker, it is possible to either use Python or switch to
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#dynamic-library-api">dynamic =
library API</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"default-values-to-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id789">Default values to keywords</a=
></h4>
<p>It is often useful that some of the arguments that a keyword uses have
default values. Python and Java have different syntax for handling default
values to methods, and the natural syntax of these languages can be
used when creating test libraries for Robot Framework.</p>
<div class=3D"section" id=3D"default-values-with-python">
<h5>Default values with Python</h5>
<p>In Python a method has always exactly one implementation and possible
default values are specified in the method signature. The syntax,
which is familiar to all Python programmers, is illustrated below:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">one_default</span><span class=3D"p">(</span><span class=3D"=
n">arg</span><span class=3D"o">=3D</span><span class=3D"s1">'default'</span=
><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s2">"Argument has value </span><span class=3D"si">%s</span><span class=3D"s=
2">"</span> <span class=3D"o">%</span> <span class=3D"n">arg</span><span cl=
ass=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">multiple_defaults</span><sp=
an class=3D"p">(</span><span class=3D"n">arg1</span><span class=3D"p">,</sp=
an> <span class=3D"n">arg2</span><span class=3D"o">=3D</span><span class=3D=
"s1">'default 1'</span><span class=3D"p">,</span> <span class=3D"n">arg3</s=
pan><span class=3D"o">=3D</span><span class=3D"s1">'default 2'</span><span =
class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s2">"Got arguments </span><span class=3D"si">%s</span><span class=3D"s2">, =
</span><span class=3D"si">%s</span><span class=3D"s2"> and </span><span cla=
ss=3D"si">%s</span><span class=3D"s2">"</span> <span class=3D"o">%</span> <=
span class=3D"p">(</span><span class=3D"n">arg1</span><span class=3D"p">,</=
span> <span class=3D"n">arg2</span><span class=3D"p">,</span> <span class=
=3D"n">arg3</span><span class=3D"p">))</span>
</pre></div>
<p>The first example keyword above can be used either with zero or one
arguments. If no arguments are given, <code>arg</code> gets the value
<code>default</code>. If there is one argument, <code>arg</code> gets that =
value,
and calling the keyword with more than one argument fails. In the
second example, one argument is always required, but the second and
the third one have default values, so it is possible to use the keyword
with one to three arguments.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Defaults</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">One Default</span><span cla=
ss=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">One Default</span><span cla=
ss=3D"p">    </span><span class=3D"s">argument</span><span class=3D"p"></sp=
an>
<span class=3D"p">    </span><span class=3D"nf">Multiple Defaults</span><sp=
an class=3D"p">    </span><span class=3D"s">required arg</span><span class=
=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Multiple Defaults</span><sp=
an class=3D"p">    </span><span class=3D"s">required arg</span><span class=
=3D"p">    </span><span class=3D"s">optional</span><span class=3D"p"></span=
>
<span class=3D"p">    </span><span class=3D"nf">Multiple Defaults</span><sp=
an class=3D"p">    </span><span class=3D"s">required arg</span><span class=
=3D"p">    </span><span class=3D"s">optional 1</span><span class=3D"p">    =
</span><span class=3D"s">optional 2</span><span class=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"default-values-with-java">
<h5>Default values with Java</h5>
<p>In Java one method can have several implementations with different
signatures. Robot Framework regards all these implementations as one
keyword, which can be used with different arguments. This syntax can
thus be used to provide support for the default values. This is
illustrated by the example below, which is functionally identical to
the earlier Python example:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kt">void</span> <span class=3D"nf">oneDefault</span><span c=
lass=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">arg</s=
pan><span class=3D"o">)</span> <span class=3D"o">{</span>
    <span class=3D"n">System</span><span class=3D"o">.</span><span class=3D=
"na">out</span><span class=3D"o">.</span><span class=3D"na">println</span><=
span class=3D"o">(</span><span class=3D"s">"Argument has value "</span> <sp=
an class=3D"o">+</span> <span class=3D"n">arg</span><span class=3D"o">);</s=
pan>
<span class=3D"o">}</span>

<span class=3D"kd">public</span> <span class=3D"kt">void</span> <span class=
=3D"nf">oneDefault</span><span class=3D"o">()</span> <span class=3D"o">{</s=
pan>
    <span class=3D"n">oneDefault</span><span class=3D"o">(</span><span clas=
s=3D"s">"default"</span><span class=3D"o">);</span>
<span class=3D"o">}</span>

<span class=3D"kd">public</span> <span class=3D"kt">void</span> <span class=
=3D"nf">multipleDefaults</span><span class=3D"o">(</span><span class=3D"n">=
String</span> <span class=3D"n">arg1</span><span class=3D"o">,</span> <span=
 class=3D"n">String</span> <span class=3D"n">arg2</span><span class=3D"o">,=
</span> <span class=3D"n">String</span> <span class=3D"n">arg3</span><span =
class=3D"o">)</span> <span class=3D"o">{</span>
    <span class=3D"n">System</span><span class=3D"o">.</span><span class=3D=
"na">out</span><span class=3D"o">.</span><span class=3D"na">println</span><=
span class=3D"o">(</span><span class=3D"s">"Got arguments "</span> <span cl=
ass=3D"o">+</span> <span class=3D"n">arg1</span> <span class=3D"o">+</span>=
 <span class=3D"s">", "</span> <span class=3D"o">+</span> <span class=3D"n"=
>arg2</span> <span class=3D"o">+</span> <span class=3D"s">" and "</span> <s=
pan class=3D"o">+</span> <span class=3D"n">arg3</span><span class=3D"o">);<=
/span>
<span class=3D"o">}</span>

<span class=3D"kd">public</span> <span class=3D"kt">void</span> <span class=
=3D"nf">multipleDefaults</span><span class=3D"o">(</span><span class=3D"n">=
String</span> <span class=3D"n">arg1</span><span class=3D"o">,</span> <span=
 class=3D"n">String</span> <span class=3D"n">arg2</span><span class=3D"o">)=
</span> <span class=3D"o">{</span>
    <span class=3D"n">multipleDefaults</span><span class=3D"o">(</span><spa=
n class=3D"n">arg1</span><span class=3D"o">,</span> <span class=3D"n">arg2<=
/span><span class=3D"o">,</span> <span class=3D"s">"default 2"</span><span =
class=3D"o">);</span>
<span class=3D"o">}</span>

<span class=3D"kd">public</span> <span class=3D"kt">void</span> <span class=
=3D"nf">multipleDefaults</span><span class=3D"o">(</span><span class=3D"n">=
String</span> <span class=3D"n">arg1</span><span class=3D"o">)</span> <span=
 class=3D"o">{</span>
    <span class=3D"n">multipleDefaults</span><span class=3D"o">(</span><spa=
n class=3D"n">arg1</span><span class=3D"o">,</span> <span class=3D"s">"defa=
ult 1"</span><span class=3D"o">);</span>
<span class=3D"o">}</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"variable-number-of-arguments-varargs">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id790">Variable number of arguments =
(<code>*varargs</code>)</a></h4>
<p>Robot Framework supports also keywords that take any number of
arguments. Similarly as with the default values, the actual syntax to use
in test libraries is different in Python and Java.</p>
<div class=3D"section" id=3D"variable-number-of-arguments-with-python">
<h5>Variable number of arguments with Python</h5>
<p>Python supports methods accepting any number of arguments. The same
syntax works in libraries and, as the examples below show, it can also
be combined with other ways of specifying arguments:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">any_arguments</span><span class=3D"p">(</span><span class=
=3D"o">*</span><span class=3D"n">args</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s2">"Got arguments:"</span><span class=3D"p">)</span>
    <span class=3D"k">for</span> <span class=3D"n">arg</span> <span class=
=3D"ow">in</span> <span class=3D"n">args</span><span class=3D"p">:</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"n">arg</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">one_required</span><span cl=
ass=3D"p">(</span><span class=3D"n">required</span><span class=3D"p">,</spa=
n> <span class=3D"o">*</span><span class=3D"n">others</span><span class=3D"=
p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s2">"Required: </span><span class=3D"si">%s</span><span class=3D"se">\n</sp=
an><span class=3D"s2">Others:"</span> <span class=3D"o">%</span> <span clas=
s=3D"n">required</span><span class=3D"p">)</span>
    <span class=3D"k">for</span> <span class=3D"n">arg</span> <span class=
=3D"ow">in</span> <span class=3D"n">others</span><span class=3D"p">:</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"n">arg</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">also_defaults</span><span c=
lass=3D"p">(</span><span class=3D"n">req</span><span class=3D"p">,</span> <=
span class=3D"n">def1</span><span class=3D"o">=3D</span><span class=3D"s2">=
"default 1"</span><span class=3D"p">,</span> <span class=3D"n">def2</span><=
span class=3D"o">=3D</span><span class=3D"s2">"default 2"</span><span class=
=3D"p">,</span> <span class=3D"o">*</span><span class=3D"n">rest</span><spa=
n class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
n">req</span><span class=3D"p">,</span> <span class=3D"n">def1</span><span =
class=3D"p">,</span> <span class=3D"n">def2</span><span class=3D"p">,</span=
> <span class=3D"n">rest</span><span class=3D"p">)</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Varargs</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Any Arguments</span><span c=
lass=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Any Arguments</span><span c=
lass=3D"p">    </span><span class=3D"s">argument</span><span class=3D"p"></=
span>
<span class=3D"p">    </span><span class=3D"nf">Any Arguments</span><span c=
lass=3D"p">    </span><span class=3D"s">arg 1</span><span class=3D"p">    <=
/span><span class=3D"s">arg 2</span><span class=3D"p">    </span><span clas=
s=3D"s">arg 3</span><span class=3D"p">    </span><span class=3D"s">arg 4</s=
pan><span class=3D"p">    </span><span class=3D"s">arg 5</span><span class=
=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">One Required</span><span cl=
ass=3D"p">     </span><span class=3D"s">required arg</span><span class=3D"p=
"></span>
<span class=3D"p">    </span><span class=3D"nf">One Required</span><span cl=
ass=3D"p">     </span><span class=3D"s">required arg</span><span class=3D"p=
">    </span><span class=3D"s">another arg</span><span class=3D"p">    </sp=
an><span class=3D"s">yet another</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Also Defaults</span><span c=
lass=3D"p">    </span><span class=3D"s">required</span><span class=3D"p"></=
span>
<span class=3D"p">    </span><span class=3D"nf">Also Defaults</span><span c=
lass=3D"p">    </span><span class=3D"s">required</span><span class=3D"p">  =
  </span><span class=3D"s">these two</span><span class=3D"p">    </span><sp=
an class=3D"s">have defaults</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Also Defaults</span><span c=
lass=3D"p">    </span><span class=3D"s">1</span><span class=3D"p">    </spa=
n><span class=3D"s">2</span><span class=3D"p">    </span><span class=3D"s">=
3</span><span class=3D"p">    </span><span class=3D"s">4</span><span class=
=3D"p">    </span><span class=3D"s">5</span><span class=3D"p">    </span><s=
pan class=3D"s">6</span><span class=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"variable-number-of-arguments-with-java">
<h5>Variable number of arguments with Java</h5>
<p>Robot Framework supports <a class=3D"reference external" href=3D"http://=
docs.oracle.com/javase/1.5.0/docs/guide/language/varargs.html">Java varargs=
 syntax</a> for defining variable number of
arguments. For example, the following two keywords are functionally identic=
al
to the above Python examples with same names:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kt">void</span> <span class=3D"nf">anyArguments</span><span=
 class=3D"o">(</span><span class=3D"n">String</span><span class=3D"o">...</=
span> <span class=3D"n">varargs</span><span class=3D"o">)</span> <span clas=
s=3D"o">{</span>
    <span class=3D"n">System</span><span class=3D"o">.</span><span class=3D=
"na">out</span><span class=3D"o">.</span><span class=3D"na">println</span><=
span class=3D"o">(</span><span class=3D"s">"Got arguments:"</span><span cla=
ss=3D"o">);</span>
    <span class=3D"k">for</span> <span class=3D"o">(</span><span class=3D"n=
">String</span> <span class=3D"n">arg</span><span class=3D"o">:</span> <spa=
n class=3D"n">varargs</span><span class=3D"o">)</span> <span class=3D"o">{<=
/span>
        <span class=3D"n">System</span><span class=3D"o">.</span><span clas=
s=3D"na">out</span><span class=3D"o">.</span><span class=3D"na">println</sp=
an><span class=3D"o">(</span><span class=3D"n">arg</span><span class=3D"o">=
);</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>

<span class=3D"kd">public</span> <span class=3D"kt">void</span> <span class=
=3D"nf">oneRequired</span><span class=3D"o">(</span><span class=3D"n">Strin=
g</span> <span class=3D"n">required</span><span class=3D"o">,</span> <span =
class=3D"n">String</span><span class=3D"o">...</span> <span class=3D"n">oth=
ers</span><span class=3D"o">)</span> <span class=3D"o">{</span>
    <span class=3D"n">System</span><span class=3D"o">.</span><span class=3D=
"na">out</span><span class=3D"o">.</span><span class=3D"na">println</span><=
span class=3D"o">(</span><span class=3D"s">"Required: "</span> <span class=
=3D"o">+</span> <span class=3D"n">required</span> <span class=3D"o">+</span=
> <span class=3D"s">"\nOthers:"</span><span class=3D"o">);</span>
    <span class=3D"k">for</span> <span class=3D"o">(</span><span class=3D"n=
">String</span> <span class=3D"n">arg</span><span class=3D"o">:</span> <spa=
n class=3D"n">others</span><span class=3D"o">)</span> <span class=3D"o">{</=
span>
        <span class=3D"n">System</span><span class=3D"o">.</span><span clas=
s=3D"na">out</span><span class=3D"o">.</span><span class=3D"na">println</sp=
an><span class=3D"o">(</span><span class=3D"n">arg</span><span class=3D"o">=
);</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
<p>It is also possible to use variable number of arguments also by
having an array or <code>java.util.List</code> as the last argument, or sec=
ond to last
if <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#free-keyword-arguments-kwargs"=
>free keyword arguments (**kwargs)</a> are used. This is illustrated
by the following examples that are functionally identical to
the previous ones:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kt">void</span> <span class=3D"nf">anyArguments</span><span=
 class=3D"o">(</span><span class=3D"n">String</span><span class=3D"o">[]</s=
pan> <span class=3D"n">varargs</span><span class=3D"o">)</span> <span class=
=3D"o">{</span>
    <span class=3D"n">System</span><span class=3D"o">.</span><span class=3D=
"na">out</span><span class=3D"o">.</span><span class=3D"na">println</span><=
span class=3D"o">(</span><span class=3D"s">"Got arguments:"</span><span cla=
ss=3D"o">);</span>
    <span class=3D"k">for</span> <span class=3D"o">(</span><span class=3D"n=
">String</span> <span class=3D"n">arg</span><span class=3D"o">:</span> <spa=
n class=3D"n">varargs</span><span class=3D"o">)</span> <span class=3D"o">{<=
/span>
        <span class=3D"n">System</span><span class=3D"o">.</span><span clas=
s=3D"na">out</span><span class=3D"o">.</span><span class=3D"na">println</sp=
an><span class=3D"o">(</span><span class=3D"n">arg</span><span class=3D"o">=
);</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>

<span class=3D"kd">public</span> <span class=3D"kt">void</span> <span class=
=3D"nf">oneRequired</span><span class=3D"o">(</span><span class=3D"n">Strin=
g</span> <span class=3D"n">required</span><span class=3D"o">,</span> <span =
class=3D"n">List</span><span class=3D"o">&lt;</span><span class=3D"n">Strin=
g</span><span class=3D"o">&gt;</span> <span class=3D"n">others</span><span =
class=3D"o">)</span> <span class=3D"o">{</span>
    <span class=3D"n">System</span><span class=3D"o">.</span><span class=3D=
"na">out</span><span class=3D"o">.</span><span class=3D"na">println</span><=
span class=3D"o">(</span><span class=3D"s">"Required: "</span> <span class=
=3D"o">+</span> <span class=3D"n">required</span> <span class=3D"o">+</span=
> <span class=3D"s">"\nOthers:"</span><span class=3D"o">);</span>
    <span class=3D"k">for</span> <span class=3D"o">(</span><span class=3D"n=
">String</span> <span class=3D"n">arg</span><span class=3D"o">:</span> <spa=
n class=3D"n">others</span><span class=3D"o">)</span> <span class=3D"o">{</=
span>
        <span class=3D"n">System</span><span class=3D"o">.</span><span clas=
s=3D"na">out</span><span class=3D"o">.</span><span class=3D"na">println</sp=
an><span class=3D"o">(</span><span class=3D"n">arg</span><span class=3D"o">=
);</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Only <code>java.util.List</code> is supported as varargs,=
 not any of
its sub types.</p>
</div>
<p>The support for variable number of arguments with Java keywords has one
limitation: it works only when methods have one signature. Thus it is not
possible to have Java keywords with both default values and varargs.</p>
</div>
</div>
<div class=3D"section" id=3D"free-keyword-arguments-kwargs">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id791">Free keyword arguments (<code=
>**kwargs</code>)</a></h4>
<p>Robot Framework supports <a class=3D"reference external" href=3D"https:/=
/docs.python.org/tutorial/controlflow.html#keyword-arguments">Python's **kw=
args syntax</a> and extends that support
also to Java. How to use use keywords that accept <em>free keyword argument=
s</em>,
also known as <em>free named arguments</em>, is <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#free-named-arguments">discussed under the Creating test
cases section</a>. In this section we take a look at how to create such key=
words
using Python and Java.</p>
<div class=3D"section" id=3D"free-keyword-arguments-with-python">
<h5>Free keyword arguments with Python</h5>
<p>If you are already familiar how kwargs work with Python, understanding h=
ow
they work with Robot Framework test libraries is rather simple. The example
below shows the basic functionality:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">example_keyword</span><span class=3D"p">(</span><span class=
=3D"o">**</span><span class=3D"n">stuff</span><span class=3D"p">):</span>
    <span class=3D"k">for</span> <span class=3D"n">name</span><span class=
=3D"p">,</span> <span class=3D"n">value</span> <span class=3D"ow">in</span>=
 <span class=3D"n">stuff</span><span class=3D"o">.</span><span class=3D"n">=
items</span><span class=3D"p">():</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"n">name</span><span class=3D"p">,</span> <span class=3D"n">value</span>=
<span class=3D"p">)</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Keyword Arguments</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Example Keyword</span><span=
 class=3D"p">    </span><span class=3D"s">hello=3Dworld</span><span class=
=3D"p">        </span><span class=3D"c"># Logs 'hello world'.</span>
<span class=3D"p">    </span><span class=3D"nf">Example Keyword</span><span=
 class=3D"p">    </span><span class=3D"s">foo=3D1</span><span class=3D"p"> =
   </span><span class=3D"s">bar=3D42</span><span class=3D"p">    </span><sp=
an class=3D"c"># Logs 'foo 1' and 'bar 42'.</span>
</pre></div>
<p>Basically, all arguments at the end of the keyword call that use the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#named-argument-syntax">named argu=
ment syntax</a> <code>name=3Dvalue</code>, and that do not match any
other arguments, are passed to the keyword as kwargs. To avoid using a lite=
ral
value like <code>foo=3Dquux</code> as a free keyword argument, it must be <=
a class=3D"reference internal" href=3D"http://robotframework.org/robotframe=
work/latest/RobotFrameworkUserGuide.html#escaping">escaped</a>
like <code>foo\=3Dquux</code>.</p>
<p>The following example illustrates how normal arguments, varargs, and kwa=
rgs
work together:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">various_args</span><span class=3D"p">(</span><span class=3D=
"n">arg</span><span class=3D"p">,</span> <span class=3D"o">*</span><span cl=
ass=3D"n">varargs</span><span class=3D"p">,</span> <span class=3D"o">**</sp=
an><span class=3D"n">kwargs</span><span class=3D"p">):</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'arg:'</span><span class=3D"p">,</span> <span class=3D"n">arg</span><sp=
an class=3D"p">)</span>
    <span class=3D"k">for</span> <span class=3D"n">value</span> <span class=
=3D"ow">in</span> <span class=3D"n">varargs</span><span class=3D"p">:</span=
>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'vararg:'</span><span class=3D"p">,</span> <span class=3D"n">value<=
/span><span class=3D"p">)</span>
    <span class=3D"k">for</span> <span class=3D"n">name</span><span class=
=3D"p">,</span> <span class=3D"n">value</span> <span class=3D"ow">in</span>=
 <span class=3D"nb">sorted</span><span class=3D"p">(</span><span class=3D"n=
">kwargs</span><span class=3D"o">.</span><span class=3D"n">items</span><spa=
n class=3D"p">()):</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'kwarg:'</span><span class=3D"p">,</span> <span class=3D"n">name</s=
pan><span class=3D"p">,</span> <span class=3D"n">value</span><span class=3D=
"p">)</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Positional</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Various Args</span><span cl=
ass=3D"p">    </span><span class=3D"s">hello</span><span class=3D"p">    </=
span><span class=3D"s">world</span><span class=3D"p">                </span=
><span class=3D"c"># Logs 'arg: hello' and 'vararg: world'.</span>

<span class=3D"gu">Named</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Various Args</span><span cl=
ass=3D"p">    </span><span class=3D"s">arg=3Dvalue</span><span class=3D"p">=
                     </span><span class=3D"c"># Logs 'arg: value'.</span>

<span class=3D"gu">Kwargs</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Various Args</span><span cl=
ass=3D"p">    </span><span class=3D"s">a=3D1</span><span class=3D"p">    </=
span><span class=3D"s">b=3D2</span><span class=3D"p">    </span><span class=
=3D"s">c=3D3</span><span class=3D"p">             </span><span class=3D"c">=
# Logs 'kwarg: a 1', 'kwarg: b 2' and 'kwarg: c 3'.</span>
<span class=3D"p">    </span><span class=3D"nf">Various Args</span><span cl=
ass=3D"p">    </span><span class=3D"s">c=3D3</span><span class=3D"p">    </=
span><span class=3D"s">a=3D1</span><span class=3D"p">    </span><span class=
=3D"s">b=3D2</span><span class=3D"p">             </span><span class=3D"c">=
# Same as above. Order does not matter.</span>

<span class=3D"gu">Positional and kwargs</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Various Args</span><span cl=
ass=3D"p">    </span><span class=3D"s">1</span><span class=3D"p">    </span=
><span class=3D"s">2</span><span class=3D"p">    </span><span class=3D"s">k=
w=3D3</span><span class=3D"p">                </span><span class=3D"c"># Lo=
gs 'arg: 1', 'vararg: 2' and 'kwarg: kw 3'.</span>

<span class=3D"gu">Named and kwargs</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Various Args</span><span cl=
ass=3D"p">    </span><span class=3D"s">arg=3Dvalue</span><span class=3D"p">=
      </span><span class=3D"s">hello=3Dworld</span><span class=3D"p">    </=
span><span class=3D"c"># Logs 'arg: value' and 'kwarg: hello world'.</span>
<span class=3D"p">    </span><span class=3D"nf">Various Args</span><span cl=
ass=3D"p">    </span><span class=3D"s">hello=3Dworld</span><span class=3D"p=
">    </span><span class=3D"s">arg=3Dvalue</span><span class=3D"p">      </=
span><span class=3D"c"># Same as above. Order does not matter.</span>
</pre></div>
<p>For a real world example of using a signature exactly like in the above
example, see <span class=3D"name">Run Process</span> and <span class=3D"nam=
e">Start Keyword</span> keywords in the
<a class=3D"reference external" href=3D"http://robotframework.org/robotfram=
ework/latest/libraries/Process.html">Process</a> library.</p>
</div>
<div class=3D"section" id=3D"free-keyword-arguments-with-java">
<h5>Free keyword arguments with Java</h5>
<p>Also Java libraries support the free
keyword arguments syntax. Java itself has no kwargs syntax, but keywords
can have <code>java.util.Map</code> as the last argument to specify that th=
ey
accept kwargs.</p>
<p>If a Java keyword accepts kwargs, Robot Framework will automatically pac=
k
all arguments in <code>name=3Dvalue</code> syntax at the end of the keyword=
 call
into a <code>Map</code> and pass it to the keyword. For example, following
example keywords can be used exactly like the previous Python examples:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kt">void</span> <span class=3D"nf">exampleKeyword</span><sp=
an class=3D"o">(</span><span class=3D"n">Map</span><span class=3D"o">&lt;</=
span><span class=3D"n">String</span><span class=3D"o">,</span> <span class=
=3D"n">String</span><span class=3D"o">&gt;</span> <span class=3D"n">stuff</=
span><span class=3D"o">):</span>
    <span class=3D"k">for</span> <span class=3D"o">(</span><span class=3D"n=
">String</span> <span class=3D"n">key</span><span class=3D"o">:</span> <spa=
n class=3D"n">stuff</span><span class=3D"o">.</span><span class=3D"na">keyS=
et</span><span class=3D"o">())</span>
        <span class=3D"n">System</span><span class=3D"o">.</span><span clas=
s=3D"na">out</span><span class=3D"o">.</span><span class=3D"na">println</sp=
an><span class=3D"o">(</span><span class=3D"n">key</span> <span class=3D"o"=
>+</span> <span class=3D"s">" "</span> <span class=3D"o">+</span> <span cla=
ss=3D"n">stuff</span><span class=3D"o">.</span><span class=3D"na">get</span=
><span class=3D"o">(</span><span class=3D"n">key</span><span class=3D"o">))=
;</span>

<span class=3D"kd">public</span> <span class=3D"kt">void</span> <span class=
=3D"nf">variousArgs</span><span class=3D"o">(</span><span class=3D"n">Strin=
g</span> <span class=3D"n">arg</span><span class=3D"o">,</span> <span class=
=3D"n">List</span><span class=3D"o">&lt;</span><span class=3D"n">String</sp=
an><span class=3D"o">&gt;</span> <span class=3D"n">varargs</span><span clas=
s=3D"o">,</span> <span class=3D"n">Map</span><span class=3D"o">&lt;</span><=
span class=3D"n">String</span><span class=3D"o">,</span> <span class=3D"n">=
Object</span><span class=3D"o">&gt;</span> <span class=3D"n">kwargs</span><=
span class=3D"o">):</span>
    <span class=3D"n">System</span><span class=3D"o">.</span><span class=3D=
"na">out</span><span class=3D"o">.</span><span class=3D"na">println</span><=
span class=3D"o">(</span><span class=3D"s">"arg: "</span> <span class=3D"o"=
>+</span> <span class=3D"n">arg</span><span class=3D"o">);</span>
    <span class=3D"k">for</span> <span class=3D"o">(</span><span class=3D"n=
">String</span> <span class=3D"n">varg</span><span class=3D"o">:</span> <sp=
an class=3D"n">varargs</span><span class=3D"o">)</span>
        <span class=3D"n">System</span><span class=3D"o">.</span><span clas=
s=3D"na">out</span><span class=3D"o">.</span><span class=3D"na">println</sp=
an><span class=3D"o">(</span><span class=3D"s">"vararg: "</span> <span clas=
s=3D"o">+</span> <span class=3D"n">varg</span><span class=3D"o">);</span>
    <span class=3D"k">for</span> <span class=3D"o">(</span><span class=3D"n=
">String</span> <span class=3D"n">key</span><span class=3D"o">:</span> <spa=
n class=3D"n">kwargs</span><span class=3D"o">.</span><span class=3D"na">key=
Set</span><span class=3D"o">())</span>
        <span class=3D"n">System</span><span class=3D"o">.</span><span clas=
s=3D"na">out</span><span class=3D"o">.</span><span class=3D"na">println</sp=
an><span class=3D"o">(</span><span class=3D"s">"kwarg: "</span> <span class=
=3D"o">+</span> <span class=3D"n">key</span> <span class=3D"o">+</span> <sp=
an class=3D"s">" "</span> <span class=3D"o">+</span> <span class=3D"n">kwar=
gs</span><span class=3D"o">.</span><span class=3D"na">get</span><span class=
=3D"o">(</span><span class=3D"n">key</span><span class=3D"o">));</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The type of the kwargs argument must be exactly <code>jav=
a.util.Map</code>,
not any of its sub types.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Similarly as with the <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#variable-number-of-arguments-with-java">varargs support</a>, a keywo=
rd supporting
kwargs cannot have more than one signature.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"keyword-only-arguments">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id792">Keyword-only arguments</a></h=
4>
<p>Starting from Robot Framework 3.1, it is possible to use <a class=3D"ref=
erence internal" href=3D"http://robotframework.org/robotframework/latest/Ro=
botFrameworkUserGuide.html#named-only-arguments">named-only
arguments</a> with different keywords. When implementing libraries using Py=
thon,
this support is provided by Python's <a class=3D"reference external" href=
=3D"https://www.python.org/dev/peps/pep-3102">keyword-only arguments</a>:</=
p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">sort_words</span><span class=3D"p">(</span><span class=3D"o=
">*</span><span class=3D"n">words</span><span class=3D"p">,</span> <span cl=
ass=3D"n">case_sensitive</span><span class=3D"o">=3D</span><span class=3D"b=
p">False</span><span class=3D"p">):</span>
    <span class=3D"n">key</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">str</span><span class=3D"o">.</span><span class=3D"n">lower</span> =
<span class=3D"k">if</span> <span class=3D"n">case_sensitive</span> <span c=
lass=3D"k">else</span> <span class=3D"bp">None</span>
    <span class=3D"k">return</span> <span class=3D"nb">sorted</span><span c=
lass=3D"p">(</span><span class=3D"n">words</span><span class=3D"p">,</span>=
 <span class=3D"n">key</span><span class=3D"o">=3D</span><span class=3D"n">=
key</span><span class=3D"p">)</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Sort Words</span><span clas=
s=3D"p">    </span><span class=3D"s">Foo</span><span class=3D"p">    </span=
><span class=3D"s">bar</span><span class=3D"p">    </span><span class=3D"s"=
>baZ</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Sort Words</span><span clas=
s=3D"p">    </span><span class=3D"s">Foo</span><span class=3D"p">    </span=
><span class=3D"s">bar</span><span class=3D"p">    </span><span class=3D"s"=
>baZ</span><span class=3D"p">    </span><span class=3D"s">case_sensitive=3D=
True</span><span class=3D"p"></span>
</pre></div>
<p>Due to keyword-only arguments being a Python 3 feature, libraries using
Python 2 cannot use it. Time to upgrade!</p>
</div>
<div class=3D"section" id=3D"argument-types">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id793">Argument types</a></h4>
<p>Arguments defined in Robot Framework test data are, by default,
passed to keywords as Unicode strings. There are, however, several ways
to use non-string values as well:</p>
<ul class=3D"simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#variables">Variables</a> can =
contain any kind of objects as values, and variables used
as arguments are passed to keywords as-is.</li>
<li>Keywords can themselves <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#manua=
l-argument-conversion">convert arguments they accept</a> to other types.</l=
i>
<li>It is possible to specify argument types explicitly using Python 3
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#specifying-argument-types-using-f=
unction-annotations">function annotations</a> or the <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#specifying-argument-types-using-keyword-decorator">@key=
word decorator</a>. In these cases
Robot Framework converts arguments automatically.</li>
<li>Automatic conversion is also done based on <a class=3D"reference intern=
al" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#implicit-argument-types-based-on-default-values">keyword defa=
ult values</a>.</li>
<li>Arguments to <a class=3D"reference internal" href=3D"http://robotframew=
ork.org/robotframework/latest/RobotFrameworkUserGuide.html#argument-types-w=
ith-java">Java keywords</a> are converted based on argument type
information.</li>
</ul>
<p>Automatic argument conversion based on function annotations, types speci=
fied
using the <code>@keyword</code> decorator, and argument default values are =
all new
features in Robot Framework 3.1. The <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#supported-conversions">Supported conversions</a> section
specifies which argument conversion are supported in these cases.</p>
<div class=3D"section" id=3D"manual-argument-conversion">
<h5>Manual argument conversion</h5>
<p>If no type information is specified to Robot Framework, all arguments no=
t
passed as <a class=3D"reference internal" href=3D"http://robotframework.org=
/robotframework/latest/RobotFrameworkUserGuide.html#variables">variables</a=
> are given to keywords as Unicode strings. This includes
cases like this:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Example Keyword</span><span=
 class=3D"p">    </span><span class=3D"s">42</span><span class=3D"p">    </=
span><span class=3D"s">False</span><span class=3D"p"></span>
</pre></div>
<p>It is always possible to convert arguments passed as strings insider key=
words.
In simple cases this means using <code>int()</code> or <code>float()</code>=
 to convert arguments
to numbers, but other kind of conversion is possible as well. When working
with Boolean values, care must be taken because all non-empty strings,
including string <code>False</code>, are considered true by Python. Robot F=
ramework's own
<code>robot.utils.is_truthy()</code> utility handles this nicely as it cons=
iders strings
like <code>FALSE</code>, <code>NO</code> and <code>NONE</code> (case-insens=
itively) to be false:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">example_keyword</span><span class=3D"p">(</span><span class=
=3D"n">count</span><span class=3D"p">,</span> <span class=3D"n">case_insens=
itive</span><span class=3D"o">=3D</span><span class=3D"bp">True</span><span=
 class=3D"p">):</span>
    <span class=3D"n">count</span> <span class=3D"o">=3D</span> <span class=
=3D"nb">int</span><span class=3D"p">(</span><span class=3D"n">count</span><=
span class=3D"p">)</span>
    <span class=3D"k">if</span> <span class=3D"n">is_truthy</span><span cla=
ss=3D"p">(</span><span class=3D"n">case_insensitive</span><span class=3D"p"=
>):</span>
        <span class=3D"c1"># ...</span>
</pre></div>
<p>Notice that with Robot Framework 3.1 and newer <code>is_truthy</code> is=
 not needed
in the above example because argument type would be got based on the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#implicit-argument-types-based-on-=
default-values">default value</a>.</p>
</div>
<div class=3D"section" id=3D"specifying-argument-types-using-function-annot=
ations">
<h5>Specifying argument types using function annotations</h5>
<p>Starting from Robot Framework 3.1, arguments passed to keywords as strin=
gs
are automatically converted if argument type information is available. The
most natural way to specify types is using Python 3 <a class=3D"reference e=
xternal" href=3D"https://www.python.org/dev/peps/pep-3107/">function annota=
tions</a>.
For example, the keyword in the previous example could be implemented as
follows and arguments would be converted automatically:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">example_keyword</span><span class=3D"p">(</span><span class=
=3D"n">count</span><span class=3D"p">:</span> <span class=3D"nb">int</span>=
<span class=3D"p">,</span> <span class=3D"n">case_insensitive</span><span c=
lass=3D"p">:</span> <span class=3D"nb">bool</span> <span class=3D"o">=3D</s=
pan> <span class=3D"bp">True</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">case_insensitive</span><s=
pan class=3D"p">:</span>
        <span class=3D"c1"># ...</span>
</pre></div>
<p>See the <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#supported-conversions"=
>Supported conversions</a> section below for a list of types that
are automatically converted and what values these types accept. It is
an error if an argument having one of the supported types is given
a value that cannot be converted. Annotating only some of the arguments
is fine.</p>
<p>Annotating arguments with other than the supported types is not an error=
,
and it is also possible to use annotations for other than typing
purposes. In those cases no conversion is done, but annotations are
nevertheless shown in the documentation generated by <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#libdoc">Libdoc</a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Because function annotations are a Python 3 feature, usin=
g them in
a library that should also work with Python 2 is not possible.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Using function annotations with Robot Framework 3.0.2 or =
earlier
<a class=3D"reference external" href=3D"https://github.com/robotframework/r=
obotframework/issues/2627">is not possible at all</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"specifying-argument-types-using-keyword-decora=
tor">
<h5>Specifying argument types using <code>@keyword</code> decorator</h5>
<p>An alternative way to specify explicit argument types is using the
<code>robot.api.deco.keyword</code> decorator. Starting from Robot Framewor=
k 3.1,
it accepts an optional <code>types</code> argument that can be used to spec=
ify argument
types either as a dictionary mapping argument names to types or as a list
mapping arguments to types based on position. These approaches are shown
below implementing the same keyword as in earlier examples:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"nd">@keyword</spa=
n><span class=3D"p">(</span><span class=3D"n">types</span><span class=3D"o"=
>=3D</span><span class=3D"p">{</span><span class=3D"s1">'count'</span><span=
 class=3D"p">:</span> <span class=3D"nb">int</span><span class=3D"p">,</spa=
n> <span class=3D"s1">'case_insensitive'</span><span class=3D"p">:</span> <=
span class=3D"nb">bool</span><span class=3D"p">})</span>
<span class=3D"k">def</span> <span class=3D"nf">example_keyword</span><span=
 class=3D"p">(</span><span class=3D"n">count</span><span class=3D"p">,</spa=
n> <span class=3D"n">case_insensitive</span><span class=3D"o">=3D</span><sp=
an class=3D"bp">True</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">case_insensitive</span><s=
pan class=3D"p">:</span>
        <span class=3D"c1"># ...</span>

<span class=3D"nd">@keyword</span><span class=3D"p">(</span><span class=3D"=
n">types</span><span class=3D"o">=3D</span><span class=3D"p">[</span><span =
class=3D"nb">int</span><span class=3D"p">,</span> <span class=3D"nb">bool</=
span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">example_keyword</span><span=
 class=3D"p">(</span><span class=3D"n">count</span><span class=3D"p">,</spa=
n> <span class=3D"n">case_insensitive</span><span class=3D"o">=3D</span><sp=
an class=3D"bp">True</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">case_insensitive</span><s=
pan class=3D"p">:</span>
        <span class=3D"c1"># ...</span>
</pre></div>
<p>Regardless of the approach that is used, it is not necessarily to specif=
y
types for all arguments. When specifying types as a list, it is possible
to use <code>None</code> or any other non-true value to mark that a certain=
 argument
does not have a type, and arguments at the end can be omitted altogether.
For example, both of these keywords specify the type only for the second
argument:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"nd">@keyword</spa=
n><span class=3D"p">(</span><span class=3D"n">types</span><span class=3D"o"=
>=3D</span><span class=3D"p">{</span><span class=3D"s1">'second'</span><spa=
n class=3D"p">:</span> <span class=3D"nb">float</span><span class=3D"p">})<=
/span>
<span class=3D"k">def</span> <span class=3D"nf">example1</span><span class=
=3D"p">(</span><span class=3D"n">first</span><span class=3D"p">,</span> <sp=
an class=3D"n">second</span><span class=3D"p">,</span> <span class=3D"n">th=
ird</span><span class=3D"p">):</span>
    <span class=3D"c1"># ...</span>

<span class=3D"nd">@keyword</span><span class=3D"p">(</span><span class=3D"=
n">types</span><span class=3D"o">=3D</span><span class=3D"p">[</span><span =
class=3D"bp">None</span><span class=3D"p">,</span> <span class=3D"nb">float=
</span><span class=3D"p">])</span>
<span class=3D"k">def</span> <span class=3D"nf">example2</span><span class=
=3D"p">(</span><span class=3D"n">first</span><span class=3D"p">,</span> <sp=
an class=3D"n">second</span><span class=3D"p">,</span> <span class=3D"n">th=
ird</span><span class=3D"p">):</span>
    <span class=3D"c1"># ...</span>
</pre></div>
<p>If any types are specified using the <code>@keyword</code> decorator, ty=
pe information
got from <a class=3D"reference internal" href=3D"http://robotframework.org/=
robotframework/latest/RobotFrameworkUserGuide.html#specifying-argument-type=
s-using-function-annotations">annotations</a> is ignored with that keyword.=
 Setting <code>types</code> to <code>None</code>
like <code>@keyword(types=3DNone)</code> disables type conversion altogethe=
r so that also
type information got from <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#implici=
t-argument-types-based-on-default-values">default values</a> is ignored.</p=
>
</div>
<div class=3D"section" id=3D"implicit-argument-types-based-on-default-value=
s">
<h5>Implicit argument types based on default values</h5>
<p>If type information is not got explicitly using annotations or the <code=
>@keyword</code>
decorator, Robot Framework 3.1 and newer tries to get it based on possible
argument default value. In this example <code>count</code> and <code>case_i=
nsensitive</code> get
types <code>int</code> and <code>bool</code>, respectively:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">example_keyword</span><span class=3D"p">(</span><span class=
=3D"n">count</span><span class=3D"o">=3D-</span><span class=3D"mi">1</span>=
<span class=3D"p">,</span> <span class=3D"n">case_insensitive</span><span c=
lass=3D"o">=3D</span><span class=3D"bp">True</span><span class=3D"p">):</sp=
an>
    <span class=3D"k">if</span> <span class=3D"n">case_insensitive</span><s=
pan class=3D"p">:</span>
        <span class=3D"c1"># ...</span>
</pre></div>
<p>When type information is got implicitly based on the default values,
argument conversion itself is not as strict as when the information is
got explicitly:</p>
<ul class=3D"simple">
<li>Conversion may be attempted also to other "similar" types. For example,
if converting to an integer fails, float conversion is attempted.</li>
<li>Conversion failures are not errors, keywords get the original value in
these cases instead.</li>
</ul>
<p>If argument conversion based on default values is not desired with a cer=
tain
argument, it can be disabled by specifying a type for that argument explici=
tly.
Alternatively argument conversion can be disabled altogether with the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#specifying-argument-types-using-k=
eyword-decorator">@keyword decorator</a> like <code>@keyword(types=3DNone)<=
/code>.</p>
</div>
<div class=3D"section" id=3D"supported-conversions">
<h5>Supported conversions</h5>
<p>The table below lists the types that Robot Framework 3.1 and newer conve=
rt
arguments to. These characteristics apply to all conversions:</p>
<ul class=3D"simple">
<li>Type can be explicitly specified using <a class=3D"reference internal" =
href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserG=
uide.html#specifying-argument-types-using-function-annotations">function an=
notations</a> or
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#specifying-argument-types-usi=
ng-keyword-decorator">@keyword decorator</a>.</li>
<li>If not explicitly specified, type can be got implicitly from <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#implicit-argument-types-based-on-default-=
values">argument
default values</a>.</li>
<li>Conversion is done only if the argument that is used is itself a Unicod=
e
string.</li>
<li>With most of the types failed conversion causes an error if the type ha=
s
been specified explicitly. Exceptions to this rule are mentioned in the
table below.</li>
<li>With most of the types string <code>NONE</code>, case-insensitively, is=
 converted to
Python <code>None</code>. Exceptions are mentioned in the table below.</li>
</ul>
<p>The type to use can be specified either using concrete types (e.g. <a cl=
ass=3D"reference external" href=3D"https://docs.python.org/library/stdtypes=
.html#list">list</a>),
by using Abstract Base Classes (ABC) (e.g. <a class=3D"reference external" =
href=3D"https://docs.python.org/library/collections.abc.html#collections.ab=
c.Sequence">Sequence</a>), or by using sub
classes of these types (e.g. <a class=3D"reference external" href=3D"https:=
//docs.python.org/library/collections.abc.html#collections.abc.MutableSeque=
nce">MutableSequence</a>). In all these cases the
argument is converted to the concrete type.</p>
<p>Also types in in the <a class=3D"reference external" href=3D"https://doc=
s.python.org/library/typing.html">typing</a> module that map to the support=
ed concrete
types or ABCs (e.g. <code>List</code>) are supported. With generics also th=
e subscription
syntax (e.g. <code>List[int]</code>) works, but no validation is done for c=
ontainer
contents.</p>
<p>In addition to using the actual types (e.g. <code>int</code>), it is pos=
sible to specify
the type using type names as a string (e.g. <code>'int'</code>) and some ty=
pes also have
aliases (e.g. <code>'integer'</code>). Matching types to names and aliases =
is
case-insensitive.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Supported argument conversions</caption>
<colgroup>
<col width=3D"9%">
<col width=3D"11%">
<col width=3D"8%">
<col width=3D"45%">
<col width=3D"27%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Type</th>
<th class=3D"head">ABC</th>
<th class=3D"head">Aliases</th>
<th class=3D"head">Explanation</th>
<th class=3D"head">Examples</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/functions.html#bool">bool</a></td>
<td>&nbsp;</td>
<td>boolean</td>
<td>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>=
1</code> are converted to <code>True</code>,
the empty string as well as <code>FALSE</code>, <code>NO</code>, <code>OFF<=
/code> and <code>0</code>
are converted to <code>False</code>, and the string <code>NONE</code> is co=
nverted
to <code>None</code>. Other strings are passed as-is, allowing keywords
to handle them specially if needed. All comparisons are
case-insensitive.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>TRUE</code> (converted to <code>True</code>)</div=
>
<div class=3D"line"><code>off</code> (converted to <code>False</code>)</div=
>
<div class=3D"line"><code>foobar</code> (returned as-is)</div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/functions.html#int">int</a></td>
<td><a class=3D"reference external" href=3D"https://docs.python.org/library=
/numbers.html#numbers.Integral">Integral</a></td>
<td>integer,
long</td>
<td>Conversion is done using the <a class=3D"reference external" href=3D"ht=
tps://docs.python.org/library/functions.html#int">int</a> built-in function=
.
If that fails and type is got implicitly from default values,
also <a class=3D"reference external" href=3D"https://docs.python.org/librar=
y/functions.html#float">float</a> conversion is attempted.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>42</code></div>
<div class=3D"line"><code>3.14</code> (only with implicit type)</div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/functions.html#float">float</a></td>
<td><a class=3D"reference external" href=3D"https://docs.python.org/library=
/numbers.html#numbers.Real">Real</a></td>
<td>double</td>
<td>Conversion is done using the <a class=3D"reference external" href=3D"ht=
tps://docs.python.org/library/functions.html#float">float</a> built-in.</td=
>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>3.14</code></div>
<div class=3D"line"><code>2.9979e8</code></div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/decimal.html#decimal.Decimal">Decimal</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Conversion is done using the <a class=3D"reference external" href=3D"ht=
tps://docs.python.org/library/decimal.html#decimal.Decimal">Decimal</a> cla=
ss.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>3.14</code></div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/functions.html#func-bytes">bytes</a></td>
<td><a class=3D"reference external" href=3D"https://docs.python.org/library=
/collections.abc.html#collections.abc.ByteString">ByteString</a></td>
<td>&nbsp;</td>
<td>Argument is converted to bytes so that each Unicode code point
below 256 is directly mapped to a matching byte. Higher code
points are not allowed. String <code>NONE</code> (case-insensitively) is
converted to matching bytes, not to Python <code>None</code>. When using
Python 2, byte conversion is only done if type is specified
explicitly.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>foobar</code></div>
<div class=3D"line"><code>hyv=C3=A4</code> (converted to <code>hyv\xe4</cod=
e>)</div>
<div class=3D"line"><code>\x00</code> (the null byte)</div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/functions.html#func-bytearray">bytearray</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Same conversion as with <a class=3D"reference external" href=3D"https:/=
/docs.python.org/library/functions.html#func-bytes">bytes</a> but the resul=
t is a <a class=3D"reference external" href=3D"https://docs.python.org/libr=
ary/functions.html#func-bytearray">bytearray</a>.</td>
<td>&nbsp;</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/datetime.html#datetime.datetime">datetime</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Argument is expected to be a timestamp in <a class=3D"reference externa=
l" href=3D"https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> like
format <code>YYYY-MM-DD hh:mm:ss.mmmmmm</code>, where any non-digit
character can be used as a separator or separators can be
omitted altogether. Additionally, only the date part is
mandatory, all possibly missing time components are considered
to be zeros.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>2018-09-12T15:47:05.123456</code></div>
<div class=3D"line"><code>2018-09-12 15:47</code></div>
<div class=3D"line"><code>2018-09-12</code></div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/datetime.html#datetime.date">date</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Same conversion as with <a class=3D"reference external" href=3D"https:/=
/docs.python.org/library/datetime.html#datetime.datetime">datetime</a> but =
all time
components are expected to be omitted or to be zeros.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>2018-09-12</code></div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/datetime.html#datetime.timedelta">timedelta</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>String is expected to represent a time interval in one of the
time formats Robot Framework supports: <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#time-as-number">time as number</a>,
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#time-as-time-string">time as time=
 string</a> or <a class=3D"reference internal" href=3D"http://robotframewor=
k.org/robotframework/latest/RobotFrameworkUserGuide.html#time-as-timer-stri=
ng">time as "timer" string</a>.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>42</code> (42 seconds)</div>
<div class=3D"line"><code>1 minute 2 seconds</code></div>
<div class=3D"line"><code>01:02</code> (same as above)</div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/enum.html#enum.Enum">Enum</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>The specified type must be an enumeration (a subclass of
<a class=3D"reference external" href=3D"https://docs.python.org/library/enu=
m.html#enum.Enum">Enum</a>) and arguments themselves must match its members=
.</td>
<td><div class=3D"first"><div class=3D"highlight"><pre><span></span><span c=
lass=3D"k">class</span> <span class=3D"nc">Color</span><span class=3D"p">(<=
/span><span class=3D"n">Enum</span><span class=3D"p">):</span>
    <span class=3D"n">RED</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">1</span>
    <span class=3D"n">GREEN</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">2</span>
</pre></div>
</div><div class=3D"last line-block">
<div class=3D"line"><code>GREEN</code></div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/constants.html#None">NoneType</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>String <code>NONE</code> (case-insensitively) is converted to <code>Non=
e</code>
object, other values are passed as-is. Mainly relevant when
type is got implicitly from <code>None</code> being a default value.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>None</code></div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/stdtypes.html#list">list</a></td>
<td><a class=3D"reference external" href=3D"https://docs.python.org/library=
/collections.abc.html#collections.abc.Sequence">Sequence</a></td>
<td>&nbsp;</td>
<td>Argument must be be a Python list literal. It is converted
to an actual list using the <a class=3D"reference external" href=3D"https:/=
/docs.python.org/library/ast.html#ast.literal_eval">ast.literal_eval</a> fu=
nction.
The list can contain any values <a class=3D"reference external" href=3D"htt=
ps://docs.python.org/library/ast.html#ast.literal_eval">ast.literal_eval</a=
> supports
inside it, including other lists or other containers.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>['foo', 'bar']</code></div>
<div class=3D"line"><code>[('one', 1), ('two', 2)]</code></div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/stdtypes.html#tuple">tuple</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Same as <a class=3D"reference external" href=3D"https://docs.python.org=
/library/stdtypes.html#list">list</a> but the argument must be a tuple lite=
ral.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>('foo', 'bar')</code></div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/stdtypes.html#dict">dict</a></td>
<td><a class=3D"reference external" href=3D"https://docs.python.org/library=
/collections.abc.html#collections.abc.Mapping">Mapping</a></td>
<td>dictionary,
map</td>
<td>Same as <a class=3D"reference external" href=3D"https://docs.python.org=
/library/stdtypes.html#list">list</a> but the argument must be a dictionary=
 literal.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>{'a': 1, 'b': 2}</code></div>
<div class=3D"line"><code>{'key': 1, 'nested': {'key': 2}}</code></div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/stdtypes.html#set">set</a></td>
<td><a class=3D"reference external" href=3D"https://docs.python.org/library=
/collections.abc.html#collections.abc.Set">Set</a></td>
<td>&nbsp;</td>
<td>Same as <a class=3D"reference external" href=3D"https://docs.python.org=
/library/stdtypes.html#list">list</a> but the argument must be a set litera=
l or
<code>set()</code> to create an empty set. Not supported on Python 2.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>{1, 2, 3, 42}</code></div>
<div class=3D"line"><code>set()</code></div>
</div>
</td>
</tr>
<tr><td><a class=3D"reference external" href=3D"https://docs.python.org/lib=
rary/stdtypes.html#frozenset">frozenset</a></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>Same conversion as with <a class=3D"reference external" href=3D"https:/=
/docs.python.org/library/stdtypes.html#set">set</a> but the result is a <a =
class=3D"reference external" href=3D"https://docs.python.org/library/stdtyp=
es.html#frozenset">frozenset</a>.</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
</div>
<div class=3D"section" id=3D"argument-types-with-java">
<h5>Argument types with Java</h5>
<p>Arguments to Java methods have types, and all the base types are
handled automatically. This means that arguments that are normal
strings in the test data are coerced to correct type at runtime. The
types that can be coerced are:</p>
<ul class=3D"simple">
<li>integer types (<code>byte</code>, <code>short</code>, <code>int</code>,=
 <code>long</code>)</li>
<li>floating point types (<code>float</code> and <code>double</code>)</li>
<li>the <code>boolean</code> type</li>
<li>object versions of the above types e.g. <code>java.lang.Integer</code><=
/li>
</ul>
<p>The coercion is done for arguments that have the same or compatible
type across all the signatures of the keyword method. In the following
example, the conversion can be done for keywords <code>doubleArgument</code=
>
and <code>compatibleTypes</code>, but not for <code>conflictingTypes</code>=
.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kt">void</span> <span class=3D"nf">doubleArgument</span><sp=
an class=3D"o">(</span><span class=3D"kt">double</span> <span class=3D"n">a=
rg</span><span class=3D"o">)</span> <span class=3D"o">{}</span>

<span class=3D"kd">public</span> <span class=3D"kt">void</span> <span class=
=3D"nf">compatibleTypes</span><span class=3D"o">(</span><span class=3D"n">S=
tring</span> <span class=3D"n">arg1</span><span class=3D"o">,</span> <span =
class=3D"n">Integer</span> <span class=3D"n">arg2</span><span class=3D"o">)=
</span> <span class=3D"o">{}</span>
<span class=3D"kd">public</span> <span class=3D"kt">void</span> <span class=
=3D"nf">compatibleTypes</span><span class=3D"o">(</span><span class=3D"n">S=
tring</span> <span class=3D"n">arg2</span><span class=3D"o">,</span> <span =
class=3D"n">Integer</span> <span class=3D"n">arg2</span><span class=3D"o">,=
</span> <span class=3D"n">Boolean</span> <span class=3D"n">arg3</span><span=
 class=3D"o">)</span> <span class=3D"o">{}</span>

<span class=3D"kd">public</span> <span class=3D"kt">void</span> <span class=
=3D"nf">conflictingTypes</span><span class=3D"o">(</span><span class=3D"n">=
String</span> <span class=3D"n">arg1</span><span class=3D"o">,</span> <span=
 class=3D"kt">int</span> <span class=3D"n">arg2</span><span class=3D"o">)</=
span> <span class=3D"o">{}</span>
<span class=3D"kd">public</span> <span class=3D"kt">void</span> <span class=
=3D"nf">conflictingTypes</span><span class=3D"o">(</span><span class=3D"kt"=
>int</span> <span class=3D"n">arg1</span><span class=3D"o">,</span> <span c=
lass=3D"n">String</span> <span class=3D"n">arg2</span><span class=3D"o">)</=
span> <span class=3D"o">{}</span>
</pre></div>
<p>The coercion works with the numeric types if the test data has a
string containing a number, and with the boolean type the data must
contain either string <code>true</code> or <code>false</code>. Coercion is =
only
done if the original value was a string from the test data, but it is
of course still possible to use variables containing correct types with
these keywords. Using variables is the only option if keywords have
conflicting signatures.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Coercion</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Double Argument</span><span=
 class=3D"p">     </span><span class=3D"s">3.14</span><span class=3D"p"></s=
pan>
<span class=3D"p">    </span><span class=3D"nf">Double Argument</span><span=
 class=3D"p">     </span><span class=3D"s">2e16</span><span class=3D"p"></s=
pan>
<span class=3D"p">    </span><span class=3D"nf">Compatible Types</span><spa=
n class=3D"p">    </span><span class=3D"s">Hello, world!</span><span class=
=3D"p">    </span><span class=3D"s">1234</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Compatible Types</span><spa=
n class=3D"p">    </span><span class=3D"s">Hi again!</span><span class=3D"p=
">    </span><span class=3D"s">-10</span><span class=3D"p">    </span><span=
 class=3D"s">true</span><span class=3D"p"></span>

<span class=3D"gu">No Coercion</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Double Argument</span><span=
 class=3D"p">    ${</span><span class=3D"nv">3.14</span><span class=3D"p">}=
</span>
<span class=3D"p">    </span><span class=3D"nf">Conflicting Types</span><sp=
an class=3D"p">    </span><span class=3D"s">1</span><span class=3D"p">     =
  ${</span><span class=3D"nv">2</span><span class=3D"p">}    </span><span c=
lass=3D"c"># must use variables</span>
<span class=3D"p">    </span><span class=3D"nf">Conflicting Types</span><sp=
an class=3D"p">    ${</span><span class=3D"nv">1</span><span class=3D"p">} =
   </span><span class=3D"s">2</span><span class=3D"p"></span>
</pre></div>
<p>Argument type coercion works also with <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#providing-arguments-to-test-libraries">Java library constructors</=
a>.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Converting arguments passed to Java based keywords is an =
old feature
and independent on the support to convert arguments of Python
keywords in Robot Framework 3.1 and newer. Conversion functionality
may be unified in the future.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"using-decorators">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id794">Using decorators</a></h4>
<p>When writing static keywords, it is sometimes useful to modify them with
Python's decorators. However, decorators modify function signatures,
and can confuse Robot Framework's introspection when determining which
arguments keywords accept. This is especially problematic when creating
library documentation with <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#libdoc=
">Libdoc</a> and when using <a class=3D"reference external" href=3D"https:/=
/github.com/robotframework/RIDE">RIDE</a>. To avoid this
issue, either do not use decorators, or use the handy <a class=3D"reference=
 external" href=3D"https://decorator.readthedocs.io/">decorator module</a>
to create signature-preserving decorators.</p>
</div>
<div class=3D"section" id=3D"embedding-arguments-into-keyword-names">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id795">Embedding arguments into keyw=
ord names</a></h4>
<p>Library keywords can also accept arguments which are passed using
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#embedding-arguments-into-keyword-=
name">Embedded Argument syntax</a>.  The <code>robot.api.deco.keyword</code=
> decorator
can be used to create a <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#using-a-c=
ustom-keyword-name">custom keyword name</a> for the keyword
which includes the desired syntax.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">robot.api.deco</span> <span class=3D"kn">import</span> <s=
pan class=3D"n">keyword</span>

<span class=3D"nd">@keyword</span><span class=3D"p">(</span><span class=3D"=
s1">'Add ${quantity:\d+} copies of ${item} to cart'</span><span class=3D"p"=
>)</span>
<span class=3D"k">def</span> <span class=3D"nf">add_copies_to_cart</span><s=
pan class=3D"p">(</span><span class=3D"n">quantity</span><span class=3D"p">=
,</span> <span class=3D"n">item</span><span class=3D"p">):</span>
    <span class=3D"c1"># ...</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">My Test</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Add 7 copies of coffee to c=
art</span><span class=3D"p"></span>
</pre></div>
<p>By default arguments are passed to implementing keywords as strings, but
automatic <a class=3D"reference internal" href=3D"http://robotframework.org=
/robotframework/latest/RobotFrameworkUserGuide.html#argument-types">argumen=
t type conversion</a> works if type information is specified
somehow. With Python 3 it is convenient to use <a class=3D"reference intern=
al" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#specifying-argument-types-using-function-annotations">functio=
n annotations</a>,
and alternatively it is possible to pass types to the <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#specifying-argument-types-using-keyword-decorator">@ke=
yword decorator</a>:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"nd">@keyword</spa=
n><span class=3D"p">(</span><span class=3D"s1">'Add ${quantity:\d+} copies =
of ${item} to cart'</span><span class=3D"p">,</span>
         <span class=3D"n">types</span><span class=3D"o">=3D</span><span cl=
ass=3D"p">{</span><span class=3D"s1">'quantity'</span><span class=3D"p">:</=
span> <span class=3D"nb">int</span><span class=3D"p">})</span>
<span class=3D"k">def</span> <span class=3D"nf">add_copies_to_cart</span><s=
pan class=3D"p">(</span><span class=3D"n">quantity</span><span class=3D"p">=
:</span> <span class=3D"nb">int</span><span class=3D"p">,</span> <span clas=
s=3D"n">item</span><span class=3D"p">):</span>
    <span class=3D"c1"># ...</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Automatic type conversion is new in Robot Framework 3.1.<=
/p>
</div>
</div>
</div>
<div class=3D"section" id=3D"communicating-with-robot-framework">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id796">4.1.4&nbsp;&nbsp;&nbsp;Commun=
icating with Robot Framework</a></h3>
<p>After a method implementing a keyword is called, it can use any
mechanism to communicate with the system under test. It can then also
send messages to Robot Framework's log file, return information that
can be saved to variables and, most importantly, report if the
keyword passed or not.</p>
<div class=3D"section" id=3D"reporting-keyword-status">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id797">Reporting keyword status</a><=
/h4>
<p>Reporting keyword status is done simply using exceptions. If an executed
method raises an exception, the keyword status is <code>FAIL</code>, and if=
 it
returns normally, the status is <code>PASS</code>.</p>
<p>The error message shown in logs, reports and the console is created
from the exception type and its message. With generic exceptions (for
example, <code>AssertionError</code>, <code>Exception</code>, and
<code>RuntimeError</code>), only the exception message is used, and with
others, the message is created in the format <code>ExceptionType:
Actual message</code>.</p>
<p>It is possible to avoid adding the
exception type as a prefix to failure message also with non generic excepti=
ons.
This is done by adding a special <code>ROBOT_SUPPRESS_NAME</code> attribute=
 with
value <code>True</code> to your exception.</p>
<p>Python:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">MyError</span><span class=3D"p">(</span><span class=3D"ne=
">RuntimeError</span><span class=3D"p">):</span>
    <span class=3D"n">ROBOT_SUPPRESS_NAME</span> <span class=3D"o">=3D</spa=
n> <span class=3D"bp">True</span>
</pre></div>
<p>Java:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">MyError</span> <span cl=
ass=3D"kd">extends</span> <span class=3D"n">RuntimeException</span> <span c=
lass=3D"o">{</span>
    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"kt">boolean</span> <span class=3D=
"n">ROBOT_SUPPRESS_NAME</span> <span class=3D"o">=3D</span> <span class=3D"=
kc">true</span><span class=3D"o">;</span>
<span class=3D"o">}</span>
</pre></div>
<p>In all cases, it is important for the users that the exception message i=
s as
informative as possible.</p>
<div class=3D"section" id=3D"html-in-error-messages">
<h5>HTML in error messages</h5>
<p>It is also possible to have HTML formatted
error messages by starting the message with text <code>*HTML*</code>:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">raise</span> <=
span class=3D"ne">AssertionError</span><span class=3D"p">(</span><span clas=
s=3D"s2">"*HTML* &lt;a href=3D'robotframework.org'&gt;Robot Framework&lt;/a=
&gt; rulez!!"</span><span class=3D"p">)</span>
</pre></div>
<p>This method can be used both when raising an exception in a library, lik=
e
in the example above, and <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#failure=
s">when users provide an error message in the test data</a>.</p>
</div>
<div class=3D"section" id=3D"cutting-long-messages-automatically">
<h5>Cutting long messages automatically</h5>
<p>If the error message is longer than 40 lines, it will be automatically
cut from the middle to prevent reports from getting too long and
difficult to read. The full error message is always shown in the log
message of the failed keyword.</p>
</div>
<div class=3D"section" id=3D"tracebacks">
<h5>Tracebacks</h5>
<p>The traceback of the exception is also logged using <code>DEBUG</code> <=
a class=3D"reference internal" href=3D"http://robotframework.org/robotframe=
work/latest/RobotFrameworkUserGuide.html#log-levels">log level</a>.
These messages are not visible in log files by default because they are ver=
y
rarely interesting for normal users. When developing libraries, it is often=
 a
good idea to run tests using <code>--loglevel DEBUG</code>.</p>
</div>
</div>
<div class=3D"section" id=3D"stopping-test-execution">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id798">Stopping test execution</a></=
h4>
<p>It is possible to fail a test case so that <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#stopping-test-execution-gracefully">the whole test execution i=
s
stopped</a>. This is done simply by having a special <code>ROBOT_EXIT_ON_FA=
ILURE</code>
attribute with <code>True</code> value set on the exception raised from the=
 keyword.
This is illustrated in the examples below.</p>
<p>Python:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">MyFatalError</span><span class=3D"p">(</span><span class=
=3D"ne">RuntimeError</span><span class=3D"p">):</span>
    <span class=3D"n">ROBOT_EXIT_ON_FAILURE</span> <span class=3D"o">=3D</s=
pan> <span class=3D"bp">True</span>
</pre></div>
<p>Java:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">MyFatalError</span> <sp=
an class=3D"kd">extends</span> <span class=3D"n">RuntimeException</span> <s=
pan class=3D"o">{</span>
    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"kt">boolean</span> <span class=3D=
"n">ROBOT_EXIT_ON_FAILURE</span> <span class=3D"o">=3D</span> <span class=
=3D"kc">true</span><span class=3D"o">;</span>
<span class=3D"o">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"continuing-test-execution-despite-of-failures"=
>
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id799">Continuing test execution des=
pite of failures</a></h4>
<p>It is possible to <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#continue-on-=
failure">continue test execution even when there are failures</a>.
The way to signal this from test libraries is adding a special
<code>ROBOT_CONTINUE_ON_FAILURE</code> attribute with <code>True</code> val=
ue to the exception
used to communicate the failure. This is demonstrated by the examples below=
.</p>
<p>Python:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">MyContinuableError</span><span class=3D"p">(</span><span =
class=3D"ne">RuntimeError</span><span class=3D"p">):</span>
    <span class=3D"n">ROBOT_CONTINUE_ON_FAILURE</span> <span class=3D"o">=
=3D</span> <span class=3D"bp">True</span>
</pre></div>
<p>Java:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">MyContinuableError</spa=
n> <span class=3D"kd">extends</span> <span class=3D"n">RuntimeException</sp=
an> <span class=3D"o">{</span>
    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"kt">boolean</span> <span class=3D=
"n">ROBOT_CONTINUE_ON_FAILURE</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"kc">true</span><span class=3D"o">;</span>
<span class=3D"o">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"logging-information">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id800">Logging information</a></h4>
<p>Exception messages are not the only way to give information to the
users. In addition to them, methods can also send messages to <a class=3D"r=
eference internal" href=3D"http://robotframework.org/robotframework/latest/=
RobotFrameworkUserGuide.html#log-file">log
files</a> simply by writing to the standard output stream (stdout) or to
the standard error stream (stderr), and they can even use different
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#log-levels">log levels</a>. Anoth=
er, and often better, logging possibility is using
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#programmatic-logging-apis">pr=
ogrammatic logging APIs</a>.</p>
<p>By default, everything written by a method into the standard output is
written to the log file as a single entry with the log level
<code>INFO</code>. Messages written into the standard error are handled
similarly otherwise, but they are echoed back to the original stderr
after the keyword execution has finished. It is thus possible to use
the stderr if you need some messages to be visible on the console where
tests are executed.</p>
<div class=3D"section" id=3D"using-log-levels">
<h5>Using log levels</h5>
<p>To use other log levels than <code>INFO</code>, or to create several
messages, specify the log level explicitly by embedding the level into
the message in the format <code>*LEVEL* Actual log message</code>, where
<code>*LEVEL*</code> must be in the beginning of a line and <code>LEVEL</co=
de> is
one of the available logging levels <code>TRACE</code>, <code>DEBUG</code>,
<code>INFO</code>, <code>WARN</code>, <code>ERROR</code> and <code>HTML</co=
de>.</p>
</div>
<div class=3D"section" id=3D"errors-and-warnings">
<h5>Errors and warnings</h5>
<p>Messages with <code>ERROR</code> or <code>WARN</code> level are automati=
cally written to the
console and a separate <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#errors-and=
-warnings-during-execution">Test Execution Errors section</a> in the log
files. This makes these messages more visible than others and allows
using them for reporting important but non-critical problems to users.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">In Robot Framework 2.9, new functionality was added to au=
tomatically
add ERRORs logged by keywords to the Test Execution Errors section.</p>
</div>
</div>
<div class=3D"section" id=3D"logging-html">
<h5>Logging HTML</h5>
<p>Everything normally logged by the library will be converted into a
format that can be safely represented as HTML. For example,
<code>&lt;b&gt;foo&lt;/b&gt;</code> will be displayed in the log exactly li=
ke that and
not as <strong>foo</strong>. If libraries want to use formatting, links, di=
splay
images and so on, they can use a special pseudo log level
<code>HTML</code>. Robot Framework will write these messages directly into
the log with the <code>INFO</code> level, so they can use any HTML syntax
they want. Notice that this feature needs to be used with care,
because, for example, one badly placed <code>&lt;/table&gt;</code> tag can =
ruin
the log file quite badly.</p>
<p>When using the <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#public-logging-=
api">public logging API</a>, various logging methods
have optional <code>html</code> attribute that can be set to <code>True</co=
de>
to enable logging in HTML format.</p>
</div>
<div class=3D"section" id=3D"timestamps">
<h5>Timestamps</h5>
<p>By default messages logged via the standard output or error streams
get their timestamps when the executed keyword ends. This means that
the timestamps are not accurate and debugging problems especially with
longer running keywords can be problematic.</p>
<p>Keywords have a possibility to add an accurate timestamp to the messages
they log if there is a need. The timestamp must be given as milliseconds
since the <a class=3D"reference external" href=3D"http://en.wikipedia.org/w=
iki/Unix_epoch">Unix epoch</a> and it must be placed after the <a class=3D"=
reference internal" href=3D"http://robotframework.org/robotframework/latest=
/RobotFrameworkUserGuide.html#using-log-levels">log level</a>
separated from it with a colon:</p>
<pre class=3D"literal-block">*INFO:1308435758660* Message with timestamp
*HTML:1308435758661* &lt;b&gt;HTML&lt;/b&gt; message with timestamp
</pre>
<p>As illustrated by the examples below, adding the timestamp is easy
both using Python and Java. If you are using Python, it is, however,
even easier to get accurate timestamps using the <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#programmatic-logging-apis">programmatic logging
APIs</a>. A big benefit of adding timestamps explicitly is that this
approach works also with the <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#remo=
te-library-interface">remote library interface</a>.</p>
<p>Python:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">time</span>

<span class=3D"k">def</span> <span class=3D"nf">example_keyword</span><span=
 class=3D"p">():</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'*INFO:</span><span class=3D"si">%d</span><span class=3D"s1">* Message =
with timestamp'</span> <span class=3D"o">%</span> <span class=3D"p">(</span=
><span class=3D"n">time</span><span class=3D"o">.</span><span class=3D"n">t=
ime</span><span class=3D"p">()</span><span class=3D"o">*</span><span class=
=3D"mi">1000</span><span class=3D"p">))</span>
</pre></div>
<p>Java:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kt">void</span> <span class=3D"nf">exampleKeyword</span><sp=
an class=3D"o">()</span> <span class=3D"o">{</span>
    <span class=3D"n">System</span><span class=3D"o">.</span><span class=3D=
"na">out</span><span class=3D"o">.</span><span class=3D"na">println</span><=
span class=3D"o">(</span><span class=3D"s">"*INFO:"</span> <span class=3D"o=
">+</span> <span class=3D"n">System</span><span class=3D"o">.</span><span c=
lass=3D"na">currentTimeMillis</span><span class=3D"o">()</span> <span class=
=3D"o">+</span> <span class=3D"s">"* Message with timestamp"</span><span cl=
ass=3D"o">);</span>
<span class=3D"o">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"logging-to-console">
<h5>Logging to console</h5>
<p>If libraries need to write something to the console they have several
options. As already discussed, warnings and all messages written to the
standard error stream are written both to the log file and to the
console. Both of these options have a limitation that the messages end
up to the console only after the currently executing keyword
finishes. A bonus is that these approaches work both with Python and
Java based libraries.</p>
<p>Another option, that is only available with Python, is writing
messages to <code>sys.__stdout__</code> or <code>sys.__stderr__</code>. Whe=
n
using this approach, messages are written to the console immediately
and are not written to the log file at all:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">sys</span>

<span class=3D"k">def</span> <span class=3D"nf">my_keyword</span><span clas=
s=3D"p">(</span><span class=3D"n">arg</span><span class=3D"p">):</span>
   <span class=3D"n">sys</span><span class=3D"o">.</span><span class=3D"n">=
__stdout__</span><span class=3D"o">.</span><span class=3D"n">write</span><s=
pan class=3D"p">(</span><span class=3D"s1">'Got arg </span><span class=3D"s=
i">%s</span><span class=3D"se">\n</span><span class=3D"s1">'</span> <span c=
lass=3D"o">%</span> <span class=3D"n">arg</span><span class=3D"p">)</span>
</pre></div>
<p>The final option is using the <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
public-logging-api">public logging API</a>:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">robot.api</span> <span class=3D"kn">import</span> <span c=
lass=3D"n">logger</span>

<span class=3D"k">def</span> <span class=3D"nf">log_to_console</span><span =
class=3D"p">(</span><span class=3D"n">arg</span><span class=3D"p">):</span>
   <span class=3D"n">logger</span><span class=3D"o">.</span><span class=3D"=
n">console</span><span class=3D"p">(</span><span class=3D"s1">'Got arg </sp=
an><span class=3D"si">%s</span><span class=3D"s1">'</span> <span class=3D"o=
">%</span> <span class=3D"n">arg</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">log_to_console_and_log_file=
</span><span class=3D"p">(</span><span class=3D"n">arg</span><span class=3D=
"p">):</span>
   <span class=3D"n">logger</span><span class=3D"o">.</span><span class=3D"=
n">info</span><span class=3D"p">(</span><span class=3D"s1">'Got arg </span>=
<span class=3D"si">%s</span><span class=3D"s1">'</span> <span class=3D"o">%=
</span> <span class=3D"n">arg</span><span class=3D"p">,</span> <span class=
=3D"n">also_console</span><span class=3D"o">=3D</span><span class=3D"bp">Tr=
ue</span><span class=3D"p">)</span>
</pre></div>
</div>
<div class=3D"section" id=3D"logging-example">
<h5>Logging example</h5>
<p>In most cases, the <code>INFO</code> level is adequate. The levels below=
 it,
<code>DEBUG</code> and <code>TRACE</code>, are useful for writing debug inf=
ormation.
These messages are normally not shown, but they can facilitate debugging
possible problems in the library itself. The <code>WARN</code> or <code>ERR=
OR</code> level can
be used to make messages more visible and <code>HTML</code> is useful if an=
y
kind of formatting is needed.</p>
<p>The following examples clarify how logging with different levels
works. Java programmers should regard the code <code>print('message')</code=
>
as pseudocode meaning <code>System.out.println("message");</code>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">print</span><s=
pan class=3D"p">(</span><span class=3D"s1">'Hello from a library.'</span><s=
pan class=3D"p">)</span>
<span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"s1">=
'*WARN* Warning from a library.'</span><span class=3D"p">)</span>
<span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"s1">=
'*ERROR* Something unexpected happen that may indicate a problem in the tes=
t.'</span><span class=3D"p">)</span>
<span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"s1">=
'*INFO* Hello again!'</span><span class=3D"p">)</span>
<span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"s1">=
'This will be part of the previous message.'</span><span class=3D"p">)</spa=
n>
<span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"s1">=
'*INFO* This is a new message.'</span><span class=3D"p">)</span>
<span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"s1">=
'*INFO* This is &lt;b&gt;normal text&lt;/b&gt;.'</span><span class=3D"p">)<=
/span>
<span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"s1">=
'*HTML* This is &lt;b&gt;bold&lt;/b&gt;.'</span><span class=3D"p">)</span>
<span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"s1">=
'*HTML* &lt;a href=3D"http://robotframework.org"&gt;Robot Framework&lt;/a&g=
t;'</span><span class=3D"p">)</span>
</pre></div>
<table class=3D"messages">
  <tbody><tr>
    <td class=3D"time">16:18:42.123</td>
    <td class=3D"info level">INFO</td>
    <td class=3D"msg">Hello from a library.</td>
  </tr>
  <tr>
    <td class=3D"time">16:18:42.123</td>
    <td class=3D"warn level">WARN</td>
    <td class=3D"msg">Warning from a library.</td>
  </tr>
  <tr>
    <td class=3D"time">16:18:42.123</td>
    <td class=3D"error level">ERROR</td>
    <td class=3D"msg">Something unexpected happen that may indicate a probl=
em in the test.</td>
  </tr>
  <tr>
    <td class=3D"time">16:18:42.123</td>
    <td class=3D"info level">INFO</td>
    <td class=3D"msg">Hello again!<br>This will be part of the previous mes=
sage.</td>
  </tr>
  <tr>
    <td class=3D"time">16:18:42.123</td>
    <td class=3D"info level">INFO</td>
    <td class=3D"msg">This is a new message.</td>
  </tr>
  <tr>
    <td class=3D"time">16:18:42.123</td>
    <td class=3D"info level">INFO</td>
    <td class=3D"msg">This is &lt;b&gt;normal text&lt;/b&gt;.</td>
  </tr>
  <tr>
    <td class=3D"time">16:18:42.123</td>
    <td class=3D"info level">INFO</td>
    <td class=3D"msg">This is <b>bold</b>.</td>
  </tr>
  <tr>
    <td class=3D"time">16:18:42.123</td>
    <td class=3D"info level">INFO</td>
    <td class=3D"msg"><a href=3D"http://robotframework.org/">Robot Framewor=
k</a></td>
  </tr>
</tbody></table></div>
</div>
<div class=3D"section" id=3D"programmatic-logging-apis">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id801">Programmatic logging APIs</a>=
</h4>
<p>Programmatic APIs provide somewhat cleaner way to log information than
using the standard output and error streams. Currently these
interfaces are available only to Python bases test libraries.</p>
<div class=3D"section" id=3D"public-logging-api">
<h5>Public logging API</h5>
<p>Robot Framework has a Python based logging API for writing
messages to the log file and to the console. Test libraries can use
this API like <code>logger.info('My message')</code> instead of logging
through the standard output like <code>print('*INFO* My message')</code>. I=
n
addition to a programmatic interface being a lot cleaner to use, this
API has a benefit that the log messages have accurate <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#timestamps">timestamps</a>.</p>
<p>The public logging API <a class=3D"reference external" href=3D"https://r=
obot-framework.readthedocs.org/en/latest/autodoc/robot.api.html#module-robo=
t.api.logger">is thoroughly documented</a> as part of the API
documentation at <a class=3D"reference external" href=3D"https://robot-fram=
ework.readthedocs.org/">https://robot-framework.readthedocs.org</a>. Below =
is
a simple usage example:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">robot.api</span> <span class=3D"kn">import</span> <span c=
lass=3D"n">logger</span>

<span class=3D"k">def</span> <span class=3D"nf">my_keyword</span><span clas=
s=3D"p">(</span><span class=3D"n">arg</span><span class=3D"p">):</span>
    <span class=3D"n">logger</span><span class=3D"o">.</span><span class=3D=
"n">debug</span><span class=3D"p">(</span><span class=3D"s1">'Got argument =
</span><span class=3D"si">%s</span><span class=3D"s1">'</span> <span class=
=3D"o">%</span> <span class=3D"n">arg</span><span class=3D"p">)</span>
    <span class=3D"n">do_something</span><span class=3D"p">()</span>
    <span class=3D"n">logger</span><span class=3D"o">.</span><span class=3D=
"n">info</span><span class=3D"p">(</span><span class=3D"s1">'&lt;i&gt;This&=
lt;/i&gt; is a boring example'</span><span class=3D"p">,</span> <span class=
=3D"n">html</span><span class=3D"o">=3D</span><span class=3D"bp">True</span=
><span class=3D"p">)</span>
    <span class=3D"n">logger</span><span class=3D"o">.</span><span class=3D=
"n">console</span><span class=3D"p">(</span><span class=3D"s1">'Hello, cons=
ole!'</span><span class=3D"p">)</span>
</pre></div>
<p>An obvious limitation is that test libraries using this logging API have
a dependency to Robot Framework. If Robot Framework is not running,
the messages are redirected automatically to Python's standard <a class=3D"=
reference external" href=3D"http://docs.python.org/library/logging.html">lo=
gging</a>
module.</p>
</div>
<div class=3D"section" id=3D"using-python-s-standard-logging-module">
<h5>Using Python's standard <code>logging</code> module</h5>
<p>In addition to the new <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#public-=
logging-api">public logging API</a>, Robot Framework offers a
built-in support to Python's standard <a class=3D"reference external" href=
=3D"http://docs.python.org/library/logging.html">logging</a> module. This
works so that all messages that are received by the root logger of the
module are automatically propagated to Robot Framework's log
file. Also this API produces log messages with accurate <a class=3D"referen=
ce internal" href=3D"http://robotframework.org/robotframework/latest/RobotF=
rameworkUserGuide.html#timestamps">timestamps</a>,
but logging HTML messages or writing messages to the console are not
supported. A big benefit, illustrated also by the simple example
below, is that using this logging API creates no dependency to Robot
Framework.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">logging</span>

<span class=3D"k">def</span> <span class=3D"nf">my_keyword</span><span clas=
s=3D"p">(</span><span class=3D"n">arg</span><span class=3D"p">):</span>
    <span class=3D"n">logging</span><span class=3D"o">.</span><span class=
=3D"n">debug</span><span class=3D"p">(</span><span class=3D"s1">'Got argume=
nt </span><span class=3D"si">%s</span><span class=3D"s1">'</span> <span cla=
ss=3D"o">%</span> <span class=3D"n">arg</span><span class=3D"p">)</span>
    <span class=3D"n">do_something</span><span class=3D"p">()</span>
    <span class=3D"n">logging</span><span class=3D"o">.</span><span class=
=3D"n">info</span><span class=3D"p">(</span><span class=3D"s1">'This is a b=
oring example'</span><span class=3D"p">)</span>
</pre></div>
<p>The <code>logging</code> module has slightly different log levels than
Robot Framework. Its levels <code>DEBUG</code>, <code>INFO</code>, <code>WA=
RNING</code> and <code>ERROR</code> are mapped
directly to the matching Robot Framework log levels, and <code>CRITICAL</co=
de>
is mapped to <code>ERROR</code>. Custom log levels are mapped to the closes=
t
standard level smaller than the custom level. For example, a level
between <code>INFO</code> and <code>WARNING</code> is mapped to Robot Frame=
work's <code>INFO</code> level.</p>
</div>
</div>
<div class=3D"section" id=3D"logging-during-library-initialization">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id802">Logging during library initia=
lization</a></h4>
<p>Libraries can also log during the test library import and initialization=
.
These messages do not appear in the <a class=3D"reference internal" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#log-file">log file</a> like the normal log messages,
but are instead written to the <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#sy=
stem-log">syslog</a>. This allows logging any kind of
useful debug information about the library initialization. Messages logged
using the <code>WARN</code> or <code>ERROR</code> levels are also visible i=
n the <a class=3D"reference internal" href=3D"http://robotframework.org/rob=
otframework/latest/RobotFrameworkUserGuide.html#errors-and-warnings-during-=
execution">test execution errors</a>
section in the log file.</p>
<p>Logging during the import and initialization is possible both using the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#logging-information">standard out=
put and error streams</a> and the <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#programmatic-logging-apis">programmatic logging APIs</a>.
Both of these are demonstrated below.</p>
<p>Java library logging via stdout during initialization:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">class</span> <span class=3D"nc">LoggingDuringInitializa=
tion</span> <span class=3D"o">{</span>

    <span class=3D"kd">public</span> <span class=3D"nf">LoggingDuringInitia=
lization</span><span class=3D"o">()</span> <span class=3D"o">{</span>
        <span class=3D"n">System</span><span class=3D"o">.</span><span clas=
s=3D"na">out</span><span class=3D"o">.</span><span class=3D"na">println</sp=
an><span class=3D"o">(</span><span class=3D"s">"*INFO* Initializing library=
"</span><span class=3D"o">);</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">keyword</span><span class=3D"o">()</span> <span class=3D"o">{</=
span>
        <span class=3D"c1">// ...</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
<p>Python library logging using the logging API during import:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">robot.api</span> <span class=3D"kn">import</span> <span c=
lass=3D"n">logger</span>

<span class=3D"n">logger</span><span class=3D"o">.</span><span class=3D"n">=
debug</span><span class=3D"p">(</span><span class=3D"s2">"Importing library=
"</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">keyword</span><span class=
=3D"p">():</span>
    <span class=3D"c1"># ...</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If you log something during initialization, i.e. in Pytho=
n
<code>__init__</code> or in Java constructor, the messages may be
logged multiple times depending on the <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#test-library-scope">test library scope</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"returning-values">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id803">Returning values</a></h4>
<p>The final way for keywords to communicate back to the core framework
is returning information retrieved from the system under test or
generated by some other means. The returned values can be <a class=3D"refer=
ence internal" href=3D"http://robotframework.org/robotframework/latest/Robo=
tFrameworkUserGuide.html#return-values-from-keywords">assigned to
variables</a> in the test data and then used as inputs for other keywords,
even from different test libraries.</p>
<p>Values are returned using the <code>return</code> statement both from
the Python and Java methods. Normally, one value is assigned into one
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#scalar-variables">scalar variable=
</a>, as illustrated in the example below. This example
also illustrates that it is possible to return any objects and to use
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#extended-variable-syntax">extende=
d variable syntax</a> to access object attributes.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">mymodule</span> <span class=3D"kn">import</span> <span cl=
ass=3D"n">MyObject</span>

<span class=3D"k">def</span> <span class=3D"nf">return_string</span><span c=
lass=3D"p">():</span>
    <span class=3D"k">return</span> <span class=3D"s2">"Hello, world!"</spa=
n>

<span class=3D"k">def</span> <span class=3D"nf">return_object</span><span c=
lass=3D"p">(</span><span class=3D"n">name</span><span class=3D"p">):</span>
    <span class=3D"k">return</span> <span class=3D"n">MyObject</span><span =
class=3D"p">(</span><span class=3D"n">name</span><span class=3D"p">)</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Returning one value</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">string</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Return String</span><span class=
=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">string</span><span class=3D"p"=
>}    </span><span class=3D"s">Hello, world!</span><span class=3D"p"></span=
>
<span class=3D"p">    ${</span><span class=3D"nv">object</span><span class=
=3D"p">} =3D    </span><span class=3D"nf">Return Object</span><span class=
=3D"p">    </span><span class=3D"s">Robot</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">object.name</span><span class=
=3D"p">}    </span><span class=3D"s">Robot</span><span class=3D"p"></span>
</pre></div>
<p>Keywords can also return values so that they can be assigned into
several <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#scalar-variables">scalar =
variables</a> at once, into <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#list-=
variables">a list variable</a>, or
into scalar variables and a list variable. All these usages require
that returned values are Python lists or tuples or
in Java arrays, Lists, or Iterators.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">return_two_values</span><span class=3D"p">():</span>
    <span class=3D"k">return</span> <span class=3D"s1">'first value'</span>=
<span class=3D"p">,</span> <span class=3D"s1">'second value'</span>

<span class=3D"k">def</span> <span class=3D"nf">return_multiple_values</spa=
n><span class=3D"p">():</span>
    <span class=3D"k">return</span> <span class=3D"p">[</span><span class=
=3D"s1">'a'</span><span class=3D"p">,</span> <span class=3D"s1">'list'</spa=
n><span class=3D"p">,</span> <span class=3D"s1">'of'</span><span class=3D"p=
">,</span> <span class=3D"s1">'strings'</span><span class=3D"p">]</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu">Returning multiple values</span><span class=3D"p"></span=
>
<span class=3D"p">    ${</span><span class=3D"nv">var1</span><span class=3D=
"p">}    ${</span><span class=3D"nv">var2</span><span class=3D"p">} =3D    =
</span><span class=3D"nf">Return Two Values</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">var1</span><span class=3D"p">}=
    </span><span class=3D"s">first value</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">var2</span><span class=3D"p">}=
    </span><span class=3D"s">second value</span><span class=3D"p"></span>
<span class=3D"p">    @{</span><span class=3D"nv">list</span><span class=3D=
"p">} =3D    </span><span class=3D"nf">Return Two Values</span><span class=
=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    @{</span><span class=3D"nv">list</span><span class=3D"p">}=
[</span><span class=3D"nv">0</span><span class=3D"p">]    </span><span clas=
s=3D"s">first value</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    @{</span><span class=3D"nv">list</span><span class=3D"p">}=
[</span><span class=3D"nv">1</span><span class=3D"p">]    </span><span clas=
s=3D"s">second value</span><span class=3D"p"></span>
<span class=3D"p">    ${</span><span class=3D"nv">s1</span><span class=3D"p=
">}    ${</span><span class=3D"nv">s2</span><span class=3D"p">}    @{</span=
><span class=3D"nv">li</span><span class=3D"p">} =3D    </span><span class=
=3D"nf">Return Multiple Values</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">s1</span><span class=3D"p">}</=
span><span class=3D"s"> </span><span class=3D"p">${</span><span class=3D"nv=
">s2</span><span class=3D"p">}    </span><span class=3D"s">a list</span><sp=
an class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    @{</span><span class=3D"nv">li</span><span class=3D"p">}[<=
/span><span class=3D"nv">0</span><span class=3D"p">]</span><span class=3D"s=
"> </span><span class=3D"p">@{</span><span class=3D"nv">li</span><span clas=
s=3D"p">}[</span><span class=3D"nv">1</span><span class=3D"p">]    </span><=
span class=3D"s">of strings</span><span class=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"communication-when-using-threads">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id804">Communication when using thre=
ads</a></h4>
<p>If a library uses threads, it should generally communicate with the
framework only from the main thread. If a worker thread has, for
example, a failure to report or something to log, it should pass the
information first to the main thread, which can then use exceptions or
other mechanisms explained in this section for communication with the
framework.</p>
<p>This is especially important when threads are run on background while
other keywords are running. Results of communicating with the
framework in that case are undefined and can in the worst case cause a
crash or a corrupted output file. If a keyword starts something on
background, there should be another keyword that checks the status of
the worker thread and reports gathered information accordingly.</p>
<p>Messages logged by non-main threads using the normal logging methods fro=
m
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#programmatic-logging-apis">progra=
mmatic logging APIs</a>  are silently ignored.</p>
<p>There is also a <code>BackgroundLogger</code> in separate <a class=3D"re=
ference external" href=3D"https://github.com/robotframework/robotbackground=
logger">robotbackgroundlogger</a> project,
with a similar API as the standard <code>robot.api.logger</code>. Normal lo=
gging
methods will ignore messages from other than main thread, but the
<code>BackgroundLogger</code> will save the background messages so that the=
y can be later
logged to Robot's log.</p>
</div>
</div>
<div class=3D"section" id=3D"distributing-test-libraries">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id805">4.1.5&nbsp;&nbsp;&nbsp;Distri=
buting test libraries</a></h3>
<div class=3D"section" id=3D"documenting-libraries">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id806">Documenting libraries</a></h4=
>
<p>A test library without documentation about what keywords it
contains and what those keywords do is rather useless. To ease
maintenance, it is highly recommended that library documentation is
included in the source code and generated from it. Basically, that
means using <a class=3D"reference external" href=3D"http://www.python.org/d=
ev/peps/pep-0257">docstrings</a> with Python and <a class=3D"reference exte=
rnal" href=3D"http://java.sun.com/j2se/javadoc/writingdoccomments/index.htm=
l">Javadoc</a> with Java, as in
the examples below.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">MyLibrary</span><span class=3D"p">:</span>
    <span class=3D"sd">"""This is an example library with some documentatio=
n."""</span>

    <span class=3D"k">def</span> <span class=3D"nf">keyword_with_short_docu=
mentation</span><span class=3D"p">(</span><span class=3D"bp">self</span><sp=
an class=3D"p">,</span> <span class=3D"n">argument</span><span class=3D"p">=
):</span>
        <span class=3D"sd">"""This keyword has only a short documentation""=
"</span>
        <span class=3D"k">pass</span>

    <span class=3D"k">def</span> <span class=3D"nf">keyword_with_longer_doc=
umentation</span><span class=3D"p">(</span><span class=3D"bp">self</span><s=
pan class=3D"p">):</span>
        <span class=3D"sd">"""First line of the documentation is here.</spa=
n>

<span class=3D"sd">        Longer documentation continues here and it can c=
ontain</span>
<span class=3D"sd">        multiple lines or paragraphs.</span>
<span class=3D"sd">        """</span>
        <span class=3D"k">pass</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"cm">/**</span>
<span class=3D"cm"> *  This is an example library with some documentation.<=
/span>
<span class=3D"cm"> */</span>
<span class=3D"kd">public</span> <span class=3D"kd">class</span> <span clas=
s=3D"nc">MyLibrary</span> <span class=3D"o">{</span>

    <span class=3D"cm">/**</span>
<span class=3D"cm">     * This keyword has only a short documentation</span=
>
<span class=3D"cm">     */</span>
    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">keywordWithShortDocumentation</span><span class=3D"o">(</span><=
span class=3D"n">String</span> <span class=3D"n">argument</span><span class=
=3D"o">)</span> <span class=3D"o">{</span>
    <span class=3D"o">}</span>

    <span class=3D"cm">/**</span>
<span class=3D"cm">     * First line of the documentation is here.</span>
<span class=3D"cm">     *</span>
<span class=3D"cm">     * Longer documentation continues here and it can co=
ntain</span>
<span class=3D"cm">     * multiple lines or paragraphs.</span>
<span class=3D"cm">     */</span>
    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">keywordWithLongerDocumentation</span><span class=3D"o">()</span=
> <span class=3D"o">{</span>
    <span class=3D"o">}</span>

<span class=3D"o">}</span>
</pre></div>
<p>Both Python and Java have tools for creating an API documentation of a
library documented as above. However, outputs from these tools can be sligh=
tly
technical for some users. Another alternative is using Robot
Framework's own documentation tool <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#libdoc">Libdoc</a>. This tool can
create a library documentation from both Python and Java libraries
using the static library API, such as the ones above, but it also handles
libraries using the <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#dynamic-libra=
ry-api">dynamic library API</a> and <a class=3D"reference internal" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#hybrid-library-api">hybrid library API</a>.</p>
<p>The first logical line of a keyword documentation, until the first empty=
 line,
is used for a special purpose and should contain a short overall descriptio=
n
of the keyword. It is used as a <em>short documentation</em> by <a class=3D=
"reference internal" href=3D"http://robotframework.org/robotframework/lates=
t/RobotFrameworkUserGuide.html#libdoc">Libdoc</a> (for example,
as a tool tip) and also shown in the <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#log-file">test logs</a>. The latter does not work
with Java libraries using the static API, though, because their documentati=
on
is not available at runtime.</p>
<p>By default documentation is considered to follow Robot Framework's
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#documentation-formatting">documen=
tation formatting</a> rules. This simple format allows often used
styles like <code>*bold*</code> and <code>_italic_</code>, tables, lists, l=
inks, etc.
It is possible to use also HTML, plain
text and <a class=3D"reference external" href=3D"http://docutils.sourceforg=
e.net/rst.html">reStructuredText</a> formats. See <a class=3D"reference int=
ernal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewo=
rkUserGuide.html#specifying-documentation-format">Specifying documentation =
format</a>
section for information how to set the format in the library source code an=
d
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#libdoc">Libdoc</a> chapter for mo=
re information about the formats in general.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, the short documentation con=
tained
only the first physical line of the keyword documentation.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If you want to use non-ASCII characters in the documentat=
ion of
Python libraries, you must either use UTF-8 as your <a class=3D"reference e=
xternal" href=3D"http://www.python.org/dev/peps/pep-0263">source code
encoding</a> or create docstrings as Unicode. When using Python 3,
UTF-8 is the default source encoding.</p>
</div>
</div>
<div class=3D"section" id=3D"testing-libraries">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id807">Testing libraries</a></h4>
<p>Any non-trivial test library needs to be thoroughly tested to prevent
bugs in them. Of course, this testing should be automated to make it
easy to rerun tests when libraries are changed.</p>
<p>Both Python and Java have excellent unit testing tools, and they suite
very well for testing libraries. There are no major differences in
using them for this purpose compared to using them for some other
testing. The developers familiar with these tools do not need to learn
anything new, and the developers not familiar with them should learn
them anyway.</p>
<p>It is also easy to use Robot Framework itself for testing libraries
and that way have actual end-to-end acceptance tests for them. There are
plenty of useful keywords in the <a class=3D"reference external" href=3D"ht=
tp://robotframework.org/robotframework/latest/libraries/BuiltIn.html">Built=
In</a> library for this
purpose. One worth mentioning specifically is <span class=3D"name">Run Keyw=
ord And Expect
Error</span>, which is useful for testing that keywords report errors
correctly.</p>
<p>Whether to use a unit- or acceptance-level testing approach depends on
the context. If there is a need to simulate the actual system under
test, it is often easier on the unit level. On the other hand,
acceptance tests ensure that keywords do work through Robot
Framework. If you cannot decide, of course it is possible to use both
the approaches.</p>
</div>
<div class=3D"section" id=3D"packaging-libraries">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id808">Packaging libraries</a></h4>
<p>After a library is implemented, documented, and tested, it still needs
to be distributed to the users. With simple libraries consisting of a
single file, it is often enough to ask the users to copy that file
somewhere and set the <a class=3D"reference internal" href=3D"http://robotf=
ramework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-sear=
ch-path">module search path</a> accordingly. More
complicated libraries should be packaged to make the installation
easier.</p>
<p>Since libraries are normal programming code, they can be packaged
using normal packaging tools. For information about packaging and
distributing Python code see <a class=3D"reference external" href=3D"https:=
//packaging.python.org/">https://packaging.python.org/</a>. When such
a package is installed using <a class=3D"reference external" href=3D"http:/=
/pip-installer.org/">pip</a> or other tools, it is automatically
in the <a class=3D"reference internal" href=3D"http://robotframework.org/ro=
botframework/latest/RobotFrameworkUserGuide.html#module-search-path">module=
 search path</a>.</p>
<p>When using Java, it is natural to package libraries into a JAR
archive. The JAR package must be put into the <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#module-search-path">module search path</a>
before running tests, but it is easy to create a <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#start-up-script">start-up script</a> that
does that automatically.</p>
</div>
<div class=3D"section" id=3D"deprecating-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id809">Deprecating keywords</a></h4>
<p>Sometimes there is a need to replace existing keywords with new ones
or remove them altogether. Just informing the users about the change
may not always be enough, and it is more efficient to get warnings at
runtime. To support that, Robot Framework has a capability to mark
keywords <em>deprecated</em>. This makes it easier to find old keywords fro=
m
the test data and remove or replace them.</p>
<p>Keywords can be deprecated by starting their documentation with text
<code>*DEPRECATED</code>, case-sensitive, and having a closing <code>*</cod=
e> also on the first
line of the documentation. For example, <code>*DEPRECATED*</code>, <code>*D=
EPRECATED.*</code>, and
<code>*DEPRECATED in version 1.5.*</code> are all valid markers.</p>
<p>When a deprecated keyword is executed, a deprecation warning is logged a=
nd
the warning is shown also in <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#erro=
rs-and-warnings-during-execution">the console and the Test Execution Errors
section in log files</a>. The deprecation warning starts with text <code>Ke=
yword
'&lt;name&gt;' is deprecated.</code> and has rest of the <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#documenting-libraries">short documentation</a> afte=
r
the deprecation marker, if any, afterwards. For example, if the following
keyword is executed, there will be a warning like shown below in the log fi=
le.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">example_keyword</span><span class=3D"p">(</span><span class=
=3D"n">argument</span><span class=3D"p">):</span>
    <span class=3D"sd">"""*DEPRECATED!!* Use keyword `Other Keyword` instea=
d.</span>

<span class=3D"sd">    This keyword does something to given ``argument`` an=
d returns results.</span>
<span class=3D"sd">    """</span>
    <span class=3D"k">return</span> <span class=3D"n">do_something</span><s=
pan class=3D"p">(</span><span class=3D"n">argument</span><span class=3D"p">=
)</span>
</pre></div>
<table class=3D"messages">
  <tbody><tr>
    <td class=3D"time">20080911&nbsp;16:00:22.650</td>
    <td class=3D"warn level">WARN</td>
    <td class=3D"msg">Keyword 'SomeLibrary.Example Keyword' is deprecated. =
Use keyword `Other Keyword` instead.</td>
  </tr>
</tbody></table><p>This deprecation system works with most test libraries a=
nd also with
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#user-keyword-name-and-documentati=
on">user keywords</a>.  The only exception are keywords implemented in a
Java test library that uses the <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#c=
reating-static-keywords">static library interface</a> because
their documentation is not available at runtime. With such keywords,
it possible to use user keywords as wrappers and deprecate them.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 2.9 the documentation must start=
 with
<code>*DEPRECATED*</code> exactly without any extra content before the
closing <code>*</code>.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"dynamic-library-api">
<span id=3D"dynamic-library"></span><h3><a class=3D"toc-backref" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
id810">4.1.6&nbsp;&nbsp;&nbsp;Dynamic library API</a></h3>
<p>The dynamic API is in most ways similar to the static API. For
example, reporting the keyword status, logging, and returning values
works exactly the same way. Most importantly, there are no differences
in importing dynamic libraries and using their keywords compared to
other libraries. In other words, users do not need to know what APIs their
libraries use.</p>
<p>Only differences between static and dynamic libraries are
how Robot Framework discovers what keywords a library implements,
what arguments and documentation these keywords have, and how the
keywords are actually executed. With the static API, all this is
done using reflection (except for the documentation of Java libraries),
but dynamic libraries have special methods that are used for these
purposes.</p>
<p>One of the benefits of the dynamic API is that you have more flexibility
in organizing your library. With the static API, you must have all
keywords in one class or module, whereas with the dynamic API, you can,
for example, implement each keyword as a separate class. This use case is
not so important with Python, though, because its dynamic capabilities and
multi-inheritance already give plenty of flexibility, and there is also
possibility to use the <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#hybrid-lib=
rary-api">hybrid library API</a>.</p>
<p>Another major use case for the dynamic API is implementing a library
so that it works as proxy for an actual library possibly running on
some other process or even on another machine. This kind of a proxy
library can be very thin, and because keyword names and all other
information is got dynamically, there is no need to update the proxy
when new keywords are added to the actual library.</p>
<p>This section explains how the dynamic API works between Robot
Framework and dynamic libraries. It does not matter for Robot
Framework how these libraries are actually implemented (for example,
how calls to the <code>run_keyword</code> method are mapped to a correct
keyword implementation), and many different approaches are
possible. However, if you use Java, you may want to examine the
<a class=3D"reference external" href=3D"https://github.com/robotframework/J=
avalibCore">JavaLibCore</a> project before implementing your own system. Th=
is collection
of reusable tools supports several ways of creating keywords, and it is
likely that it already has a mechanism that suites your needs.
Python users may also find the similar <a class=3D"reference external" href=
=3D"https://github.com/robotframework/PythonLibCore">PythonLibCore</a> proj=
ect useful.</p>
<div class=3D"section" id=3D"getting-keyword-names">
<span id=3D"getting-dynamic-keyword-names"></span><h4><a class=3D"toc-backr=
ef" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#id811">Getting keyword names</a></h4>
<p>Dynamic libraries tell what keywords they implement with the
<code>get_keyword_names</code> method. The method also has the alias
<code>getKeywordNames</code> that is recommended when using Java. This
method cannot take any arguments, and it must return a list or array
of strings containing the names of the keywords that the library implements=
.</p>
<p>If the returned keyword names contain several words, they can be returne=
d
separated with spaces or underscores, or in the camelCase format. For
example, <code>['first keyword', 'second keyword']</code>,
<code>['first_keyword', 'second_keyword']</code>, and
<code>['firstKeyword', 'secondKeyword']</code> would all be mapped to keywo=
rds
<span class=3D"name">First Keyword</span> and <span class=3D"name">Second K=
eyword</span>.</p>
<p>Dynamic libraries must always have this method. If it is missing, or
if calling it fails for some reason, the library is considered a
static library.</p>
<div class=3D"section" id=3D"marking-methods-to-expose-as-keywords">
<h5>Marking methods to expose as keywords</h5>
<p>If a dynamic library should contain both methods which are meant to be k=
eywords
and methods which are meant to be private helper methods, it may be wise to
mark the keyword methods as such so it is easier to implement <code>get_key=
word_names</code>.
The <code>robot.api.deco.keyword</code> decorator allows an easy way to do =
this since it
creates a custom <code>robot_name</code> attribute on the decorated method.
This allows generating the list of keywords just by checking for the <code>=
robot_name</code>
attribute on every method in the library during <code>get_keyword_names</co=
de>.  See
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#using-a-custom-keyword-name">Usin=
g a custom keyword name</a> for more about this decorator.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">robot.api.deco</span> <span class=3D"kn">import</span> <s=
pan class=3D"n">keyword</span>

<span class=3D"k">class</span> <span class=3D"nc">DynamicExample</span><spa=
n class=3D"p">:</span>

    <span class=3D"k">def</span> <span class=3D"nf">get_keyword_names</span=
><span class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">=
):</span>
        <span class=3D"k">return</span> <span class=3D"p">[</span><span cla=
ss=3D"n">name</span> <span class=3D"k">for</span> <span class=3D"n">name</s=
pan> <span class=3D"ow">in</span> <span class=3D"nb">dir</span><span class=
=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">)</span> <sp=
an class=3D"k">if</span> <span class=3D"nb">hasattr</span><span class=3D"p"=
>(</span><span class=3D"nb">getattr</span><span class=3D"p">(</span><span c=
lass=3D"bp">self</span><span class=3D"p">,</span> <span class=3D"n">name</s=
pan><span class=3D"p">),</span> <span class=3D"s1">'robot_name'</span><span=
 class=3D"p">)]</span>

    <span class=3D"k">def</span> <span class=3D"nf">helper_method</span><sp=
an class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</=
span>
        <span class=3D"c1"># ...</span>

    <span class=3D"nd">@keyword</span>
    <span class=3D"k">def</span> <span class=3D"nf">keyword_method</span><s=
pan class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):<=
/span>
        <span class=3D"c1"># ...</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"running-keywords">
<span id=3D"running-dynamic-keywords"></span><h4><a class=3D"toc-backref" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#id812">Running keywords</a></h4>
<p>Dynamic libraries have a special <code>run_keyword</code> (alias <code>r=
unKeyword</code>)
method for executing their keywords. When a keyword from a dynamic
library is used in the test data, Robot Framework uses the <code>run_keywor=
d</code>
method to get it executed. This method takes two or three arguments.
The first argument is a string containing the name of the keyword to be
executed in the same format as returned by <code>get_keyword_names</code>. =
The second
argument is a list of <a class=3D"reference internal" href=3D"http://robotf=
ramework.org/robotframework/latest/RobotFrameworkUserGuide.html#positional-=
arguments">positional arguments</a> given to the keyword in
the test data, and the optional third argument is a dictionary (map in Java=
)
containing <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#named-arguments">named=
 arguments</a>. If the third argument is missing, <a class=3D"reference int=
ernal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewo=
rkUserGuide.html#free-named-arguments-with-dynamic-libraries">free named
arguments</a> and <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#named-only-argu=
ments-with-dynamic-libraries">named-only arguments</a> are not supported, a=
nd other
named arguments are mapped to positional arguments.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, normal named arguments were
mapped to positional arguments regardless did <code>run_keyword</code>
accept two or three arguments. The third argument only got
possible free named arguments.</p>
</div>
<p>After getting keyword name and arguments, the library can execute
the keyword freely, but it must use the same mechanism to
communicate with the framework as static libraries. This means using
exceptions for reporting keyword status, logging by writing to
the standard output or by using the provided logging APIs, and using
the return statement in <code>run_keyword</code> for returning something.</=
p>
<p>Every dynamic library must have both the <code>get_keyword_names</code> =
and
<code>run_keyword</code> methods but rest of the methods in the dynamic
API are optional. The example below shows a working, albeit
trivial, dynamic library implemented in Python.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">DynamicExample</span><span class=3D"p">:</span>

    <span class=3D"k">def</span> <span class=3D"nf">get_keyword_names</span=
><span class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">=
):</span>
        <span class=3D"k">return</span> <span class=3D"p">[</span><span cla=
ss=3D"s1">'first keyword'</span><span class=3D"p">,</span> <span class=3D"s=
1">'second keyword'</span><span class=3D"p">]</span>

    <span class=3D"k">def</span> <span class=3D"nf">run_keyword</span><span=
 class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</spa=
n> <span class=3D"n">name</span><span class=3D"p">,</span> <span class=3D"n=
">args</span><span class=3D"p">,</span> <span class=3D"n">kwargs</span><spa=
n class=3D"p">):</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s2">"Running keyword '</span><span class=3D"si">%s</span><span class=3D=
"s2">' with positional arguments </span><span class=3D"si">%s</span><span c=
lass=3D"s2"> and named arguments </span><span class=3D"si">%s</span><span c=
lass=3D"s2">."</span>
              <span class=3D"o">%</span> <span class=3D"p">(</span><span cl=
ass=3D"n">name</span><span class=3D"p">,</span> <span class=3D"n">args</spa=
n><span class=3D"p">,</span> <span class=3D"n">kwargs</span><span class=3D"=
p">))</span>
</pre></div>
</div>
<div class=3D"section" id=3D"getting-keyword-arguments">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id813">Getting keyword arguments</a>=
</h4>
<p>If a dynamic library only implements the <code>get_keyword_names</code> =
and
<code>run_keyword</code> methods, Robot Framework does not have any informa=
tion
about the arguments that the implemented keywords accept. For example,
both <span class=3D"name">First Keyword</span> and <span class=3D"name">Sec=
ond Keyword</span> in the example above
could be used with any arguments. This is problematic,
because most real keywords expect a certain number of keywords, and
under these circumstances they would need to check the argument counts
themselves.</p>
<p>Dynamic libraries can communicate what arguments their keywords expect
by using the <code>get_keyword_arguments</code> (alias <code>getKeywordArgu=
ments</code>) method.
This method gets the name of a keyword as an argument, and it must return
a list of strings containing the arguments accepted by that keyword.</p>
<p>Similarly as other keywords, dynamic keywords can require any number
of <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#positional-arguments">position=
al arguments</a>, have <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#default-va=
lues">default values</a>, accept <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
variable-number-of-arguments">variable number of
arguments</a>, accept <a class=3D"reference internal" href=3D"http://robotf=
ramework.org/robotframework/latest/RobotFrameworkUserGuide.html#free-named-=
arguments">free named arguments</a> and have <a class=3D"reference internal=
" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUse=
rGuide.html#named-only-arguments">named-only arguments</a>.
The syntax how to represent all these different variables is derived from h=
ow
they are specified in Python and explained in the following table. Note tha=
t
the examples use Python syntax for lists, but Java developers should use
Java lists or String arrays instead.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Representing different arguments with <code>get_keyword_arguments<=
/code></caption>
<colgroup>
<col width=3D"26%">
<col width=3D"37%">
<col width=3D"37%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Expected
arguments</th>
<th class=3D"head">How to represent</th>
<th class=3D"head">Examples</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>No arguments</td>
<td>Empty list.</td>
<td><code>[]</code></td>
</tr>
<tr><td>One or more
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#positional-argument">positional
argument</a></td>
<td>List of strings containing
argument names.</td>
<td><code>['argument']</code>,
<code>['arg1', 'arg2', 'arg3']</code></td>
</tr>
<tr><td><a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#default-values">Default v=
alues</a>
for arguments</td>
<td>Default values separated
from argument names with
<code>=3D</code>. Default values are
always considered to be
strings.</td>
<td><code>['arg=3Ddefault value']</code>,
<code>['a', 'b=3D1', 'c=3D2']</code></td>
</tr>
<tr><td><a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#variable-number-of-argume=
nts">Variable number
of arguments</a>
(varargs)
(varargs)</td>
<td>Argument after possible
positional arguments and
their defaults has <code>*</code>
prefix.</td>
<td><code>['*varargs']</code>,
<code>['argument', '*rest']</code>,
<code>['a', 'b=3D42', '*c']</code></td>
</tr>
<tr><td><a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#free-named-arguments">Fre=
e named
arguments</a>
(kwargs)</td>
<td>Last arguments has <code>**</code>
prefix. Requires
<code>run_keyword</code> to <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#free-=
named-arguments-with-dynamic-libraries">support
free named arguments</a>.</td>
<td><code>['**named']</code>,
<code>['a', 'b=3D42', '**c']</code>,
<code>['*varargs', '**kwargs']</code></td>
</tr>
<tr><td><a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#named-only-arguments">Nam=
ed-only
arguments</a></td>
<td>Arguments after varargs or
a lone <code>*</code> if there are no
varargs. With or without
defaults. Requires
<code>run_keyword</code> to <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#named=
-only-arguments-with-dynamic-libraries">support
named-only arguments</a>.
New in Robot Framework 3.1.</td>
<td><code>['*varargs', 'named']</code>,
<code>['*', 'named'],
`['*', 'x', 'y=3Ddefault']</code>,
<code>['a', '*b', 'c', '**d']</code></td>
</tr>
</tbody>
</table>
<p>When the <code>get_keyword_arguments</code> is used, Robot Framework aut=
omatically
calculates how many positional arguments the keyword requires and does it
support free named arguments or not. If a keyword is used with invalid
arguments, an error occurs and <code>run_keyword</code> is not even called.=
</p>
<p>The actual argument names and default values that are returned are also
important. They are needed for <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#na=
med-argument-syntax-with-dynamic-libraries">named argument support</a> and =
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#libdoc">Libdoc</a>
tool needs them to be able to create a meaningful library documentation.</p=
>
<p>If <code>get_keyword_arguments</code> is missing or returns Python <code=
>None</code> or Java
<code>null</code> for a certain keyword, that keyword gets an argument spec=
ification
accepting all arguments. This automatic argument spec is either
<code>[*varargs, **kwargs]</code> or <code>[*varargs]</code>, depending doe=
s
<code>run_keyword</code> <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#free-nam=
ed-arguments-with-dynamic-libraries">support free named arguments</a> or no=
t.</p>
</div>
<div class=3D"section" id=3D"getting-keyword-argument-types">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id814">Getting keyword argument type=
s</a></h4>
<p>Robot Framework 3.1 introduced support for automatic argument conversion
and the dynamic library API supports that as well. The conversion logic
works exactly like with <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#argument-=
types">static libraries</a>, but how the type information
is specified is naturally different.</p>
<p>With dynamic libraries types can be returned using the optional
<code>get_keyword_types</code> method (alias <code>getKeywordTypes</code>).=
 It can return types
using a list or a dictionary exactly like types can be specified when using
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#specifying-argument-types-usi=
ng-keyword-decorator">@keyword decorator</a>. Type information can be speci=
fied using actual
types like <code>int</code>, but especially if a dynamic library gets this =
information
from external systems, using strings like <code>'int'</code> or <code>'inte=
ger'</code> may be
easier. See the <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#supported-convers=
ions">Supported conversions</a> section for more information about
supported types and how to specify them.</p>
</div>
<div class=3D"section" id=3D"getting-keyword-tags">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id815">Getting keyword tags</a></h4>
<p>Starting from Robot Framework 3.0.2, dynamic libraries can report <a cla=
ss=3D"reference internal" href=3D"http://robotframework.org/robotframework/=
latest/RobotFrameworkUserGuide.html#keyword-tags">keyword
tags</a> by using the <code>get_keyword_tags</code> method (alias <code>get=
KeywordTags</code>). It
gets a keyword name as an argument, and should return corresponding tags
as a list of strings.</p>
<p>Alternatively it is possible to specify tags on the last row of the
documentation returned by the <code>get_keyword_documentation</code> method=
 discussed
below. This requires starting the last row with <code>Tags:</code> and list=
ing tags
after it like <code>Tags: first tag, second, third</code>. This approach wo=
rks also
with Robot Framework versions prior to 3.0.2.</p>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p class=3D"last">The <code>get_keyword_tags</code> method is guaranteed to=
 be called before
the <code>get_keyword_documentation</code> method. This makes it easy to
embed tags into the documentation only if the <code>get_keyword_tags</code>
method is not called.</p>
</div>
</div>
<div class=3D"section" id=3D"getting-keyword-documentation">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id816">Getting keyword documentation=
</a></h4>
<p>If dynamic libraries want to provide keyword documentation, they can imp=
lement
the <code>get_keyword_documentation</code> method (alias <code>getKeywordDo=
cumentation</code>). It
takes a keyword name as an argument and, as the method name implies, return=
s
its documentation as a string.</p>
<p>The returned documentation is used similarly as the keyword
documentation string with static libraries implemented with
Python. The main use case is getting keywords' documentations into a
library documentation generated by <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#libdoc">Libdoc</a>. Additionally,
the first line of the documentation (until the first <code>\n</code>) is
shown in test logs.</p>
</div>
<div class=3D"section" id=3D"getting-general-library-documentation">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id817">Getting general library docum=
entation</a></h4>
<p>The <code>get_keyword_documentation</code> method can also be used for
specifying overall library documentation. This documentation is not
used when tests are executed, but it can make the documentation
generated by <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#libdoc">Libdoc</a> m=
uch better.</p>
<p>Dynamic libraries can provide both general library documentation and
documentation related to taking the library into use. The former is
got by calling <code>get_keyword_documentation</code> with special value
<code>__intro__</code>, and the latter is got using value
<code>__init__</code>. How the documentation is presented is best tested
with <a class=3D"reference internal" href=3D"http://robotframework.org/robo=
tframework/latest/RobotFrameworkUserGuide.html#libdoc">Libdoc</a> in practi=
ce.</p>
<p>Python based dynamic libraries can also specify the general library
documentation directly in the code as the docstring of the library
class and its <code>__init__</code> method. If a non-empty documentation is
got both directly from the code and from the
<code>get_keyword_documentation</code> method, the latter has precedence.</=
p>
</div>
<div class=3D"section" id=3D"named-argument-syntax-with-dynamic-libraries">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id818">Named argument syntax with dy=
namic libraries</a></h4>
<p>Also the dynamic library API supports
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#named-argument-syntax">named =
argument syntax</a>. Using the syntax works based on the
argument names and default values <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#getting-keyword-arguments">got from the library</a> using the
<code>get_keyword_arguments</code> method.</p>
<p>If the <code>run_keyword</code> method accepts three arguments, the seco=
nd argument
gets all positional arguments as a list and the last arguments gets all
named arguments as a mapping. If it accepts only two arguments, named
arguments are mapped to positional arguments. In the latter case, if
a keyword has multiple arguments with default values and only some of
the latter ones are given, the framework fills the skipped optional
arguments based on the default values returned by the <code>get_keyword_arg=
uments</code>
method.</p>
<p>Using the named argument syntax with dynamic libraries is illustrated
by the following examples. All the examples use a keyword <span class=3D"na=
me">Dynamic</span>
that has an argument specification <code>[a, b=3Dd1, c=3Dd2]</code>. The co=
mment on each row
shows how <code>run_keyword</code> would be called in these cases if it has=
 two arguments
(i.e. signature is <code>name, args</code>) and if it has three arguments (=
i.e.
<code>name, args, kwargs</code>).</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p">                  </span><span class=3D"c"># =
args          # args, kwargs</span>
<span class=3D"gu">Positional only</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x</span><span class=3D"p">             =
       </span><span class=3D"c"># [x]           # [x], {}</span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x</span><span class=3D"p">      </span>=
<span class=3D"s">y</span><span class=3D"p">             </span><span class=
=3D"c"># [x, y]        # [x, y], {}</span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x</span><span class=3D"p">      </span>=
<span class=3D"s">y</span><span class=3D"p">      </span><span class=3D"s">=
z</span><span class=3D"p">      </span><span class=3D"c"># [x, y, z]     # =
[x, y, z], {}</span>

<span class=3D"gu">Named only</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">a=3Dx</span><span class=3D"p">         =
         </span><span class=3D"c"># [x]           # [], {a: x}</span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">c=3Dz</span><span class=3D"p">    </spa=
n><span class=3D"s">a=3Dx</span><span class=3D"p">    </span><span class=3D=
"s">b=3Dy</span><span class=3D"p">    </span><span class=3D"c"># [x, y, z] =
    # [], {a: x, b: y, c: z}</span>

<span class=3D"gu">Positional and named</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x</span><span class=3D"p">      </span>=
<span class=3D"s">b=3Dy</span><span class=3D"p">           </span><span cla=
ss=3D"c"># [x, y]        # [x], {b: y}</span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x</span><span class=3D"p">      </span>=
<span class=3D"s">y</span><span class=3D"p">      </span><span class=3D"s">=
c=3Dz</span><span class=3D"p">    </span><span class=3D"c"># [x, y, z]     =
# [x, y], {c: z}</span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x</span><span class=3D"p">      </span>=
<span class=3D"s">b=3Dy</span><span class=3D"p">    </span><span class=3D"s=
">c=3Dz</span><span class=3D"p">    </span><span class=3D"c"># [x, y, z]   =
  # [x], {y: b, c: z}</span>

<span class=3D"gu">Intermediate missing</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x</span><span class=3D"p">      </span>=
<span class=3D"s">c=3Dz</span><span class=3D"p">           </span><span cla=
ss=3D"c"># [x, d1, z]    # [x], {c: z}</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, all normal named arguments =
were
mapped to positional arguments and the optional <code>kwargs</code> was
only used with free named arguments. With the above examples
<code>run_keyword</code> was always called like it is nowadays called if
it does not support <code>kwargs</code>.</p>
</div>
</div>
<div class=3D"section" id=3D"free-named-arguments-with-dynamic-libraries">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id819">Free named arguments with dyn=
amic libraries</a></h4>
<p>Dynamic libraries can also support
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#free-named-arguments">free named =
arguments</a> (<code>**named</code>). A mandatory precondition for
this support is that the <code>run_keyword</code> method <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#running-dynamic-keywords">takes three arguments</a>=
:
the third one will get the free named arguments along with possible other
named arguments. These arguments are passed to the keyword as a mapping.</p=
>
<p>What arguments a keyword accepts depends on what <code>get_keyword_argum=
ents</code>
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#getting-keyword-arguments">return=
s for it</a>. If the last argument starts with <code>**</code>, that keywor=
d is
recognized to accept free named arguments.</p>
<p>Using the free named argument syntax with dynamic libraries is illustrat=
ed
by the following examples. All the examples use a keyword <span class=3D"na=
me">Dynamic</span>
that has an argument specification <code>[a=3Dd1, b=3Dd2, **named]</code>. =
The comment shows
the arguments that the <code>run_keyword</code> method is actually called w=
ith.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p">                  </span><span class=3D"c"># =
args, kwargs</span>
<span class=3D"gu">No arguments</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">                         </span><span class=3D"c"># [], {}</span>

<span class=3D"gu">Positional only</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x</span><span class=3D"p">             =
       </span><span class=3D"c"># [x], {}</span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x</span><span class=3D"p">      </span>=
<span class=3D"s">y</span><span class=3D"p">             </span><span class=
=3D"c"># [x, y], {}</span>

<span class=3D"gu">Free named only</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x=3D1</span><span class=3D"p">         =
         </span><span class=3D"c"># [], {x: 1}</span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x=3D1</span><span class=3D"p">    </spa=
n><span class=3D"s">y=3D2</span><span class=3D"p">    </span><span class=3D=
"s">z=3D3</span><span class=3D"p">    </span><span class=3D"c"># [], {x: 1,=
 y: 2, z: 3}</span>

<span class=3D"gu">Free named with positional</span><span class=3D"p"></spa=
n>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x</span><span class=3D"p">      </span>=
<span class=3D"s">y=3D2</span><span class=3D"p">           </span><span cla=
ss=3D"c"># [x], {y: 2}</span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">x</span><span class=3D"p">      </span>=
<span class=3D"s">y=3D2</span><span class=3D"p">    </span><span class=3D"s=
">z=3D3</span><span class=3D"p">    </span><span class=3D"c"># [x], {y: 2, =
z: 3}</span>

<span class=3D"gu">Free named with normal named</span><span class=3D"p"></s=
pan>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">a=3D1</span><span class=3D"p">    </spa=
n><span class=3D"s">x=3D1</span><span class=3D"p">           </span><span c=
lass=3D"c"># [], {a: 1, x: 1}</span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">b=3D2</span><span class=3D"p">    </spa=
n><span class=3D"s">x=3D1</span><span class=3D"p">    </span><span class=3D=
"s">a=3D1</span><span class=3D"p">    </span><span class=3D"c"># [], {a: 1,=
 b: 2, x: 1}</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Prior to Robot Framework 3.1, normal named arguments were=
 mapped
to positional arguments but nowadays they are part of the
<code>kwargs</code> along with the free named arguments.</p>
</div>
</div>
<div class=3D"section" id=3D"named-only-arguments-with-dynamic-libraries">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id820">Named-only arguments with dyn=
amic libraries</a></h4>
<p>Starting from Robot Framework 3.1, dynamic libraries can have <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#named-only-arguments">named-only
arguments</a>. This requires that the <code>run_keyword</code> method <a cl=
ass=3D"reference internal" href=3D"http://robotframework.org/robotframework=
/latest/RobotFrameworkUserGuide.html#running-dynamic-keywords">takes three
arguments</a>: the third getting the named-only arguments along with the ot=
her
named arguments.</p>
<p>In the <a class=3D"reference internal" href=3D"http://robotframework.org=
/robotframework/latest/RobotFrameworkUserGuide.html#getting-keyword-argumen=
ts">argument specification</a> returned by the <code>get_keyword_arguments<=
/code>
method named-only arguments are specified after possible variable number
of arguments (<code>*varargs</code>) or a lone asterisk (<code>*</code>) if=
 the keyword does not
accept varargs. Named-only arguments can have default values, and the order
of arguments with and without default values does not matter.</p>
<p>Using the named-only argument syntax with dynamic libraries is illustrat=
ed
by the following examples. All the examples use a keyword <span class=3D"na=
me">Dynamic</span>
that has been specified to have argument specification
<code>[positional=3Ddefault, *varargs, named, named2=3Ddefault, **free]</co=
de>. The comment
shows the arguments that the <code>run_keyword</code> method is actually ca=
lled with.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p">                                  </span><spa=
n class=3D"c"># args, kwargs</span>
<span class=3D"gu">Named-only only</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">named=3Dvalue</span><span class=3D"p"> =
                         </span><span class=3D"c"># [], {named: value}</spa=
n>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">named=3Dvalue</span><span class=3D"p"> =
   </span><span class=3D"s">named2=3D2</span><span class=3D"p">            =
  </span><span class=3D"c"># [], {named: value, named2: 2}</span>

<span class=3D"gu">Named-only with positional and varargs</span><span class=
=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">argument</span><span class=3D"p">      =
 </span><span class=3D"s">named=3Dxxx</span><span class=3D"p">             =
</span><span class=3D"c"># [argument], {named: xxx}</span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">a1</span><span class=3D"p">            =
 </span><span class=3D"s">a2</span><span class=3D"p">         </span><span =
class=3D"s">named=3D3</span><span class=3D"p">    </span><span class=3D"c">=
# [a1, a2], {named: 3}</span>

<span class=3D"gu">Named-only with normal named</span><span class=3D"p"></s=
pan>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">named=3Dfoo</span><span class=3D"p">   =
   </span><span class=3D"s">positional=3Dbar</span><span class=3D"p">      =
  </span><span class=3D"c"># [], {positional: bar, named: foo}</span>

<span class=3D"gu">Named-only with free named</span><span class=3D"p"></spa=
n>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">named=3Dvalue</span><span class=3D"p"> =
   </span><span class=3D"s">foo=3Dbar</span><span class=3D"p">             =
  </span><span class=3D"c"># [], {named: value, foo=3Dbar}</span>
<span class=3D"p">    </span><span class=3D"nf">Dynamic</span><span class=
=3D"p">    </span><span class=3D"s">named2=3D2</span><span class=3D"p">    =
   </span><span class=3D"s">third=3D3</span><span class=3D"p">    </span><s=
pan class=3D"s">named=3D1</span><span class=3D"p">    </span><span class=3D=
"c"># [], {named: 1, named2: 2, third: 3}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"summary">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id821">Summary</a></h4>
<p>All special methods in the dynamic API are listed in the table
below. Method names are listed in the underscore format, but their
camelCase aliases work exactly the same way.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>All special methods in the dynamic API</caption>
<colgroup>
<col width=3D"21%">
<col width=3D"19%">
<col width=3D"60%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Name</th>
<th class=3D"head">Arguments</th>
<th class=3D"head">Purpose</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td><code>get_keyword_names</code></td>
<td>&nbsp;</td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-dynamic-keyword-names=
">Return names</a> of the implemented keywords.</td>
</tr>
<tr><td><code>run_keyword</code></td>
<td><code>name, arguments, kwargs</code></td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#running-dynamic-keywords">Exe=
cute the specified keyword</a> with given arguments. <code>kwargs</code> is=
 optional.</td>
</tr>
<tr><td><code>get_keyword_arguments</code></td>
<td><code>name</code></td>
<td>Return keywords' <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#getting-keyw=
ord-arguments">argument specification</a>. Optional method.</td>
</tr>
<tr><td><code>get_keyword_types</code></td>
<td><code>name</code></td>
<td>Return keywords' <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#getting-keyw=
ord-argument-types">argument type information</a>. Optional method. New in =
RF 3.1.</td>
</tr>
<tr><td><code>get_keyword_tags</code></td>
<td><code>name</code></td>
<td>Return keywords' <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#getting-keyw=
ord-tags">tags</a>. Optional method. New in RF 3.0.2.</td>
</tr>
<tr><td><code>get_keyword_documentation</code></td>
<td><code>name</code></td>
<td>Return keywords' and library's <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#getting-keyword-documentation">documentation</a>. Optional method.</td>
</tr>
</tbody>
</table>
<p>It is possible to write a formal interface specification in Java as
below. However, remember that libraries <em>do not need</em> to implement
any explicit interface, because Robot Framework directly checks with
reflection if the library has the required <code>get_keyword_names</code> a=
nd
<code>run_keyword</code> methods or their camelCase aliases.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">interface</span> <span class=3D"nc">RobotFrameworkDynam=
icAPI</span> <span class=3D"o">{</span>

    <span class=3D"n">List</span><span class=3D"o">&lt;</span><span class=
=3D"n">String</span><span class=3D"o">&gt;</span> <span class=3D"nf">getKey=
wordNames</span><span class=3D"o">();</span>

    <span class=3D"n">Object</span> <span class=3D"nf">runKeyword</span><sp=
an class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">na=
me</span><span class=3D"o">,</span> <span class=3D"n">List</span> <span cla=
ss=3D"n">arguments</span><span class=3D"o">);</span>

    <span class=3D"n">Object</span> <span class=3D"nf">runKeyword</span><sp=
an class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">na=
me</span><span class=3D"o">,</span> <span class=3D"n">List</span> <span cla=
ss=3D"n">arguments</span><span class=3D"o">,</span> <span class=3D"n">Map</=
span> <span class=3D"n">kwargs</span><span class=3D"o">);</span>

    <span class=3D"n">List</span><span class=3D"o">&lt;</span><span class=
=3D"n">String</span><span class=3D"o">&gt;</span> <span class=3D"nf">getKey=
wordArguments</span><span class=3D"o">(</span><span class=3D"n">String</spa=
n> <span class=3D"n">name</span><span class=3D"o">);</span>

    <span class=3D"n">List</span><span class=3D"o">&lt;</span><span class=
=3D"n">String</span><span class=3D"o">&gt;</span> <span class=3D"nf">getKey=
wordTypes</span><span class=3D"o">(</span><span class=3D"n">String</span> <=
span class=3D"n">name</span><span class=3D"o">);</span>

    <span class=3D"n">List</span><span class=3D"o">&lt;</span><span class=
=3D"n">String</span><span class=3D"o">&gt;</span> <span class=3D"nf">getKey=
wordTags</span><span class=3D"o">(</span><span class=3D"n">String</span> <s=
pan class=3D"n">name</span><span class=3D"o">);</span>

    <span class=3D"n">String</span> <span class=3D"nf">getKeywordDocumentat=
ion</span><span class=3D"o">(</span><span class=3D"n">String</span> <span c=
lass=3D"n">name</span><span class=3D"o">);</span>

<span class=3D"o">}</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">In addition to using <code>List</code>, it is possible to=
 use also arrays
like <code>Object[]</code> or <code>String[]</code>.</p>
</div>
<p>A good example of using the dynamic API is Robot Framework's own
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#remote-library">Remote library</a=
>.</p>
</div>
</div>
<div class=3D"section" id=3D"hybrid-library-api">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id822">4.1.7&nbsp;&nbsp;&nbsp;Hybrid=
 library API</a></h3>
<p>The hybrid library API is, as its name implies, a hybrid between the
static API and the dynamic API. Just as with the dynamic API, it is
possible to implement a library using the hybrid API only as a class.</p>
<div class=3D"section" id=3D"id331">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id823">Getting keyword names</a></h4=
>
<p>Keyword names are got in the exactly same way as with the dynamic
API. In practice, the library needs to have the
<code>get_keyword_names</code> or <code>getKeywordNames</code> method retur=
ning
a list of keyword names that the library implements.</p>
</div>
<div class=3D"section" id=3D"id332">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id824">Running keywords</a></h4>
<p>In the hybrid API, there is no <code>run_keyword</code> method for execu=
ting
keywords. Instead, Robot Framework uses reflection to find methods
implementing keywords, similarly as with the static API. A library
using the hybrid API can either have those methods implemented
directly or, more importantly, it can handle them dynamically.</p>
<p>In Python, it is easy to handle missing methods dynamically with the
<code>__getattr__</code> method. This special method is probably familiar
to most Python programmers and they can immediately understand the
following example. Others may find it easier to consult <a class=3D"referen=
ce external" href=3D"http://docs.python.org/reference/datamodel.html#attrib=
ute-access">Python Reference
Manual</a> first.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">somewhere</span> <span class=3D"kn">import</span> <span c=
lass=3D"n">external_keyword</span>

<span class=3D"k">class</span> <span class=3D"nc">HybridExample</span><span=
 class=3D"p">:</span>

    <span class=3D"k">def</span> <span class=3D"nf">get_keyword_names</span=
><span class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">=
):</span>
        <span class=3D"k">return</span> <span class=3D"p">[</span><span cla=
ss=3D"s1">'my_keyword'</span><span class=3D"p">,</span> <span class=3D"s1">=
'external_keyword'</span><span class=3D"p">]</span>

    <span class=3D"k">def</span> <span class=3D"nf">my_keyword</span><span =
class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span=
> <span class=3D"n">arg</span><span class=3D"p">):</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s2">"My Keyword called with '</span><span class=3D"si">%s</span><span c=
lass=3D"s2">'"</span> <span class=3D"o">%</span> <span class=3D"n">arg</spa=
n><span class=3D"p">)</span>

    <span class=3D"k">def</span> <span class=3D"fm">__getattr__</span><span=
 class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</spa=
n> <span class=3D"n">name</span><span class=3D"p">):</span>
        <span class=3D"k">if</span> <span class=3D"n">name</span> <span cla=
ss=3D"o">=3D=3D</span> <span class=3D"s1">'external_keyword'</span><span cl=
ass=3D"p">:</span>
            <span class=3D"k">return</span> <span class=3D"n">external_keyw=
ord</span>
        <span class=3D"k">raise</span> <span class=3D"ne">AttributeError</s=
pan><span class=3D"p">(</span><span class=3D"s2">"Non-existing attribute '<=
/span><span class=3D"si">%s</span><span class=3D"s2">'"</span> <span class=
=3D"o">%</span> <span class=3D"n">name</span><span class=3D"p">)</span>
</pre></div>
<p>Note that <code>__getattr__</code> does not execute the actual keyword l=
ike
<code>run_keyword</code> does with the dynamic API. Instead, it only
returns a callable object that is then executed by Robot Framework.</p>
<p>Another point to be noted is that Robot Framework uses the same names th=
at
are returned from <code>get_keyword_names</code> for finding the methods
implementing them. Thus the names of the methods that are implemented in
the class itself must be returned in the same format as they are
defined. For example, the library above would not work correctly, if
<code>get_keyword_names</code> returned <code>My Keyword</code> instead of
<code>my_keyword</code>.</p>
<p>The hybrid API is not very useful with Java, because it is not
possible to handle missing methods with it. Of course, it is possible
to implement all the methods in the library class, but that brings few
benefits compared to the static API.</p>
</div>
<div class=3D"section" id=3D"getting-keyword-arguments-and-documentation">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id825">Getting keyword arguments and=
 documentation</a></h4>
<p>When this API is used, Robot Framework uses reflection to find the
methods implementing keywords, similarly as with the static API. After
getting a reference to the method, it searches for arguments and
documentation from it, in the same way as when using the static
API. Thus there is no need for special methods for getting arguments
and documentation like there is with the dynamic API.</p>
</div>
<div class=3D"section" id=3D"id334">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id826">Summary</a></h4>
<p>When implementing a test library in Python, the hybrid API has the same
dynamic capabilities as the actual dynamic API. A great benefit with it is
that there is no need to have special methods for getting keyword
arguments and documentation. It is also often practical that the only real
dynamic keywords need to be handled in <code>__getattr__</code> and others
can be implemented directly in the main library class.</p>
<p>Because of the clear benefits and equal capabilities, the hybrid API
is in most cases a better alternative than the dynamic API when using
Python. One notable exception is implementing a library as a proxy for
an actual library implementation elsewhere, because then the actual
keyword must be executed elsewhere and the proxy can only pass forward
the keyword name and arguments.</p>
<p>A good example of using the hybrid API is Robot Framework's own
<a class=3D"reference external" href=3D"http://robotframework.org/robotfram=
ework/latest/libraries/Telnet.html">Telnet</a> library.</p>
</div>
</div>
<div class=3D"section" id=3D"using-robot-framework-s-internal-modules">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id827">4.1.8&nbsp;&nbsp;&nbsp;Using =
Robot Framework's internal modules</a></h3>
<p>Test libraries implemented with Python can use Robot Framework's
internal modules, for example, to get information about the executed
tests and the settings that are used. This powerful mechanism to
communicate with the framework should be used with care, though,
because all Robot Framework's APIs are not meant to be used by
externally and they might change radically between different framework
versions.</p>
<div class=3D"section" id=3D"available-apis">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id828">Available APIs</a></h4>
<p><a class=3D"reference external" href=3D"http://robot-framework.readthedo=
cs.org/">API documentation</a> is hosted separately
at the excellent <a class=3D"reference external" href=3D"http://readthedocs=
.org/">Read the Docs</a> service. If you are unsure how to use
certain API or is using them forward compatible, please send a question
to <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#mailing-lists">mailing list</a=
>.</p>
</div>
<div class=3D"section" id=3D"using-builtin-library">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id829">Using BuiltIn library</a></h4=
>
<p>The safest API to use are methods implementing keywords in the
<a class=3D"reference external" href=3D"http://robotframework.org/robotfram=
ework/latest/libraries/BuiltIn.html">BuiltIn</a> library. Changes to keywor=
ds are rare and they are always
done so that old usage is first deprecated. One of the most useful
methods is <code>replace_variables</code> which allows accessing currently
available variables. The following example demonstrates how to get
<code>${OUTPUT_DIR}</code> which is one of the many handy <a class=3D"refer=
ence internal" href=3D"http://robotframework.org/robotframework/latest/Robo=
tFrameworkUserGuide.html#automatic-variables">automatic
variables</a>. It is also possible to set new variables from libraries
using <code>set_test_variable</code>, <code>set_suite_variable</code> and
<code>set_global_variable</code>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">os.path</span>
<span class=3D"kn">from</span> <span class=3D"nn">robot.libraries.BuiltIn</=
span> <span class=3D"kn">import</span> <span class=3D"n">BuiltIn</span>

<span class=3D"k">def</span> <span class=3D"nf">do_something</span><span cl=
ass=3D"p">(</span><span class=3D"n">argument</span><span class=3D"p">):</sp=
an>
    <span class=3D"n">output</span> <span class=3D"o">=3D</span> <span clas=
s=3D"n">do_something_that_creates_a_lot_of_output</span><span class=3D"p">(=
</span><span class=3D"n">argument</span><span class=3D"p">)</span>
    <span class=3D"n">outputdir</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">BuiltIn</span><span class=3D"p">()</span><span class=3D"o">.</sp=
an><span class=3D"n">replace_variables</span><span class=3D"p">(</span><spa=
n class=3D"s1">'${OUTPUTDIR}'</span><span class=3D"p">)</span>
    <span class=3D"n">path</span> <span class=3D"o">=3D</span> <span class=
=3D"n">os</span><span class=3D"o">.</span><span class=3D"n">path</span><spa=
n class=3D"o">.</span><span class=3D"n">join</span><span class=3D"p">(</spa=
n><span class=3D"n">outputdir</span><span class=3D"p">,</span> <span class=
=3D"s1">'results.txt'</span><span class=3D"p">)</span>
    <span class=3D"n">f</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">open</span><span class=3D"p">(</span><span class=3D"n">path</span><span=
 class=3D"p">,</span> <span class=3D"s1">'w'</span><span class=3D"p">)</spa=
n>
    <span class=3D"n">f</span><span class=3D"o">.</span><span class=3D"n">w=
rite</span><span class=3D"p">(</span><span class=3D"n">output</span><span c=
lass=3D"p">)</span>
    <span class=3D"n">f</span><span class=3D"o">.</span><span class=3D"n">c=
lose</span><span class=3D"p">()</span>
    <span class=3D"k">print</span><span class=3D"p">(</span><span class=3D"=
s1">'*HTML* Output written to &lt;a href=3D"results.txt"&gt;results.txt&lt;=
/a&gt;'</span><span class=3D"p">)</span>
</pre></div>
<p>The only catch with using methods from <code>BuiltIn</code> is that all
<code>run_keyword</code> method variants must be handled specially.
Methods that use <code>run_keyword</code> methods have to be registered
as <em>run keywords</em> themselves using <code>register_run_keyword</code>
method in <code>BuiltIn</code> module. This method's documentation explains
why this needs to be done and obviously also how to do it.</p>
</div>
</div>
<div class=3D"section" id=3D"extending-existing-test-libraries">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id830">4.1.9&nbsp;&nbsp;&nbsp;Extend=
ing existing test libraries</a></h3>
<p>This section explains different approaches how to add new
functionality to existing test libraries and how to use them in your
own libraries otherwise.</p>
<div class=3D"section" id=3D"modifying-original-source-code">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id831">Modifying original source cod=
e</a></h4>
<p>If you have access to the source code of the library you want to
extend, you can naturally modify the source code directly. The biggest
problem of this approach is that it can be hard for you to update the
original library without affecting your changes. For users it may also
be confusing to use a library that has different functionality than
the original one. Repackaging the library may also be a big extra
task.</p>
<p>This approach works extremely well if the enhancements are generic and
you plan to submit them back to the original developers. If your
changes are applied to the original library, they are included in the
future releases and all the problems discussed above are mitigated. If
changes are non-generic, or you for some other reason cannot submit
them back, the approaches explained in the subsequent sections
probably work better.</p>
</div>
<div class=3D"section" id=3D"using-inheritance">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id832">Using inheritance</a></h4>
<p>Another straightforward way to extend an existing library is using
inheritance. This is illustrated by the example below that adds new
<span class=3D"name">Title Should Start With</span> keyword to the <a class=
=3D"reference external" href=3D"https://github.com/robotframework/SeleniumL=
ibrary">SeleniumLibrary</a>. This
example uses Python, but you can obviously extend an existing Java
library in Java code the same way.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">SeleniumLibrary</span> <span class=3D"kn">import</span> <=
span class=3D"n">SeleniumLibrary</span>

<span class=3D"k">class</span> <span class=3D"nc">ExtendedSeleniumLibrary</=
span><span class=3D"p">(</span><span class=3D"n">SeleniumLibrary</span><spa=
n class=3D"p">):</span>

    <span class=3D"k">def</span> <span class=3D"nf">title_should_start_with=
</span><span class=3D"p">(</span><span class=3D"bp">self</span><span class=
=3D"p">,</span> <span class=3D"n">expected</span><span class=3D"p">):</span=
>
        <span class=3D"n">title</span> <span class=3D"o">=3D</span> <span c=
lass=3D"bp">self</span><span class=3D"o">.</span><span class=3D"n">get_titl=
e</span><span class=3D"p">()</span>
        <span class=3D"k">if</span> <span class=3D"ow">not</span> <span cla=
ss=3D"n">title</span><span class=3D"o">.</span><span class=3D"n">startswith=
</span><span class=3D"p">(</span><span class=3D"n">expected</span><span cla=
ss=3D"p">):</span>
            <span class=3D"k">raise</span> <span class=3D"ne">AssertionErro=
r</span><span class=3D"p">(</span><span class=3D"s2">"Title '</span><span c=
lass=3D"si">%s</span><span class=3D"s2">' did not start with '</span><span =
class=3D"si">%s</span><span class=3D"s2">'"</span>
                                 <span class=3D"o">%</span> <span class=3D"=
p">(</span><span class=3D"n">title</span><span class=3D"p">,</span> <span c=
lass=3D"n">expected</span><span class=3D"p">))</span>
</pre></div>
<p>A big difference with this approach compared to modifying the original
library is that the new library has a different name than the
original. A benefit is that you can easily tell that you are using a
custom library, but a big problem is that you cannot easily use the
new library with the original. First of all your new library will have
same keywords as the original meaning that there is always
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#handling-keywords-with-same-names=
">conflict</a>. Another problem is that the libraries do not share their
state.</p>
<p>This approach works well when you start to use a new library and want
to add custom enhancements to it from the beginning. Otherwise other
mechanisms explained in this section are probably better.</p>
</div>
<div class=3D"section" id=3D"using-other-libraries-directly">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id833">Using other libraries directl=
y</a></h4>
<p>Because test libraries are technically just classes or modules, a
simple way to use another library is importing it and using its
methods. This approach works great when the methods are static and do
not depend on the library state. This is illustrated by the earlier
example that uses <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#using-robot-fra=
mework-s-internal-modules">Robot Framework's BuiltIn library</a>.</p>
<p>If the library has state, however, things may not work as you would
hope.  The library instance you use in your library will not be the
same as the framework uses, and thus changes done by executed keywords
are not visible to your library. The next section explains how to get
an access to the same library instance that the framework uses.</p>
</div>
<div class=3D"section" id=3D"getting-active-library-instance-from-robot-fra=
mework">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id834">Getting active library instan=
ce from Robot Framework</a></h4>
<p><a class=3D"reference external" href=3D"http://robotframework.org/robotf=
ramework/latest/libraries/BuiltIn.html">BuiltIn</a> keyword <span class=3D"=
name">Get Library Instance</span> can be used to get the
currently active library instance from the framework itself. The
library instance returned by this keyword is the same as the framework
itself uses, and thus there is no problem seeing the correct library
state. Although this functionality is available as a keyword, it is
typically used in test libraries directly by importing the <span class=3D"n=
ame">BuiltIn</span>
library class <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#using-robot-framewo=
rk-s-internal-modules">as discussed earlier</a>. The following example illu=
strates
how to implement the same <span class=3D"name">Title Should Start With</spa=
n> keyword as in
the earlier example about <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#using-i=
nheritance">using inheritance</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">robot.libraries.BuiltIn</span> <span class=3D"kn">import<=
/span> <span class=3D"n">BuiltIn</span>

<span class=3D"k">def</span> <span class=3D"nf">title_should_start_with</sp=
an><span class=3D"p">(</span><span class=3D"n">expected</span><span class=
=3D"p">):</span>
    <span class=3D"n">seleniumlib</span> <span class=3D"o">=3D</span> <span=
 class=3D"n">BuiltIn</span><span class=3D"p">()</span><span class=3D"o">.</=
span><span class=3D"n">get_library_instance</span><span class=3D"p">(</span=
><span class=3D"s1">'SeleniumLibrary'</span><span class=3D"p">)</span>
    <span class=3D"n">title</span> <span class=3D"o">=3D</span> <span class=
=3D"n">seleniumlib</span><span class=3D"o">.</span><span class=3D"n">get_ti=
tle</span><span class=3D"p">()</span>
    <span class=3D"k">if</span> <span class=3D"ow">not</span> <span class=
=3D"n">title</span><span class=3D"o">.</span><span class=3D"n">startswith</=
span><span class=3D"p">(</span><span class=3D"n">expected</span><span class=
=3D"p">):</span>
        <span class=3D"k">raise</span> <span class=3D"ne">AssertionError</s=
pan><span class=3D"p">(</span><span class=3D"s2">"Title '</span><span class=
=3D"si">%s</span><span class=3D"s2">' did not start with '</span><span clas=
s=3D"si">%s</span><span class=3D"s2">'"</span>
                             <span class=3D"o">%</span> <span class=3D"p">(=
</span><span class=3D"n">title</span><span class=3D"p">,</span> <span class=
=3D"n">expected</span><span class=3D"p">))</span>
</pre></div>
<p>This approach is clearly better than importing the library directly
and using it when the library has a state. The biggest benefit over
inheritance is that you can use the original library normally and use
the new library in addition to it when needed. That is demonstrated in
the example below where the code from the previous examples is
expected to be available in a new library <span class=3D"name">SeLibExtensi=
ons</span>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">SeleniumLibrary</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">SeLibExtensions</span><span class=3D"p"></span>

<span class=3D"gh">*** Test Cases ***</span><span class=3D"p"></span>
<span class=3D"gu">Example</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Open Browser</span><span cl=
ass=3D"p">    </span><span class=3D"s">http://example</span><span class=3D"=
p">      </span><span class=3D"c"># SeleniumLibrary</span>
<span class=3D"p">    </span><span class=3D"nf">Title Should Start With</sp=
an><span class=3D"p">    </span><span class=3D"s">Example</span><span class=
=3D"p">  </span><span class=3D"c"># SeLibExtensions</span>
</pre></div>
</div>
<div class=3D"section" id=3D"libraries-using-dynamic-or-hybrid-api">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id835">Libraries using dynamic or hy=
brid API</a></h4>
<p>Test libraries that use the <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#dy=
namic-library-api">dynamic</a> or <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#hybrid-library-api">hybrid library API</a> often
have their own systems how to extend them. With these libraries you
need to ask guidance from the library developers or consult the
library documentation or source code.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"remote-library-interface">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id771">4.2&nbsp;&nbsp;&nbsp;Remote l=
ibrary interface</a></h2>
<p>The remote library interface provides means for having test libraries
on different machines than where Robot Framework itself is running,
and also for implementing libraries using other languages than the
natively supported Python and Java. For a test library, user remote
libraries look pretty much the same as any other test library, and
developing test libraries using the remote library interface is also
very close to creating <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-t=
est-libraries">normal test libraries</a>.</p>
<div class=3D"contents local topic" id=3D"id340">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id341" id=3D"id836">4.2.1&nbs=
p;&nbsp;&nbsp;Introduction</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#putting-remote-library-to-use=
" id=3D"id837">4.2.2&nbsp;&nbsp;&nbsp;Putting Remote library to use</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#importing-remote-library" id=
=3D"id838">Importing Remote library</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#starting-and-stopping-remote-=
servers" id=3D"id839">Starting and stopping remote servers</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#supported-argument-and-return=
-value-types" id=3D"id840">4.2.3&nbsp;&nbsp;&nbsp;Supported argument and re=
turn value types</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#remote-protocol" id=3D"id841"=
>4.2.4&nbsp;&nbsp;&nbsp;Remote protocol</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#required-methods" id=3D"id842=
">Required methods</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-remote-keyword-names-=
and-other-information" id=3D"id843">Getting remote keyword names and other =
information</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#executing-remote-keywords" id=
=3D"id844">Executing remote keywords</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#different-argument-syntaxes" =
id=3D"id845">Different argument syntaxes</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"id341">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id836">4.2.1&nbsp;&nbsp;&nbsp;Introd=
uction</a></h3>
<p>There are two main reasons for using the remote library API:</p>
<ul class=3D"simple">
<li>It is possible to have actual libraries on different machines than
where Robot Framework is running. This allows interesting
possibilities for distributed testing.</li>
<li>Test libraries can be implemented using any language that supports
<a class=3D"reference external" href=3D"http://www.xmlrpc.com/">XML-RPC</a>=
 protocol. There exists ready-made <a class=3D"reference external" href=3D"=
https://github.com/robotframework/RemoteInterface#available-remote-servers"=
>generic remote servers</a>
for various languages like Python, Java, Ruby, .NET, and so on.</li>
</ul>
<p>The remote library interface is provided by the Remote library that is
one of the <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#standard-libraries">st=
andard libraries</a>.
This library does not have any keywords of its own, but it works
as a proxy between the core framework and keywords implemented
elsewhere. The Remote library interacts with actual library
implementations through remote servers, and the Remote library and
servers communicate using a simple <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#remote-protocol">remote protocol</a> on top of an
XML-RPC channel.  The high level architecture of all this is
illustrated in the picture below:</p>
<div class=3D"figure">
<img alt=3D"src/ExtendingRobotFramework/remote.png" src=3D"http://robotfram=
ework.org/robotframework/latest/images/remote.png">
<p class=3D"caption">Robot Framework architecture with Remote library</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">The remote client uses Python's standard <a class=3D"refe=
rence external" href=3D"https://docs.python.org/library/xmlrpc.client.html"=
>XML-RPC module</a>. It does
not support custom XML-RPC extensions implemented by some XML-RPC
servers.</p>
</div>
</div>
<div class=3D"section" id=3D"putting-remote-library-to-use">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id837">4.2.2&nbsp;&nbsp;&nbsp;Puttin=
g Remote library to use</a></h3>
<div class=3D"section" id=3D"importing-remote-library">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id838">Importing Remote library</a><=
/h4>
<p>The Remote library needs to know the address of the remote server but
otherwise importing it and using keywords that it provides is no
different to how other libraries are used. If you need to use the Remote
library multiple times in a test suite, or just want to give it a more
descriptive name, you can import it using the <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#setting-custom-name-to-test-library">WITH NAME syntax</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">Remote</span><span class=3D"p">    </span><span class=3D"s">http://=
127.0.0.1:8270</span><span class=3D"p">       </span><span class=3D"s">WITH=
 NAME</span><span class=3D"p">    </span><span class=3D"s">Example1</span><=
span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">Remote</span><span class=3D"p">    </span><span class=3D"s">http://=
example.com:8080/</span><span class=3D"p">    </span><span class=3D"s">WITH=
 NAME</span><span class=3D"p">    </span><span class=3D"s">Example2</span><=
span class=3D"p"></span>
<span class=3D"kn">Library</span><span class=3D"p">    </span><span class=
=3D"nn">Remote</span><span class=3D"p">    </span><span class=3D"s">http://=
10.0.0.2/example</span><span class=3D"p">    </span><span class=3D"s">1 min=
ute</span><span class=3D"p">    </span><span class=3D"s">WITH NAME</span><s=
pan class=3D"p">    </span><span class=3D"s">Example3</span><span class=3D"=
p"></span>
</pre></div>
<p>The URL used by the first example above is also the default address
that the Remote library uses if no address is given.</p>
<p>The last example above shows how to give a custom timeout to the Remote =
library
as an optional second argument. The timeout is used when initially connecti=
ng
to the server and if a connection accidentally closes. Timeout can be
given in Robot Framework <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-for=
mat">time format</a> like <code>60s</code> or <code>2 minutes 10 seconds</c=
ode>.
The default timeout is typically several minutes, but it depends on the
operating system and its configuration. Notice that setting a timeout that
is shorter than keyword execution time will interrupt the keyword. Setting
a custom timeout does not work with IronPython.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Port <code>8270</code> is the default port that remote se=
rvers are expected
to use and it has been <a class=3D"reference external" href=3D"http://www.i=
ana.org/assignments/service-names-port-numbers/service-names-port-numbers.x=
html?search=3D8270">registered by IANA</a> for this purpose.
This port number was selected because 82 and 70 are the ASCII codes
of letters <code>R</code> and <code>F</code>, respectively.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">When connecting to the local machine, it is recommended t=
o use
IP address <code>127.0.0.1</code> instead of machine name <code>localhost</=
code>. This
avoids address resolution that can be extremely slow <a class=3D"reference =
external" href=3D"http://stackoverflow.com/questions/14504450/pythons-xmlrp=
c-extremely-slow-one-second-per-call">at least on
Windows</a>.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">If the URI contains no path after the server address, the=
 <a class=3D"reference external" href=3D"https://docs.python.org/library/xm=
lrpc.client.html">XML-RPC
module</a> used by the Remote library will use <code>/RPC2</code> path by
default. In practice using <code>http://127.0.0.1:8270</code> is thus ident=
ical
to using <code>http://127.0.0.1:8270/RPC2</code>. Depending on the remote s=
erver
this may or may not be a problem. No extra path is appended if the
address has a path even if the path is just <code>/</code>. For example, ne=
ither
<code>http://127.0.0.1:8270/</code> nor <code>http://127.0.0.1:8270/my/path=
</code> will be
modified.</p>
</div>
</div>
<div class=3D"section" id=3D"starting-and-stopping-remote-servers">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id839">Starting and stopping remote =
servers</a></h4>
<p>Before the Remote library can be imported, the remote server providing
the actual keywords must be started.  If the server is started before
launching the test execution, it is possible to use the normal
<span class=3D"setting">Library</span> setting like in the above example. A=
lternatively other
keywords, for example from <a class=3D"reference external" href=3D"http://r=
obotframework.org/robotframework/latest/libraries/Process.html">Process</a>=
 or <a class=3D"reference external" href=3D"https://github.com/robotframewo=
rk/SSHLibrary">SSH</a> libraries, can start
the server up, but then you may need to use <a class=3D"reference internal"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#using-import-library-keyword">Import Library keyword</a>
because the library is not available when the test execution starts.</p>
<p>How a remote server can be stopped depends on how it is
implemented. Typically servers support the following methods:</p>
<ul class=3D"simple">
<li>Regardless of the library used, remote servers should provide <span cla=
ss=3D"name">Stop
Remote Server</span> keyword that can be easily used by executed tests.</li=
>
<li>Remote servers should have <code>stop_remote_server</code> method in th=
eir
XML-RPC interface.</li>
<li>Hitting <code>Ctrl-C</code> on the console where the server is running =
should
stop the server.</li>
<li>The server process can be terminated using tools provided by the
operating system (e.g. <tt class=3D"docutils literal">kill</tt>).</li>
</ul>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Servers may be configured so that users cannot stop it wi=
th
<span class=3D"name">Stop Remote Server</span> keyword or <code>stop_remote=
_server</code>
method.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"supported-argument-and-return-value-types">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id840">4.2.3&nbsp;&nbsp;&nbsp;Suppor=
ted argument and return value types</a></h3>
<p>Because the XML-RPC protocol does not support all possible object
types, the values transferred between the Remote library and remote
servers must be converted to compatible types. This applies to the
keyword arguments the Remote library passes to remote servers and to
the return values servers give back to the Remote library.</p>
<p>Both the Remote library and the Python remote server handle Python value=
s
according to the following rules. Other remote servers should behave simila=
rly.</p>
<ul class=3D"simple">
<li>Strings, numbers and Boolean values are passed without modifications.</=
li>
<li>Python <code>None</code> is converted to an empty string.</li>
<li>All lists, tuples, and other iterable objects (except strings and
dictionaries) are passed as lists so that their contents are converted
recursively.</li>
<li>Dictionaries and other mappings are passed as dicts so that their keys =
are
converted to strings and values converted to supported types recursively.</=
li>
<li>Returned dictionaries are converted to so called <em>dot-accessible dic=
ts</em>
that allow accessing keys as attributes using the <a class=3D"reference int=
ernal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewo=
rkUserGuide.html#extended-variable-syntax">extended variable syntax</a>
like <code>${result.key}</code>. This works also with nested dictionaries l=
ike
<code>${root.child.leaf}</code>. New functionality in Robot Framework 2.9.<=
/li>
<li>Strings containing bytes in the ASCII range that cannot be represented =
in
XML (e.g. the null byte) are sent as <a class=3D"reference external" href=
=3D"http://docs.python.org/library/xmlrpc.client.html#binary-objects">Binar=
y objects</a> that internally use
XML-RPC base64 data type. Received Binary objects are automatically convert=
ed
to byte strings.</li>
<li>Other types are converted to strings.</li>
</ul>
</div>
<div class=3D"section" id=3D"remote-protocol">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id841">4.2.4&nbsp;&nbsp;&nbsp;Remote=
 protocol</a></h3>
<p>This section explains the protocol that is used between the Remote
library and remote servers. This information is mainly targeted for
people who want to create new remote servers. The provided Python and
Ruby servers can also be used as examples.</p>
<p>The remote protocol is implemented on top of <a class=3D"reference exter=
nal" href=3D"http://www.xmlrpc.com/">XML-RPC</a>, which is a
simple remote procedure call protocol using XML over HTTP. Most
mainstream languages (Python, Java, C, Ruby, Perl, Javascript, PHP,
...) have a support for XML-RPC either built-in or as an extension.</p>
<div class=3D"section" id=3D"required-methods">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id842">Required methods</a></h4>
<p>A remote server is an XML-RPC server that must have the same methods in =
its
public interface as the <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#dynamic-l=
ibrary-api">dynamic library API</a> has. Only <code>get_keyword_names</code=
>
and <code>run_keyword</code> are actually required, but <code>get_keyword_a=
rguments</code>,
<code>get_keyword_types</code>, <code>get_keyword_tags</code> and <code>get=
_keyword_documentation</code> are
also recommended. Notice that using the camelCase format like <code>getKeyw=
ordNames</code>
in method names is not possible similarly as in the normal dynamic API. How
the actual keywords are implemented is not relevant for the Remote
library. Remote servers can either act as wrappers for the real test
libraries, like the available <a class=3D"reference external" href=3D"https=
://github.com/robotframework/RemoteInterface#available-remote-servers">gene=
ric remote servers</a> do, or they can
implement keywords themselves.</p>
<p>Remote servers should additionally have <code>stop_remote_server</code>
method in their public interface to ease stopping them. They should
also automatically expose this method as <span class=3D"name">Stop Remote S=
erver</span>
keyword to allow using it in the test data regardless of the test
library. Allowing users to stop the server is not always desirable,
and servers may support disabling this functionality somehow.
The method, and also the exposed keyword, should return <code>True</code>
or <code>False</code> depending on whether stopping is allowed or not. That=
 makes it
possible for external tools to know if stopping the server succeeded.</p>
<p>The <a class=3D"reference external" href=3D"https://github.com/robotfram=
ework/PythonRemoteServer">Python remote server</a> can be used as a referen=
ce implementation.</p>
</div>
<div class=3D"section" id=3D"getting-remote-keyword-names-and-other-informa=
tion">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id843">Getting remote keyword names =
and other information</a></h4>
<p>The Remote library gets the list of keywords that a remote server provid=
es
by using the <code>get_keyword_names</code> method. Remote servers must imp=
lement this
method and the method must return keyword names as a list of strings.</p>
<p>Remote servers can, and should, also implement <code>get_keyword_argumen=
ts</code>,
<code>get_keyword_types</code>, <code>get_keyword_tags</code> and <code>get=
_keyword_documentation</code>
methods to provide more information about the keywords. All these methods
take the name of the keyword as an argument. Arguments must be returned as
a list of strings in the <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#getting-=
keyword-arguments">same format as with dynamic libraries</a>, tags
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#getting-keyword-tags">as a list o=
f strings</a>, and documentation <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
getting-keyword-documentation">as a string</a>.</p>
<p>Type information can be returned either as a list mapping type names to
arguments based on position or as a dictionary mapping argument names to
type names directly. In practice this works the same way as when
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#specifying-argument-types-using-k=
eyword-decorator">specifying types using the @keyword decorator</a> with no=
rmal libraries.
The difference is that because the XML-RPC protocol does not support
arbitrary values, type information needs to be specified using type names
or aliases like <code>'int'</code> or <code>'integer'</code>, not using act=
ual types like <code>int</code>.
Additionally <code>None</code> or <code>null</code> values may not be allow=
ed, and the empty
string should be used instead if a marker telling certain argument does
not have type information is needed.</p>
<p>Remote servers can also provide <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#getting-general-library-documentation">general library documentation</a> =
to
be used when generating documentation with the <a class=3D"reference intern=
al" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#libdoc">Libdoc</a> tool.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><code>get_keyword_tags</code> is new in Robot Framework 3=
.0.2.
With earlier versions keyword tags can be <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#getting-keyword-tags">embedded into the
keyword documentation</a>.</p>
</div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last"><code>get_keyword_types</code> is new in Robot Framework =
3.1.</p>
</div>
</div>
<div class=3D"section" id=3D"executing-remote-keywords">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id844">Executing remote keywords</a>=
</h4>
<p>When the Remote library wants the server to execute some keyword, it
calls the remote server's <code>run_keyword</code> method and passes it the
keyword name, a list of arguments, and possibly a dictionary of
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#different-argument-syntaxes">free=
 named arguments</a>. Base types can be used as
arguments directly, but more complex types are <a class=3D"reference intern=
al" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#supported-argument-and-return-value-types">converted to suppo=
rted
types</a>.</p>
<p>The server must return results of the execution in a result dictionary
(or map, depending on terminology) containing items explained in the
following table. Notice that only the <code>status</code> entry is mandator=
y,
others can be omitted if they are not applicable.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Entries in the remote result dictionary</caption>
<colgroup>
<col width=3D"16%">
<col width=3D"84%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Name</th>
<th class=3D"head">Explanation</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>status</td>
<td>Mandatory execution status. Either PASS or FAIL.</td>
</tr>
<tr><td>output</td>
<td>Possible output to write into the log file. Must be given
as a single string but can contain multiple messages and
different <a class=3D"reference internal" href=3D"http://robotframework.org=
/robotframework/latest/RobotFrameworkUserGuide.html#logging-information">lo=
g levels</a> in format <code>*INFO* First
message\n*HTML* &lt;b&gt;2nd&lt;/b&gt;\n*WARN* Another message</code>. It
is also possible to embed <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#timesta=
mps">timestamps</a> to the log messages
like <code>*INFO:1308435758660* Message with timestamp</code>.</td>
</tr>
<tr><td>return</td>
<td>Possible return value. Must be one of the <a class=3D"reference interna=
l" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUs=
erGuide.html#supported-argument-and-return-value-types">supported
types</a>.</td>
</tr>
<tr><td>error</td>
<td>Possible error message. Used only when the execution fails.</td>
</tr>
<tr><td>traceback</td>
<td>Possible stack trace to <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#repor=
ting-keyword-status">write into the log file</a> using
DEBUG level when the execution fails.</td>
</tr>
<tr><td>continuable</td>
<td>When set to <code>True</code>, or any value considered <code>True</code=
> in
Python, the occurred failure is considered <a class=3D"reference internal" =
href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserG=
uide.html#continue-on-failure">continuable</a>.</td>
</tr>
<tr><td>fatal</td>
<td>Like <code>continuable</code>, but denotes that the occurred
failure is <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#stopping-test-executio=
n-gracefully">fatal</a>.</td>
</tr>
</tbody>
</table>
</div>
<div class=3D"section" id=3D"different-argument-syntaxes">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id845">Different argument syntaxes</=
a></h4>
<p>The Remote library is a <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#dynami=
c-library">dynamic library</a>, and in general it handles
different argument syntaxes <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#getti=
ng-keyword-arguments">according to the same rules</a> as any other
dynamic library.
This includes mandatory arguments, default values, varargs, as well
as <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#named-argument-syntax-with-dyn=
amic-libraries">named argument syntax</a>.</p>
<p>Also free named arguments (<code>**kwargs</code>) works mostly the <a cl=
ass=3D"reference internal" href=3D"http://robotframework.org/robotframework=
/latest/RobotFrameworkUserGuide.html#free-named-arguments-with-dynamic-libr=
aries">same way
as with other dynamic libraries</a>. First of all, the
<code>get_keyword_arguments</code> must return an argument specification th=
at
contains <code>**kwargs</code> exactly like with any other dynamic library.
The main difference is that
remote servers' <code>run_keyword</code> method must have an <strong>option=
al</strong> third argument
that gets the kwargs specified by the user. The third argument must be opti=
onal
because, for backwards-compatibility reasons, the Remote library passes kwa=
rgs
to the <code>run_keyword</code> method only when they have been used in the=
 test data.</p>
<p>In practice <code>run_keyword</code> should look something like the foll=
owing
Python and Java examples, depending on how the language handles optional
arguments.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">run_keyword</span><span class=3D"p">(</span><span class=3D"=
n">name</span><span class=3D"p">,</span> <span class=3D"n">args</span><span=
 class=3D"p">,</span> <span class=3D"n">kwargs</span><span class=3D"o">=3D<=
/span><span class=3D"bp">None</span><span class=3D"p">):</span>
    <span class=3D"c1"># ...</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"n">Map</span> <span class=3D"nf">run_keyword</span><span cl=
ass=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">name</s=
pan><span class=3D"o">,</span> <span class=3D"n">List</span> <span class=3D=
"n">args</span><span class=3D"o">)</span> <span class=3D"o">{</span>
    <span class=3D"c1">// ...</span>
<span class=3D"o">}</span>

<span class=3D"kd">public</span> <span class=3D"n">Map</span> <span class=
=3D"nf">run_keyword</span><span class=3D"o">(</span><span class=3D"n">Strin=
g</span> <span class=3D"n">name</span><span class=3D"o">,</span> <span clas=
s=3D"n">List</span> <span class=3D"n">args</span><span class=3D"o">,</span>=
 <span class=3D"n">Map</span> <span class=3D"n">kwargs</span><span class=3D=
"o">)</span> <span class=3D"o">{</span>
    <span class=3D"c1">// ...</span>
<span class=3D"o">}</span>
</pre></div>
</div>
</div>
</div>
<div class=3D"section" id=3D"listener-interface">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id772">4.3&nbsp;&nbsp;&nbsp;Listener=
 interface</a></h2>
<p>Robot Framework has a listener interface that can be used to receive
notifications about test execution. Example usages include
external test monitors, sending a mail message when a test fails, and
communicating with other systems. Listener API version 3 also makes
it possible to modify tests and results during the test execution.</p>
<p>Listeners are classes or modules with certain special methods, and they
can be implemented both with Python and Java. Listeners that monitor
the whole test execution must be taken into use from the command line.
In addition to that, <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-librari=
es-as-listeners">test libraries can register listeners</a> that receive
notifications while that library is active.</p>
<div class=3D"contents local topic" id=3D"id365">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#taking-listeners-into-use" id=
=3D"id846">4.3.1&nbsp;&nbsp;&nbsp;Taking listeners into use</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#listener-interface-versions" =
id=3D"id847">4.3.2&nbsp;&nbsp;&nbsp;Listener interface versions</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#listener-interface-methods" i=
d=3D"id848">4.3.3&nbsp;&nbsp;&nbsp;Listener interface methods</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#listener-version-2" id=3D"id8=
49">Listener version 2</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#listener-version-3" id=3D"id8=
50">Listener version 3</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#listeners-logging" id=3D"id85=
1">4.3.4&nbsp;&nbsp;&nbsp;Listeners logging</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#listener-examples" id=3D"id85=
2">4.3.5&nbsp;&nbsp;&nbsp;Listener examples</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#getting-information" id=3D"id=
853">Getting information</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#modifying-execution-and-resul=
ts" id=3D"id854">Modifying execution and results</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-libraries-as-listeners" =
id=3D"id855">4.3.6&nbsp;&nbsp;&nbsp;Test libraries as listeners</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#registering-listener" id=3D"i=
d856">Registering listener</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#called-listener-methods" id=
=3D"id857">Called listener methods</a></li>
</ul>
</li>
</ul>
</div>
<div class=3D"section" id=3D"taking-listeners-into-use">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id846">4.3.1&nbsp;&nbsp;&nbsp;Taking=
 listeners into use</a></h3>
<p>Listeners are taken into use from the command line with the <span class=
=3D"option">--listener</span>
option so that the name of the listener is given to it as an argument. The
listener name is got from the name of the class or module implementing the
listener interface, similarly as <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
test-library-names">test library names</a> are got from classes
implementing them. The specified listeners must be in the same <a class=3D"=
reference internal" href=3D"http://robotframework.org/robotframework/latest=
/RobotFrameworkUserGuide.html#module-search-path">module search
path</a> where test libraries are searched from when they are imported. Oth=
er
option is to give an absolute or a relative path to the listener file
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#using-physical-path-to-library">s=
imilarly as with test libraries</a>. It is possible to take multiple listen=
ers
into use by using this option several times:</p>
<pre class=3D"literal-block">robot --listener MyListener tests.robot
robot --listener com.company.package.Listener tests.robot
robot --listener path/to/MyListener.py tests.robot
robot --listener module.Listener --listener AnotherListener tests.robot
</pre>
<p>It is also possible to give arguments to listener classes from the comma=
nd
line. Arguments are specified after the listener name (or path) using a col=
on
(<code>:</code>) as a separator. If a listener is given as an absolute Wind=
ows path,
the colon after the drive letter is not considered a separator.
Additionally it is possible to use a semicolon (<code>;</code>) as an
alternative argument separator. This is useful if listener arguments
themselves contain colons, but requires surrounding the whole value with
quotes on UNIX-like operating systems:</p>
<pre class=3D"literal-block">robot --listener listener.py:arg1:arg2 tests.r=
obot
robot --listener "listener.py;arg:with:colons" tests.robot
robot --listener C:\Path\Listener.py;D:\data;E:\extra tests.robot
</pre>
</div>
<div class=3D"section" id=3D"listener-interface-versions">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id847">4.3.2&nbsp;&nbsp;&nbsp;Listen=
er interface versions</a></h3>
<p>There are two supported listener interface versions. Listener version 2 =
has
been available since Robot Framework 2.1, and version 3 is supported by
Robot Framework 3.0 and newer. A listener must have attribute
<code>ROBOT_LISTENER_API_VERSION</code> with value 2 or 3, either as a stri=
ng or as an
integer, depending on which API version it uses. There has also been an old=
er
listener version 1, but it is not supported anymore by Robot Framework 3.0.=
</p>
<p>The main difference between listener versions 2 and 3 is that the former=
 only
gets information about the execution but cannot directly affect it. The lat=
ter
interface gets data and result objects Robot Framework itself uses and is t=
hus
able to alter execution and change results. See <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#listener-examples">listener examples</a> for more
information about what listeners can do.</p>
<p>Another difference between versions 2 and 3 is that the former supports
both Python and Java but the latter supports only Python.</p>
</div>
<div class=3D"section" id=3D"listener-interface-methods">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id848">4.3.3&nbsp;&nbsp;&nbsp;Listen=
er interface methods</a></h3>
<p>Robot Framework creates instances of listener classes when the test exec=
ution
starts and uses listeners implemented as modules directly. During the test
execution different listener methods are called when test suites, test case=
s
and keywords start and end. Additional methods are called when a library or
a resource or variable file is imported, when output files are ready, and
finally when the whole test execution ends. A listener is not required to
implement any official interface, and it only needs to have the methods it
actually needs.</p>
<p>Listener versions 2 and 3 have mostly the same methods, but the argument=
s
they accept are different. These methods and their arguments are explained
in the following sections. All methods that have an underscore in their nam=
e
have also <em>camelCase</em> alternative. For example, <code>start_suite</c=
ode> method can
be used also with name <code>startSuite</code>.</p>
<div class=3D"section" id=3D"listener-version-2">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id849">Listener version 2</a></h4>
<p>Listener methods in the API version 2 are listed in the following table.
All methods related to test execution progress have the same signature
<code>method(name, attributes)</code>, where <code>attributes</code> is a d=
ictionary containing
details of the event. Listener methods are free to do whatever they want
to do with the information they receive, but they cannot directly change
it. If that is needed, <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#listener-v=
ersion-3">listener version 3</a> can be used instead.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Methods in the listener API 2</caption>
<colgroup>
<col width=3D"18%">
<col width=3D"18%">
<col width=3D"64%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Method</th>
<th class=3D"head">Arguments</th>
<th class=3D"head">Documentation</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>start_suite</td>
<td>name, attributes</td>
<td><p class=3D"first">Called when a test suite starts.</p>
<p>Contents of the attribute dictionary:</p>
<ul class=3D"last simple">
<li><code>id</code>: Suite id. <code>s1</code> for the top level suite, <co=
de>s1-s1</code>
for its first child suite, <code>s1-s2</code> for the second
child, and so on.</li>
<li><code>longname</code>: Suite name including parent suites.</li>
<li><code>doc</code>: Suite documentation.</li>
<li><code>metadata</code>: <a class=3D"reference internal" href=3D"http://r=
obotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#free-t=
est-suite-metadata">Free test suite metadata</a> as a dictionary/map.</li>
<li><code>source</code>: An absolute path of the file/directory the suite
was created from.</li>
<li><code>suites</code>: Names of the direct child suites this suite has
as a list.</li>
<li><code>tests</code>: Names of the tests this suite has as a list.
Does not include tests of the possible child suites.</li>
<li><code>totaltests</code>: The total number of tests in this suite.
and all its sub-suites as an integer.</li>
<li><code>starttime</code>: Suite execution start time.</li>
</ul>
</td>
</tr>
<tr><td>end_suite</td>
<td>name, attributes</td>
<td><p class=3D"first">Called when a test suite ends.</p>
<p>Contents of the attribute dictionary:</p>
<ul class=3D"last simple">
<li><code>id</code>: Same as in <code>start_suite</code>.</li>
<li><code>longname</code>: Same as in <code>start_suite</code>.</li>
<li><code>doc</code>: Same as in <code>start_suite</code>.</li>
<li><code>metadata</code>: Same as in <code>start_suite</code>.</li>
<li><code>source</code>: Same as in <code>start_suite</code>.</li>
<li><code>starttime</code>: Same as in <code>start_suite</code>.</li>
<li><code>endtime</code>: Suite execution end time.</li>
<li><code>elapsedtime</code>: Total execution time in milliseconds as
an integer</li>
<li><code>status</code>: Suite status as string <code>PASS</code> or <code>=
FAIL</code>.</li>
<li><code>statistics</code>: Suite statistics (number of passed
and failed tests in the suite) as a string.</li>
<li><code>message</code>: Error message if suite setup or teardown
has failed, empty otherwise.</li>
</ul>
</td>
</tr>
<tr><td>start_test</td>
<td>name, attributes</td>
<td><p class=3D"first">Called when a test case starts.</p>
<p>Contents of the attribute dictionary:</p>
<ul class=3D"last simple">
<li><code>id</code>: Test id in format like <code>s1-s2-t2</code>, where
the beginning is the parent suite id and the last part
shows test index in that suite.</li>
<li><code>longname</code>: Test name including parent suites.</li>
<li><code>doc</code>: Test documentation.</li>
<li><code>tags</code>: Test tags as a list of strings.</li>
<li><code>critical</code>: <code>yes</code> or <code>no</code> depending is=
 test considered
critical or not.</li>
<li><code>template</code>: The name of the template used for the test.
An empty string if the test not templated.</li>
<li><code>starttime</code>: Test execution execution start time.</li>
</ul>
</td>
</tr>
<tr><td>end_test</td>
<td>name, attributes</td>
<td><p class=3D"first">Called when a test case ends.</p>
<p>Contents of the attribute dictionary:</p>
<ul class=3D"last simple">
<li><code>id</code>: Same as in <code>start_test</code>.</li>
<li><code>longname</code>: Same as in <code>start_test</code>.</li>
<li><code>doc</code>: Same as in <code>start_test</code>.</li>
<li><code>tags</code>: Same as in <code>start_test</code>.</li>
<li><code>critical</code>: Same as in <code>start_test</code>.</li>
<li><code>template</code>: Same as in <code>start_test</code>.</li>
<li><code>starttime</code>: Same as in <code>start_test</code>.</li>
<li><code>endtime</code>: Test execution execution end time.</li>
<li><code>elapsedtime</code>: Total execution time in milliseconds as
an integer</li>
<li><code>status</code>: Test status as string <code>PASS</code> or <code>F=
AIL</code>.</li>
<li><code>message</code>: Status message. Normally an error
message or an empty string.</li>
</ul>
</td>
</tr>
<tr><td>start_keyword</td>
<td>name, attributes</td>
<td><p class=3D"first">Called when a keyword starts.</p>
<p><code>name</code> is the full keyword name containing
possible library or resource name as a prefix.
For example, <code>MyLibrary.Example Keyword</code>.</p>
<p>Contents of the attribute dictionary:</p>
<ul class=3D"last simple">
<li><code>type</code>: String <code>Keyword</code> for normal keywords, <co=
de>Setup</code> or
<code>Teardown</code> for the top level keyword used as setup/teardown,
<code>For</code> for for loops, and <code>For Item</code> for individual fo=
r loop
iterations. <strong>NOTE:</strong> Keyword type reporting was changed in
RF 3.0. See issue <a class=3D"reference external" href=3D"https://github.co=
m/robotframework/robotframework/issues/2248">#2248</a> for details.</li>
<li><code>kwname</code>: Name of the keyword without library or
resource prefix. New in RF 2.9.</li>
<li><code>libname</code>: Name of the library or resource the
keyword belongs to, or an empty string when
the keyword is in a test case file. New in RF 2.9.</li>
<li><code>doc</code>: Keyword documentation.</li>
<li><code>args</code>: Keyword's arguments as a list of strings.</li>
<li><code>assign</code>: A list of variable names that keyword's
return value is assigned to. New in RF 2.9.</li>
<li><code>tags</code>: <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#keyword-ta=
gs">Keyword tags</a> as a list of strings. New in RF 3.0.</li>
<li><code>starttime</code>: Keyword execution start time.</li>
</ul>
</td>
</tr>
<tr><td>end_keyword</td>
<td>name, attributes</td>
<td><p class=3D"first">Called when a keyword ends.</p>
<p><code>name</code> is the full keyword name containing
possible library or resource name as a prefix.
For example, <code>MyLibrary.Example Keyword</code>.</p>
<p>Contents of the attribute dictionary:</p>
<ul class=3D"last simple">
<li><code>type</code>: Same as with <code>start_keyword</code>.</li>
<li><code>kwname</code>: Same as with <code>start_keyword</code>.</li>
<li><code>libname</code>: Same as with <code>start_keyword</code>.</li>
<li><code>doc</code>: Same as with <code>start_keyword</code>.</li>
<li><code>args</code>: Same as with <code>start_keyword</code>.</li>
<li><code>assign</code>: Same as with <code>start_keyword</code>.</li>
<li><code>tags</code>: Same as with <code>start_keyword</code>.</li>
<li><code>starttime</code>: Same as with <code>start_keyword</code>.</li>
<li><code>endtime</code>: Keyword execution end time.</li>
<li><code>elapsedtime</code>: Total execution time in milliseconds as
an integer</li>
<li><code>status</code>: Keyword status as string <code>PASS</code> or <cod=
e>FAIL</code>.</li>
</ul>
</td>
</tr>
<tr><td>log_message</td>
<td>message</td>
<td><p class=3D"first">Called when an executed keyword writes a log message=
.</p>
<p><code>message</code> is a dictionary with the following contents:</p>
<ul class=3D"simple">
<li><code>message</code>: The content of the message.</li>
<li><code>level</code>: <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#log-level=
s">Log level</a> used in logging the message.</li>
<li><code>timestamp</code>: Message creation time in format
<code>YYYY-MM-DD hh:mm:ss.mil</code>.</li>
<li><code>html</code>: String <code>yes</code> or <code>no</code> denoting =
whether the message
should be interpreted as HTML or not.</li>
</ul>
<p class=3D"last">Starting from RF 3.0, this method is not called if the me=
ssage
has level below the current <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#log-l=
evels">threshold level</a>.</p>
</td>
</tr>
<tr><td>message</td>
<td>message</td>
<td><p class=3D"first">Called when the framework itself writes a <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#system-log">syslog</a> message.</p>
<p class=3D"last"><code>message</code> is a dictionary with the same conten=
ts as with
<code>log_message</code> method.</p>
</td>
</tr>
<tr><td>library_import</td>
<td>name, attributes</td>
<td><p class=3D"first">Called when a library has been imported.</p>
<p><code>name</code> is the name of the imported library. If the library
has been imported using the <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#setti=
ng-custom-name-to-test-library">WITH NAME syntax</a>, <code>name</code> is
the specified alias.</p>
<p>Contents of the attribute dictionary:</p>
<ul class=3D"simple">
<li><code>args</code>: Arguments passed to the library as a list.</li>
<li><code>originalname</code>: The original library name when using the
WITH NAME syntax, otherwise same as <code>name</code>.</li>
<li><code>source</code>: An absolute path to the library source. <code>None=
</code>
with libraries implemented with Java or if getting the
source of the library failed for some reason.</li>
<li><code>importer</code>: An absolute path to the file importing the
library. <code>None</code> when <a class=3D"reference external" href=3D"htt=
p://robotframework.org/robotframework/latest/libraries/BuiltIn.html">BuiltI=
n</a> is imported well as when
using the <span class=3D"name">Import Library</span> keyword.</li>
</ul>
<p class=3D"last">New in Robot Framework 2.9.</p>
</td>
</tr>
<tr><td>resource_import</td>
<td>name, attributes</td>
<td><p class=3D"first">Called when a resource file has been imported.</p>
<p><code>name</code> is the name of the imported resource file without
the file extension.</p>
<p>Contents of the attribute dictionary:</p>
<ul class=3D"simple">
<li><code>source</code>: An absolute path to the imported resource file.</l=
i>
<li><code>importer</code>: An absolute path to the file importing the
resource file. <code>None</code> when using the <span class=3D"name">Import=
 Resource</span>
keyword.</li>
</ul>
<p class=3D"last">New in Robot Framework 2.9.</p>
</td>
</tr>
<tr><td>variables_import</td>
<td>name, attributes</td>
<td><p class=3D"first">Called when a variable file has been imported.</p>
<p><code>name</code> is the name of the imported variable file with
the file extension.</p>
<p>Contents of the attribute dictionary:</p>
<ul class=3D"simple">
<li><code>args</code>: Arguments passed to the variable file as a list.</li=
>
<li><code>source</code>: An absolute path to the imported variable file.</l=
i>
<li><code>importer</code>: An absolute path to the file importing the
resource file. <code>None</code> when using the <span class=3D"name">Import
Variables</span> keyword.</li>
</ul>
<p class=3D"last">New in Robot Framework 2.9.</p>
</td>
</tr>
<tr><td>output_file</td>
<td>path</td>
<td><p class=3D"first">Called when writing to an <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#output-file">output file</a> is ready.</p>
<p class=3D"last"><code>path</code> is an absolute path to the file.</p>
</td>
</tr>
<tr><td>log_file</td>
<td>path</td>
<td><p class=3D"first">Called when writing to a <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#log-file">log file</a> is ready.</p>
<p class=3D"last"><code>path</code> is an absolute path to the file.</p>
</td>
</tr>
<tr><td>report_file</td>
<td>path</td>
<td><p class=3D"first">Called when writing to a <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#report-file">report file</a> is ready.</p>
<p class=3D"last"><code>path</code> is an absolute path to the file.</p>
</td>
</tr>
<tr><td>xunit_file</td>
<td>path</td>
<td><p class=3D"first">Called when writing to an <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#xunit-file">xunit file</a> is ready.</p>
<p class=3D"last"><code>path</code> is an absolute path to the file.</p>
</td>
</tr>
<tr><td>debug_file</td>
<td>path</td>
<td><p class=3D"first">Called when writing to a <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#debug-file">debug file</a> is ready.</p>
<p class=3D"last"><code>path</code> is an absolute path to the file.</p>
</td>
</tr>
<tr><td>close</td>
<td>&nbsp;</td>
<td><p class=3D"first">Called when the whole test execution ends.</p>
<p class=3D"last">With <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#library-li=
steners">library listeners</a> called when the library goes out
of scope.</p>
</td>
</tr>
</tbody>
</table>
<p>The available methods and their arguments are also shown in a formal Jav=
a
interface specification below. Contents of the <code>java.util.Map attribut=
es</code> are
as in the table above.  It should be remembered that a listener <em>does no=
t</em> need
to implement any explicit interface or have all these methods.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kd">public</span>=
 <span class=3D"kd">interface</span> <span class=3D"nc">RobotListenerInterf=
ace</span> <span class=3D"o">{</span>
    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"kt">int</span> <span class=3D"n">=
ROBOT_LISTENER_API_VERSION</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">2</span><span class=3D"o">;</span>
    <span class=3D"kt">void</span> <span class=3D"nf">startSuite</span><spa=
n class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">nam=
e</span><span class=3D"o">,</span> <span class=3D"n">java</span><span class=
=3D"o">.</span><span class=3D"na">util</span><span class=3D"o">.</span><spa=
n class=3D"na">Map</span> <span class=3D"n">attributes</span><span class=3D=
"o">);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">endSuite</span><span =
class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">name<=
/span><span class=3D"o">,</span> <span class=3D"n">java</span><span class=
=3D"o">.</span><span class=3D"na">util</span><span class=3D"o">.</span><spa=
n class=3D"na">Map</span> <span class=3D"n">attributes</span><span class=3D=
"o">);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">startTest</span><span=
 class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">name=
</span><span class=3D"o">,</span> <span class=3D"n">java</span><span class=
=3D"o">.</span><span class=3D"na">util</span><span class=3D"o">.</span><spa=
n class=3D"na">Map</span> <span class=3D"n">attributes</span><span class=3D=
"o">);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">endTest</span><span c=
lass=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">name</=
span><span class=3D"o">,</span> <span class=3D"n">java</span><span class=3D=
"o">.</span><span class=3D"na">util</span><span class=3D"o">.</span><span c=
lass=3D"na">Map</span> <span class=3D"n">attributes</span><span class=3D"o"=
>);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">startKeyword</span><s=
pan class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">n=
ame</span><span class=3D"o">,</span> <span class=3D"n">java</span><span cla=
ss=3D"o">.</span><span class=3D"na">util</span><span class=3D"o">.</span><s=
pan class=3D"na">Map</span> <span class=3D"n">attributes</span><span class=
=3D"o">);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">endKeyword</span><spa=
n class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">nam=
e</span><span class=3D"o">,</span> <span class=3D"n">java</span><span class=
=3D"o">.</span><span class=3D"na">util</span><span class=3D"o">.</span><spa=
n class=3D"na">Map</span> <span class=3D"n">attributes</span><span class=3D=
"o">);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">logMessage</span><spa=
n class=3D"o">(</span><span class=3D"n">java</span><span class=3D"o">.</spa=
n><span class=3D"na">util</span><span class=3D"o">.</span><span class=3D"na=
">Map</span> <span class=3D"n">message</span><span class=3D"o">);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">message</span><span c=
lass=3D"o">(</span><span class=3D"n">java</span><span class=3D"o">.</span><=
span class=3D"na">util</span><span class=3D"o">.</span><span class=3D"na">M=
ap</span> <span class=3D"n">message</span><span class=3D"o">);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">outputFile</span><spa=
n class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">pat=
h</span><span class=3D"o">);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">logFile</span><span c=
lass=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">path</=
span><span class=3D"o">);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">reportFile</span><spa=
n class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">pat=
h</span><span class=3D"o">);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">debugFile</span><span=
 class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n">path=
</span><span class=3D"o">);</span>
    <span class=3D"kt">void</span> <span class=3D"nf">close</span><span cla=
ss=3D"o">();</span>
<span class=3D"o">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"listener-version-3">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id850">Listener version 3</a></h4>
<p>Listener version 3 has mostly the same methods as <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#listener-version-2">listener version 2</a>
but arguments of the methods related to test execution are different.
This API gets actual running and result model objects used by Robot
Framework itself, and listeners can both directly query information
they need and also change the model objects on the fly.</p>
<p>Listener version 3 was introduced in Robot Framework 3.0. At least
initially it does not have all methods that the version 2 has. The
main reason is that <a class=3D"reference external" href=3D"https://github.=
com/robotframework/robotframework/issues/1208#issuecomment-164910769">suita=
ble model objects are not available internally</a>.
The <code>close</code> method and methods related to output files are calle=
d exactly
same way in both versions.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Methods in the listener API 3</caption>
<colgroup>
<col width=3D"18%">
<col width=3D"18%">
<col width=3D"64%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Method</th>
<th class=3D"head">Arguments</th>
<th class=3D"head">Documentation</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>start_suite</td>
<td>data, result</td>
<td><p class=3D"first">Called when a test suite starts.</p>
<p class=3D"last"><code>data</code> and <code>result</code> are model objec=
ts representing
the <a class=3D"reference external" href=3D"http://robot-framework.readthed=
ocs.org/en/master/autodoc/robot.running.html#robot.running.model.TestSuite"=
>executed test suite</a> and <a class=3D"reference external" href=3D"http:/=
/robot-framework.readthedocs.org/en/master/autodoc/robot.result.html#robot.=
result.model.TestSuite">its
execution results</a>, respectively.</p>
</td>
</tr>
<tr><td>end_suite</td>
<td>data, result</td>
<td><p class=3D"first">Called when a test suite ends.</p>
<p class=3D"last">Same arguments as with <code>start_suite</code>.</p>
</td>
</tr>
<tr><td>start_test</td>
<td>data, result</td>
<td><p class=3D"first">Called when a test case starts.</p>
<p class=3D"last"><code>data</code> and <code>result</code> are model objec=
ts representing
the <a class=3D"reference external" href=3D"http://robot-framework.readthed=
ocs.org/en/master/autodoc/robot.running.html#robot.running.model.TestCase">=
executed test case</a> and <a class=3D"reference external" href=3D"http://r=
obot-framework.readthedocs.org/en/master/autodoc/robot.result.html#robot.re=
sult.model.TestCase">its
execution results</a>, respectively.</p>
</td>
</tr>
<tr><td>end_test</td>
<td>data, result</td>
<td><p class=3D"first">Called when a test case ends.</p>
<p class=3D"last">Same arguments as with <code>start_test</code>.</p>
</td>
</tr>
<tr><td>start_keyword</td>
<td>N/A</td>
<td>Not implemented in RF 3.0.</td>
</tr>
<tr><td>end_keyword</td>
<td>N/A</td>
<td>Not implemented in RF 3.0.</td>
</tr>
<tr><td>log_message</td>
<td>message</td>
<td><p class=3D"first">Called when an executed keyword writes a log message=
.
<code>message</code> is a model object representing the <a class=3D"referen=
ce external" href=3D"http://robot-framework.readthedocs.org/en/master/autod=
oc/robot.result.html#robot.result.model.Message">logged
message</a>.</p>
<p class=3D"last">This method is not called if the message has level below
the current <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#log-levels">threshold=
 level</a>.</p>
</td>
</tr>
<tr><td>message</td>
<td>message</td>
<td><p class=3D"first">Called when the framework itself writes a <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#system-log">syslog</a> message.</p>
<p class=3D"last"><code>message</code> is same object as with <code>log_mes=
sage</code>.</p>
</td>
</tr>
<tr><td>library_import</td>
<td>N/A</td>
<td>Not implemented in RF 3.0.</td>
</tr>
<tr><td>resource_import</td>
<td>N/A</td>
<td>Not implemented in RF 3.0.</td>
</tr>
<tr><td>variables_import</td>
<td>N/A</td>
<td>Not implemented in RF 3.0.</td>
</tr>
<tr><td>output_file</td>
<td>path</td>
<td><p class=3D"first">Called when writing to an <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#output-file">output file</a> is ready.</p>
<p class=3D"last"><code>path</code> is an absolute path to the file.</p>
</td>
</tr>
<tr><td>log_file</td>
<td>path</td>
<td><p class=3D"first">Called when writing to a <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#log-file">log file</a> is ready.</p>
<p class=3D"last"><code>path</code> is an absolute path to the file.</p>
</td>
</tr>
<tr><td>report_file</td>
<td>path</td>
<td><p class=3D"first">Called when writing to a <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#report-file">report file</a> is ready.</p>
<p class=3D"last"><code>path</code> is an absolute path to the file.</p>
</td>
</tr>
<tr><td>xunit_file</td>
<td>path</td>
<td><p class=3D"first">Called when writing to an <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#xunit-file">xunit file</a> is ready.</p>
<p class=3D"last"><code>path</code> is an absolute path to the file.</p>
</td>
</tr>
<tr><td>debug_file</td>
<td>path</td>
<td><p class=3D"first">Called when writing to a <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#debug-file">debug file</a> is ready.</p>
<p class=3D"last"><code>path</code> is an absolute path to the file.</p>
</td>
</tr>
<tr><td>close</td>
<td>&nbsp;</td>
<td><p class=3D"first">Called when the whole test execution ends.</p>
<p class=3D"last">With <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#library-li=
steners">library listeners</a> called when the library goes out
of scope.</p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class=3D"section" id=3D"listeners-logging">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id851">4.3.4&nbsp;&nbsp;&nbsp;Listen=
ers logging</a></h3>
<p>Robot Framework offers a <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#progr=
ammatic-logging-apis">programmatic logging APIs</a> that listeners can
utilize. There are some limitations, however, and how different listener
methods can log messages is explained in the table below.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>How listener methods can log</caption>
<colgroup>
<col width=3D"30%">
<col width=3D"70%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Methods</th>
<th class=3D"head">Explanation</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>start_keyword,
end_keyword,
log_message</td>
<td>Messages are logged to the normal <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#log-file">log file</a>
under the executed keyword.</td>
</tr>
<tr><td>start_suite,
end_suite,
start_test, end_test</td>
<td>Messages are logged to the <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#sy=
stem-log">syslog</a>. Warnings are
shown also in the <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#errors-and-warn=
ings-during-execution">execution errors</a> section of
the normal log file.</td>
</tr>
<tr><td>message</td>
<td>Messages are normally logged to the syslog. If
this method is used while a keyword is executing,
messages are logged to the normal log file.</td>
</tr>
<tr><td>Other methods</td>
<td>Messages are only logged to the syslog.</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">To avoid recursion, messages logged by listeners are not =
sent to
listener methods <code>log_message</code> and <code>message</code>.</p>
</div>
</div>
<div class=3D"section" id=3D"listener-examples">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id852">4.3.5&nbsp;&nbsp;&nbsp;Listen=
er examples</a></h3>
<p>This section contains examples using the listener interface. There are
first examples that just receive information from Robot Framework and then
examples that modify executed tests and created results.</p>
<div class=3D"section" id=3D"getting-information">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id853">Getting information</a></h4>
<p>The first example is implemented as Python module and uses the <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#listener-version-2">listener
version 2</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"sd">"""Listener t=
hat stops execution if a test fails."""</span>

<span class=3D"n">ROBOT_LISTENER_API_VERSION</span> <span class=3D"o">=3D</=
span> <span class=3D"mi">2</span>

<span class=3D"k">def</span> <span class=3D"nf">end_test</span><span class=
=3D"p">(</span><span class=3D"n">name</span><span class=3D"p">,</span> <spa=
n class=3D"n">attrs</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"n">attrs</span><span class=
=3D"p">[</span><span class=3D"s1">'status'</span><span class=3D"p">]</span>=
 <span class=3D"o">=3D=3D</span> <span class=3D"s1">'FAIL'</span><span clas=
s=3D"p">:</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'Test "</span><span class=3D"si">%s</span><span class=3D"s1">" fail=
ed: </span><span class=3D"si">%s</span><span class=3D"s1">'</span> <span cl=
ass=3D"o">%</span> <span class=3D"p">(</span><span class=3D"n">name</span><=
span class=3D"p">,</span> <span class=3D"n">attrs</span><span class=3D"p">[=
</span><span class=3D"s1">'message'</span><span class=3D"p">]))</span>
        <span class=3D"nb">raw_input</span><span class=3D"p">(</span><span =
class=3D"s1">'Press enter to continue.'</span><span class=3D"p">)</span>
</pre></div>
<p>If the above example would be saved to, for example, <span class=3D"file=
">PauseExecution.py</span>
file, it could be used from the command line like this:</p>
<pre class=3D"literal-block">robot --listener path/to/PauseExecution.py tes=
ts.robot
</pre>
<p>The same example could also be implemented also using the newer
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#listener-version-3">listener vers=
ion 3</a> and used exactly the same way from the command line.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"sd">"""Listener t=
hat stops execution if a test fails."""</span>

<span class=3D"n">ROBOT_LISTENER_API_VERSION</span> <span class=3D"o">=3D</=
span> <span class=3D"mi">3</span>

<span class=3D"k">def</span> <span class=3D"nf">end_test</span><span class=
=3D"p">(</span><span class=3D"n">data</span><span class=3D"p">,</span> <spa=
n class=3D"n">result</span><span class=3D"p">):</span>
    <span class=3D"k">if</span> <span class=3D"ow">not</span> <span class=
=3D"n">result</span><span class=3D"o">.</span><span class=3D"n">passed</spa=
n><span class=3D"p">:</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'Test "</span><span class=3D"si">%s</span><span class=3D"s1">" fail=
ed: </span><span class=3D"si">%s</span><span class=3D"s1">'</span> <span cl=
ass=3D"o">%</span> <span class=3D"p">(</span><span class=3D"n">result</span=
><span class=3D"o">.</span><span class=3D"n">name</span><span class=3D"p">,=
</span> <span class=3D"n">result</span><span class=3D"o">.</span><span clas=
s=3D"n">message</span><span class=3D"p">))</span>
        <span class=3D"nb">raw_input</span><span class=3D"p">(</span><span =
class=3D"s1">'Press enter to continue.'</span><span class=3D"p">)</span>
</pre></div>
<p>The next example, which still uses Python, is slightly more complicated.=
 It
writes all the information it gets into a text file in a temporary director=
y
without much formatting. The filename may be given from the command line, b=
ut
also has a default value. Note that in real usage, the <a class=3D"referenc=
e internal" href=3D"http://robotframework.org/robotframework/latest/RobotFr=
ameworkUserGuide.html#debug-file">debug file</a>
functionality available through the command line option <span class=3D"opti=
on">--debugfile</span> is
probably more useful than this example.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">os.path</span>
<span class=3D"kn">import</span> <span class=3D"nn">tempfile</span>


<span class=3D"k">class</span> <span class=3D"nc">PythonListener</span><spa=
n class=3D"p">:</span>
    <span class=3D"n">ROBOT_LISTENER_API_VERSION</span> <span class=3D"o">=
=3D</span> <span class=3D"mi">2</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">filename</span><span class=3D"o">=3D</span><span class=3D=
"s1">'listen.txt'</span><span class=3D"p">):</span>
        <span class=3D"n">outpath</span> <span class=3D"o">=3D</span> <span=
 class=3D"n">os</span><span class=3D"o">.</span><span class=3D"n">path</spa=
n><span class=3D"o">.</span><span class=3D"n">join</span><span class=3D"p">=
(</span><span class=3D"n">tempfile</span><span class=3D"o">.</span><span cl=
ass=3D"n">gettempdir</span><span class=3D"p">(),</span> <span class=3D"n">f=
ilename</span><span class=3D"p">)</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">outfile</span> <span class=3D"o">=3D</span> <span class=3D"nb">open<=
/span><span class=3D"p">(</span><span class=3D"n">outpath</span><span class=
=3D"p">,</span> <span class=3D"s1">'w'</span><span class=3D"p">)</span>

    <span class=3D"k">def</span> <span class=3D"nf">start_suite</span><span=
 class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</spa=
n> <span class=3D"n">name</span><span class=3D"p">,</span> <span class=3D"n=
">attrs</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">outfile</span><span class=3D"o">.</span><span class=3D"n">write</spa=
n><span class=3D"p">(</span><span class=3D"s2">"</span><span class=3D"si">%=
s</span><span class=3D"s2"> '</span><span class=3D"si">%s</span><span class=
=3D"s2">'</span><span class=3D"se">\n</span><span class=3D"s2">"</span> <sp=
an class=3D"o">%</span> <span class=3D"p">(</span><span class=3D"n">name</s=
pan><span class=3D"p">,</span> <span class=3D"n">attrs</span><span class=3D=
"p">[</span><span class=3D"s1">'doc'</span><span class=3D"p">]))</span>

    <span class=3D"k">def</span> <span class=3D"nf">start_test</span><span =
class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span=
> <span class=3D"n">name</span><span class=3D"p">,</span> <span class=3D"n"=
>attrs</span><span class=3D"p">):</span>
        <span class=3D"n">tags</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"s1">' '</span><span class=3D"o">.</span><span class=3D"n">join</span=
><span class=3D"p">(</span><span class=3D"n">attrs</span><span class=3D"p">=
[</span><span class=3D"s1">'tags'</span><span class=3D"p">])</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">outfile</span><span class=3D"o">.</span><span class=3D"n">write</spa=
n><span class=3D"p">(</span><span class=3D"s2">"- </span><span class=3D"si"=
>%s</span><span class=3D"s2"> '</span><span class=3D"si">%s</span><span cla=
ss=3D"s2">' [ </span><span class=3D"si">%s</span><span class=3D"s2"> ] :: "=
</span> <span class=3D"o">%</span> <span class=3D"p">(</span><span class=3D=
"n">name</span><span class=3D"p">,</span> <span class=3D"n">attrs</span><sp=
an class=3D"p">[</span><span class=3D"s1">'doc'</span><span class=3D"p">],<=
/span> <span class=3D"n">tags</span><span class=3D"p">))</span>

    <span class=3D"k">def</span> <span class=3D"nf">end_test</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">name</span><span class=3D"p">,</span> <span class=3D"n">a=
ttrs</span><span class=3D"p">):</span>
        <span class=3D"k">if</span> <span class=3D"n">attrs</span><span cla=
ss=3D"p">[</span><span class=3D"s1">'status'</span><span class=3D"p">]</spa=
n> <span class=3D"o">=3D=3D</span> <span class=3D"s1">'PASS'</span><span cl=
ass=3D"p">:</span>
            <span class=3D"bp">self</span><span class=3D"o">.</span><span c=
lass=3D"n">outfile</span><span class=3D"o">.</span><span class=3D"n">write<=
/span><span class=3D"p">(</span><span class=3D"s1">'PASS</span><span class=
=3D"se">\n</span><span class=3D"s1">'</span><span class=3D"p">)</span>
        <span class=3D"k">else</span><span class=3D"p">:</span>
            <span class=3D"bp">self</span><span class=3D"o">.</span><span c=
lass=3D"n">outfile</span><span class=3D"o">.</span><span class=3D"n">write<=
/span><span class=3D"p">(</span><span class=3D"s1">'FAIL: </span><span clas=
s=3D"si">%s</span><span class=3D"se">\n</span><span class=3D"s1">'</span> <=
span class=3D"o">%</span> <span class=3D"n">attrs</span><span class=3D"p">[=
</span><span class=3D"s1">'message'</span><span class=3D"p">])</span>

     <span class=3D"k">def</span> <span class=3D"nf">end_suite</span><span =
class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span=
> <span class=3D"n">name</span><span class=3D"p">,</span> <span class=3D"n"=
>attrs</span><span class=3D"p">):</span>
         <span class=3D"bp">self</span><span class=3D"o">.</span><span clas=
s=3D"n">outfile</span><span class=3D"o">.</span><span class=3D"n">write</sp=
an><span class=3D"p">(</span><span class=3D"s1">'</span><span class=3D"si">=
%s</span><span class=3D"se">\n</span><span class=3D"si">%s</span><span clas=
s=3D"se">\n</span><span class=3D"s1">'</span> <span class=3D"o">%</span> <s=
pan class=3D"p">(</span><span class=3D"n">attrs</span><span class=3D"p">[</=
span><span class=3D"s1">'status'</span><span class=3D"p">],</span> <span cl=
ass=3D"n">attrs</span><span class=3D"p">[</span><span class=3D"s1">'message=
'</span><span class=3D"p">]))</span>

     <span class=3D"k">def</span> <span class=3D"nf">close</span><span clas=
s=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
         <span class=3D"bp">self</span><span class=3D"o">.</span><span clas=
s=3D"n">outfile</span><span class=3D"o">.</span><span class=3D"n">close</sp=
an><span class=3D"p">()</span>
</pre></div>
<p>The following example implements the same functionality as the previous =
one,
but uses Java instead of Python.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">java.io.*</span><span class=3D"o">;</span>
<span class=3D"kn">import</span> <span class=3D"nn">java.util.Map</span><sp=
an class=3D"o">;</span>
<span class=3D"kn">import</span> <span class=3D"nn">java.util.List</span><s=
pan class=3D"o">;</span>


<span class=3D"kd">public</span> <span class=3D"kd">class</span> <span clas=
s=3D"nc">JavaListener</span> <span class=3D"o">{</span>
    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"kt">int</span> <span class=3D"n">=
ROBOT_LISTENER_API_VERSION</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">2</span><span class=3D"o">;</span>
    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"n">String</span> <span class=3D"n=
">DEFAULT_FILENAME</span> <span class=3D"o">=3D</span> <span class=3D"s">"l=
isten_java.txt"</span><span class=3D"o">;</span>
    <span class=3D"kd">private</span> <span class=3D"n">BufferedWriter</spa=
n> <span class=3D"n">outfile</span> <span class=3D"o">=3D</span> <span clas=
s=3D"kc">null</span><span class=3D"o">;</span>

    <span class=3D"kd">public</span> <span class=3D"nf">JavaListener</span>=
<span class=3D"o">()</span> <span class=3D"kd">throws</span> <span class=3D=
"n">IOException</span> <span class=3D"o">{</span>
        <span class=3D"k">this</span><span class=3D"o">(</span><span class=
=3D"n">DEFAULT_FILENAME</span><span class=3D"o">);</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"nf">JavaListener</span>=
<span class=3D"o">(</span><span class=3D"n">String</span> <span class=3D"n"=
>filename</span><span class=3D"o">)</span> <span class=3D"kd">throws</span>=
 <span class=3D"n">IOException</span> <span class=3D"o">{</span>
        <span class=3D"n">String</span> <span class=3D"n">tmpdir</span> <sp=
an class=3D"o">=3D</span> <span class=3D"n">System</span><span class=3D"o">=
.</span><span class=3D"na">getProperty</span><span class=3D"o">(</span><spa=
n class=3D"s">"java.io.tmpdir"</span><span class=3D"o">);</span>
        <span class=3D"n">String</span> <span class=3D"n">sep</span> <span =
class=3D"o">=3D</span> <span class=3D"n">System</span><span class=3D"o">.</=
span><span class=3D"na">getProperty</span><span class=3D"o">(</span><span c=
lass=3D"s">"file.separator"</span><span class=3D"o">);</span>
        <span class=3D"n">String</span> <span class=3D"n">outpath</span> <s=
pan class=3D"o">=3D</span> <span class=3D"n">tmpdir</span> <span class=3D"o=
">+</span> <span class=3D"n">sep</span> <span class=3D"o">+</span> <span cl=
ass=3D"n">filename</span><span class=3D"o">;</span>
        <span class=3D"n">outfile</span> <span class=3D"o">=3D</span> <span=
 class=3D"k">new</span> <span class=3D"n">BufferedWriter</span><span class=
=3D"o">(</span><span class=3D"k">new</span> <span class=3D"n">FileWriter</s=
pan><span class=3D"o">(</span><span class=3D"n">outpath</span><span class=
=3D"o">));</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">startSuite</span><span class=3D"o">(</span><span class=3D"n">St=
ring</span> <span class=3D"n">name</span><span class=3D"o">,</span> <span c=
lass=3D"n">Map</span> <span class=3D"n">attrs</span><span class=3D"o">)</sp=
an> <span class=3D"kd">throws</span> <span class=3D"n">IOException</span> <=
span class=3D"o">{</span>
        <span class=3D"n">outfile</span><span class=3D"o">.</span><span cla=
ss=3D"na">write</span><span class=3D"o">(</span><span class=3D"n">name</spa=
n> <span class=3D"o">+</span> <span class=3D"s">" '"</span> <span class=3D"=
o">+</span> <span class=3D"n">attrs</span><span class=3D"o">.</span><span c=
lass=3D"na">get</span><span class=3D"o">(</span><span class=3D"s">"doc"</sp=
an><span class=3D"o">)</span> <span class=3D"o">+</span> <span class=3D"s">=
"'\n"</span><span class=3D"o">);</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">startTest</span><span class=3D"o">(</span><span class=3D"n">Str=
ing</span> <span class=3D"n">name</span><span class=3D"o">,</span> <span cl=
ass=3D"n">Map</span> <span class=3D"n">attrs</span><span class=3D"o">)</spa=
n> <span class=3D"kd">throws</span> <span class=3D"n">IOException</span> <s=
pan class=3D"o">{</span>
        <span class=3D"n">outfile</span><span class=3D"o">.</span><span cla=
ss=3D"na">write</span><span class=3D"o">(</span><span class=3D"s">"- "</spa=
n> <span class=3D"o">+</span> <span class=3D"n">name</span> <span class=3D"=
o">+</span> <span class=3D"s">" '"</span> <span class=3D"o">+</span> <span =
class=3D"n">attrs</span><span class=3D"o">.</span><span class=3D"na">get</s=
pan><span class=3D"o">(</span><span class=3D"s">"doc"</span><span class=3D"=
o">)</span> <span class=3D"o">+</span> <span class=3D"s">"' [ "</span><span=
 class=3D"o">);</span>
        <span class=3D"n">List</span> <span class=3D"n">tags</span> <span c=
lass=3D"o">=3D</span> <span class=3D"o">(</span><span class=3D"n">List</spa=
n><span class=3D"o">)</span><span class=3D"n">attrs</span><span class=3D"o"=
>.</span><span class=3D"na">get</span><span class=3D"o">(</span><span class=
=3D"s">"tags"</span><span class=3D"o">);</span>
        <span class=3D"k">for</span> <span class=3D"o">(</span><span class=
=3D"kt">int</span> <span class=3D"n">i</span><span class=3D"o">=3D</span><s=
pan class=3D"mi">0</span><span class=3D"o">;</span> <span class=3D"n">i</sp=
an> <span class=3D"o">&lt;</span> <span class=3D"n">tags</span><span class=
=3D"o">.</span><span class=3D"na">size</span><span class=3D"o">();</span> <=
span class=3D"n">i</span><span class=3D"o">++)</span> <span class=3D"o">{</=
span>
           <span class=3D"n">outfile</span><span class=3D"o">.</span><span =
class=3D"na">write</span><span class=3D"o">(</span><span class=3D"n">tags</=
span><span class=3D"o">.</span><span class=3D"na">get</span><span class=3D"=
o">(</span><span class=3D"n">i</span><span class=3D"o">)</span> <span class=
=3D"o">+</span> <span class=3D"s">" "</span><span class=3D"o">);</span>
        <span class=3D"o">}</span>
        <span class=3D"n">outfile</span><span class=3D"o">.</span><span cla=
ss=3D"na">write</span><span class=3D"o">(</span><span class=3D"s">" ] :: "<=
/span><span class=3D"o">);</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">endTest</span><span class=3D"o">(</span><span class=3D"n">Strin=
g</span> <span class=3D"n">name</span><span class=3D"o">,</span> <span clas=
s=3D"n">Map</span> <span class=3D"n">attrs</span><span class=3D"o">)</span>=
 <span class=3D"kd">throws</span> <span class=3D"n">IOException</span> <spa=
n class=3D"o">{</span>
        <span class=3D"n">String</span> <span class=3D"n">status</span> <sp=
an class=3D"o">=3D</span> <span class=3D"n">attrs</span><span class=3D"o">.=
</span><span class=3D"na">get</span><span class=3D"o">(</span><span class=
=3D"s">"status"</span><span class=3D"o">).</span><span class=3D"na">toStrin=
g</span><span class=3D"o">();</span>
        <span class=3D"k">if</span> <span class=3D"o">(</span><span class=
=3D"n">status</span><span class=3D"o">.</span><span class=3D"na">equals</sp=
an><span class=3D"o">(</span><span class=3D"s">"PASS"</span><span class=3D"=
o">))</span> <span class=3D"o">{</span>
            <span class=3D"n">outfile</span><span class=3D"o">.</span><span=
 class=3D"na">write</span><span class=3D"o">(</span><span class=3D"s">"PASS=
\n"</span><span class=3D"o">);</span>
        <span class=3D"o">}</span>
        <span class=3D"k">else</span> <span class=3D"o">{</span>
            <span class=3D"n">outfile</span><span class=3D"o">.</span><span=
 class=3D"na">write</span><span class=3D"o">(</span><span class=3D"s">"FAIL=
: "</span> <span class=3D"o">+</span> <span class=3D"n">attrs</span><span c=
lass=3D"o">.</span><span class=3D"na">get</span><span class=3D"o">(</span><=
span class=3D"s">"message"</span><span class=3D"o">)</span> <span class=3D"=
o">+</span> <span class=3D"s">"\n"</span><span class=3D"o">);</span>
        <span class=3D"o">}</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">endSuite</span><span class=3D"o">(</span><span class=3D"n">Stri=
ng</span> <span class=3D"n">name</span><span class=3D"o">,</span> <span cla=
ss=3D"n">Map</span> <span class=3D"n">attrs</span><span class=3D"o">)</span=
> <span class=3D"kd">throws</span> <span class=3D"n">IOException</span> <sp=
an class=3D"o">{</span>
        <span class=3D"n">outfile</span><span class=3D"o">.</span><span cla=
ss=3D"na">write</span><span class=3D"o">(</span><span class=3D"n">attrs</sp=
an><span class=3D"o">.</span><span class=3D"na">get</span><span class=3D"o"=
>(</span><span class=3D"s">"status"</span><span class=3D"o">)</span> <span =
class=3D"o">+</span> <span class=3D"s">"\n"</span> <span class=3D"o">+</spa=
n> <span class=3D"n">attrs</span><span class=3D"o">.</span><span class=3D"n=
a">get</span><span class=3D"o">(</span><span class=3D"s">"message"</span><s=
pan class=3D"o">)</span> <span class=3D"o">+</span> <span class=3D"s">"\n"<=
/span><span class=3D"o">);</span>
    <span class=3D"o">}</span>

    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">close</span><span class=3D"o">()</span> <span class=3D"kd">thro=
ws</span> <span class=3D"n">IOException</span> <span class=3D"o">{</span>
        <span class=3D"n">outfile</span><span class=3D"o">.</span><span cla=
ss=3D"na">close</span><span class=3D"o">();</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"modifying-execution-and-results">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id854">Modifying execution and resul=
ts</a></h4>
<p>These examples illustrate how to modify the executed tests and suites
as well as the execution results. All these examples require using
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#listener-version-3">listener =
version 3</a>.</p>
<div class=3D"section" id=3D"modifying-executed-suites-and-tests">
<h5>Modifying executed suites and tests</h5>
<p>Changing what is executed requires modifying the model object containing
the executed <a class=3D"reference external" href=3D"http://robot-framework=
.readthedocs.org/en/master/autodoc/robot.running.html#robot.running.model.T=
estSuite">test suite</a> or <a class=3D"reference external" href=3D"http://=
robot-framework.readthedocs.org/en/master/autodoc/robot.running.html#robot.=
running.model.TestCase">test case</a> objects passed as the first argument =
to <code>start_suite</code>
and <code>start_test</code> methods. This is illustrated by the example bel=
ow that
adds a new test to each executed test suite and a new keyword to each test.=
</p>
<div class=3D"highlight"><pre><span></span><span class=3D"n">ROBOT_LISTENER=
_API_VERSION</span> <span class=3D"o">=3D</span> <span class=3D"mi">3</span=
>

<span class=3D"k">def</span> <span class=3D"nf">start_suite</span><span cla=
ss=3D"p">(</span><span class=3D"n">suite</span><span class=3D"p">,</span> <=
span class=3D"n">result</span><span class=3D"p">):</span>
    <span class=3D"n">suite</span><span class=3D"o">.</span><span class=3D"=
n">tests</span><span class=3D"o">.</span><span class=3D"n">create</span><sp=
an class=3D"p">(</span><span class=3D"n">name</span><span class=3D"o">=3D</=
span><span class=3D"s1">'New test'</span><span class=3D"p">)</span>

<span class=3D"k">def</span> <span class=3D"nf">start_test</span><span clas=
s=3D"p">(</span><span class=3D"n">test</span><span class=3D"p">,</span> <sp=
an class=3D"n">result</span><span class=3D"p">):</span>
    <span class=3D"n">test</span><span class=3D"o">.</span><span class=3D"n=
">keywords</span><span class=3D"o">.</span><span class=3D"n">create</span><=
span class=3D"p">(</span><span class=3D"n">name</span><span class=3D"o">=3D=
</span><span class=3D"s1">'Log'</span><span class=3D"p">,</span> <span clas=
s=3D"n">args</span><span class=3D"o">=3D</span><span class=3D"p">[</span><s=
pan class=3D"s1">'Keyword added by listener!'</span><span class=3D"p">])</s=
pan>
</pre></div>
<p>Trying to modify execution in <code>end_suite</code> or <code>end_test</=
code> methods does not work,
simply because that suite or test has already been executed. Trying to modi=
fy
the name, documentation or other similar metadata of the current suite or
test in <code>start_suite</code> or <code>start_test</code> method does not=
 work either, because
the corresponding result object has already been created. Only changes to
child tests or keywords actually have an effect.</p>
<p>This API is very similar to the <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#pre-run-modifier">pre-run modifier</a> API that can be used
to modify suites and tests before the whole test execution starts. The main
benefit of using the listener API is that modifications can be done
dynamically based on execution results or otherwise. This allows, for examp=
le,
interesting possibilities for model based testing.</p>
<p>Although the listener interface is not built on top of Robot Framework's
internal <a class=3D"reference external" href=3D"http://robot-framework.rea=
dthedocs.org/en/master/autodoc/robot.model.html#module-robot.model.visitor"=
>visitor interface</a> similarly as the pre-run modifier API,
listeners can still use the visitors interface themselves. For example,
the <code>SelectEveryXthTest</code> visitor used in <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#pre-run-modifier">pre-run modifier</a> examples could
be used like this:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">from</span> <=
span class=3D"nn">SelectEveryXthTest</span> <span class=3D"kn">import</span=
> <span class=3D"n">SelectEveryXthTest</span>

<span class=3D"n">ROBOT_LISTENER_API_VERSION</span> <span class=3D"o">=3D</=
span> <span class=3D"mi">3</span>

<span class=3D"k">def</span> <span class=3D"nf">start_suite</span><span cla=
ss=3D"p">(</span><span class=3D"n">suite</span><span class=3D"p">,</span> <=
span class=3D"n">result</span><span class=3D"p">):</span>
    <span class=3D"n">selector</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"n">SelectEveryXthTest</span><span class=3D"p">(</span><span class=3D=
"n">x</span><span class=3D"o">=3D</span><span class=3D"mi">2</span><span cl=
ass=3D"p">)</span>
    <span class=3D"n">suite</span><span class=3D"o">.</span><span class=3D"=
n">visit</span><span class=3D"p">(</span><span class=3D"n">selector</span><=
span class=3D"p">)</span>
</pre></div>
</div>
<div class=3D"section" id=3D"modifying-results">
<h5>Modifying results</h5>
<p>Test execution results can be altered by modifying <a class=3D"reference=
 external" href=3D"http://robot-framework.readthedocs.org/en/master/autodoc=
/robot.result.html#robot.result.model.TestSuite">test suite</a> and <a clas=
s=3D"reference external" href=3D"http://robot-framework.readthedocs.org/en/=
master/autodoc/robot.result.html#robot.result.model.TestCase">test case</a>=
 result objects
passed as the second argument to <code>start_suite</code> and <code>start_t=
est</code> methods,
respectively, and by modifying the <a class=3D"reference external" href=3D"=
http://robot-framework.readthedocs.org/en/master/autodoc/robot.result.html#=
robot.result.model.Message">message</a> object passed
to the <code>log_message</code> method. This is demonstrated by the followi=
ng listener
that is implemented as a class.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">ResultModifier</span><span class=3D"p">(</span><span clas=
s=3D"nb">object</span><span class=3D"p">):</span>
    <span class=3D"n">ROBOT_LISTENER_API_VERSION</span> <span class=3D"o">=
=3D</span> <span class=3D"mi">3</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">max_seconds</span><span class=3D"o">=3D</span><span class=
=3D"mi">10</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">max_milliseconds</span> <span class=3D"o">=3D</span> <span class=3D"=
nb">float</span><span class=3D"p">(</span><span class=3D"n">max_seconds</sp=
an><span class=3D"p">)</span> <span class=3D"o">*</span> <span class=3D"mi"=
>1000</span>

    <span class=3D"k">def</span> <span class=3D"nf">start_suite</span><span=
 class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</spa=
n> <span class=3D"n">data</span><span class=3D"p">,</span> <span class=3D"n=
">suite</span><span class=3D"p">):</span>
        <span class=3D"n">suite</span><span class=3D"o">.</span><span class=
=3D"n">doc</span> <span class=3D"o">=3D</span> <span class=3D"s1">'Document=
ation set by listener.'</span>
        <span class=3D"c1"># Information about tests only available via dat=
a at this point.</span>
        <span class=3D"n">smoke_tests</span> <span class=3D"o">=3D</span> <=
span class=3D"p">[</span><span class=3D"n">test</span> <span class=3D"k">fo=
r</span> <span class=3D"n">test</span> <span class=3D"ow">in</span> <span c=
lass=3D"n">data</span><span class=3D"o">.</span><span class=3D"n">tests</sp=
an> <span class=3D"k">if</span> <span class=3D"s1">'smoke'</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">test</span><span class=3D"o">.</span>=
<span class=3D"n">tags</span><span class=3D"p">]</span>
        <span class=3D"n">suite</span><span class=3D"o">.</span><span class=
=3D"n">metadata</span><span class=3D"p">[</span><span class=3D"s1">'Smoke t=
ests'</span><span class=3D"p">]</span> <span class=3D"o">=3D</span> <span c=
lass=3D"nb">len</span><span class=3D"p">(</span><span class=3D"n">smoke_tes=
ts</span><span class=3D"p">)</span>

    <span class=3D"k">def</span> <span class=3D"nf">end_test</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">data</span><span class=3D"p">,</span> <span class=3D"n">t=
est</span><span class=3D"p">):</span>
        <span class=3D"k">if</span> <span class=3D"n">test</span><span clas=
s=3D"o">.</span><span class=3D"n">status</span> <span class=3D"o">=3D=3D</s=
pan> <span class=3D"s1">'PASS'</span> <span class=3D"ow">and</span> <span c=
lass=3D"n">test</span><span class=3D"o">.</span><span class=3D"n">elapsedti=
me</span> <span class=3D"o">&gt;</span> <span class=3D"bp">self</span><span=
 class=3D"o">.</span><span class=3D"n">max_milliseconds</span><span class=
=3D"p">:</span>
            <span class=3D"n">test</span><span class=3D"o">.</span><span cl=
ass=3D"n">status</span> <span class=3D"o">=3D</span> <span class=3D"s1">'FA=
IL'</span>
            <span class=3D"n">test</span><span class=3D"o">.</span><span cl=
ass=3D"n">message</span> <span class=3D"o">=3D</span> <span class=3D"s1">'T=
est execution took too long.'</span>

    <span class=3D"k">def</span> <span class=3D"nf">log_message</span><span=
 class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</spa=
n> <span class=3D"n">msg</span><span class=3D"p">):</span>
        <span class=3D"k">if</span> <span class=3D"n">msg</span><span class=
=3D"o">.</span><span class=3D"n">level</span> <span class=3D"o">=3D=3D</spa=
n> <span class=3D"s1">'WARN'</span> <span class=3D"ow">and</span> <span cla=
ss=3D"ow">not</span> <span class=3D"n">msg</span><span class=3D"o">.</span>=
<span class=3D"n">html</span><span class=3D"p">:</span>
            <span class=3D"n">msg</span><span class=3D"o">.</span><span cla=
ss=3D"n">message</span> <span class=3D"o">=3D</span> <span class=3D"s1">'&l=
t;b style=3D"font-size: 1.5em"&gt;</span><span class=3D"si">%s</span><span =
class=3D"s1">&lt;/b&gt;'</span> <span class=3D"o">%</span> <span class=3D"n=
">msg</span><span class=3D"o">.</span><span class=3D"n">message</span>
            <span class=3D"n">msg</span><span class=3D"o">.</span><span cla=
ss=3D"n">html</span> <span class=3D"o">=3D</span> <span class=3D"bp">True</=
span>
</pre></div>
<p>A limitation is that modifying the name of the current test suite or tes=
t
case is not possible because it has already been written to the <a class=3D=
"reference internal" href=3D"http://robotframework.org/robotframework/lates=
t/RobotFrameworkUserGuide.html#output-xml">output.xml</a>
file when listeners are called. Due to the same reason modifying already
finished tests in the <code>end_suite</code> method has no effect either.</=
p>
<p>This API is very similar to the <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#pre-rebot-modifier">pre-Rebot modifier</a> API that can be used
to modify results before report and log are generated. The main difference =
is
that listeners modify also the created <span class=3D"file">output.xml</spa=
n> file.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"test-libraries-as-listeners">
<span id=3D"library-listeners"></span><h3><a class=3D"toc-backref" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#id855">4.3.6&nbsp;&nbsp;&nbsp;Test libraries as listeners</a></h3>
<p>Sometimes it is useful also for <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#using-test-libraries">test libraries</a> to get notifications about
test execution. This allows them, for example, to perform certain clean-up
activities automatically when a test suite or the whole test execution ends=
.</p>
<div class=3D"section" id=3D"registering-listener">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id856">Registering listener</a></h4>
<p>A test library can register a listener by using <code>ROBOT_LIBRARY_LIST=
ENER</code>
attribute. The value of this attribute should be an instance of the listene=
r
to use. It may be a totally independent listener or the library itself can
act as a listener. To avoid listener methods to be exposed as keywords in
the latter case, it is possible to prefix them with an underscore.
For example, instead of using <code>end_suite</code> or <code>endSuite</cod=
e>, it is
possible to use <code>_end_suite</code> or <code>_endSuite</code>.</p>
<p>Following examples illustrates using an external listener as well as lib=
rary
acting as a listener itself:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"kn">import</span>=
 <span class=3D"nn">my.project.Listener</span><span class=3D"o">;</span>

<span class=3D"kd">public</span> <span class=3D"kd">class</span> <span clas=
s=3D"nc">JavaLibraryWithExternalListener</span> <span class=3D"o">{</span>
    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"n">Listener</span> <span class=3D=
"n">ROBOT_LIBRARY_LISTENER</span> <span class=3D"o">=3D</span> <span class=
=3D"k">new</span> <span class=3D"n">Listener</span><span class=3D"o">();</s=
pan>
    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"n">String</span> <span class=3D"n=
">ROBOT_LIBRARY_SCOPE</span> <span class=3D"o">=3D</span> <span class=3D"s"=
>"GLOBAL"</span><span class=3D"o">;</span>
    <span class=3D"kd">public</span> <span class=3D"kd">static</span> <span=
 class=3D"kd">final</span> <span class=3D"kt">int</span> <span class=3D"n">=
ROBOT_LISTENER_API_VERSION</span> <span class=3D"o">=3D</span> <span class=
=3D"mi">2</span><span class=3D"o">;</span>

    <span class=3D"c1">// actual library code here ...</span>
<span class=3D"o">}</span>
</pre></div>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">PythonLibraryAsListenerItself</span><span class=3D"p">(</=
span><span class=3D"nb">object</span><span class=3D"p">):</span>
    <span class=3D"n">ROBOT_LIBRARY_SCOPE</span> <span class=3D"o">=3D</spa=
n> <span class=3D"s1">'TEST SUITE'</span>
    <span class=3D"n">ROBOT_LISTENER_API_VERSION</span> <span class=3D"o">=
=3D</span> <span class=3D"mi">2</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">ROBOT_LIBRARY_LISTENER</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"bp">self</span>

    <span class=3D"k">def</span> <span class=3D"nf">_end_suite</span><span =
class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span=
> <span class=3D"n">name</span><span class=3D"p">,</span> <span class=3D"n"=
>attrs</span><span class=3D"p">):</span>
        <span class=3D"k">print</span><span class=3D"p">(</span><span class=
=3D"s1">'Suite </span><span class=3D"si">%s</span><span class=3D"s1"> (</sp=
an><span class=3D"si">%s</span><span class=3D"s1">) ending.'</span> <span c=
lass=3D"o">%</span> <span class=3D"p">(</span><span class=3D"n">name</span>=
<span class=3D"p">,</span> <span class=3D"n">attrs</span><span class=3D"p">=
[</span><span class=3D"s1">'id'</span><span class=3D"p">]))</span>

    <span class=3D"c1"># actual library code here ...</span>
</pre></div>
<p>As the seconds example above already demonstrated, library listeners hav=
e to
specify <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#listener-interface-versio=
ns">listener interface versions</a> using <code>ROBOT_LISTENER_API_VERSION<=
/code>
attribute exactly like any other listener.</p>
<p>Starting from version 2.9, you can also provide any list like object of
instances in the <code>ROBOT_LIBRARY_LISTENER</code> attribute. This will c=
ause all
instances of the list to be registered as listeners.</p>
</div>
<div class=3D"section" id=3D"called-listener-methods">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id857">Called listener methods</a></=
h4>
<p>Library's listener will get notifications about all events in suites whe=
re
the library is imported. In practice this means that <code>start_suite</cod=
e>,
<code>end_suite</code>, <code>start_test</code>, <code>end_test</code>, <co=
de>start_keyword</code>,
<code>end_keyword</code>, <code>log_message</code>, and <code>message</code=
> methods are
called inside those suites.</p>
<p>If the library creates a new listener instance every time when the libra=
ry
itself is instantiated, the actual listener instance to use will change
according to the <a class=3D"reference internal" href=3D"http://robotframew=
ork.org/robotframework/latest/RobotFrameworkUserGuide.html#test-library-sco=
pe">test library scope</a>.
In addition to the previously listed listener methods, <code>close</code>
method is called when the library goes out of the scope.</p>
<p>See <a class=3D"reference internal" href=3D"http://robotframework.org/ro=
botframework/latest/RobotFrameworkUserGuide.html#listener-interface-methods=
">Listener interface methods</a> section above for more information about
all these methods.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"extending-the-robot-framework-jar">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id773">4.4&nbsp;&nbsp;&nbsp;Extendin=
g the Robot Framework Jar</a></h2>
<p>Adding additional test libraries or support code to the Robot Framework =
jar is
quite straightforward using the <tt class=3D"docutils literal">jar</tt> com=
mand included in standard JDK
installation. Python code must be placed in <span class=3D"file">Lib</span>=
 directory inside
the jar and Java code can be placed directly to the root of the jar, accord=
ing
to package structure.</p>
<p>For example, to add Python package <code>mytestlib</code> to the jar, fi=
rst copy the
<span class=3D"file">mytestlib</span> directory under a directory called <s=
pan class=3D"file">Lib</span>, then run
following command in the directory containing <span class=3D"file">Lib</spa=
n>:</p>
<pre class=3D"literal-block">jar uf /path/to/robotframework-2.7.1.jar Lib
</pre>
<p>To add compiled java classes to the jar, you must have a directory struc=
ture
corresponding to the Java package structure and add that recursively to the
zip.</p>
<p>For example, to add class <code>MyLib.class</code>, in package <code>org=
.test</code>,
the file must be in <span class=3D"file">org/test/MyLib.class</span> and yo=
u can execute:</p>
<pre class=3D"literal-block">jar uf /path/to/robotframework-2.7.1.jar org
</pre>
</div>
</div>
<div class=3D"section" id=3D"supporting-tools">
<h1><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id453">5&nbsp;&nbsp;&nbsp;Supporting=
 Tools</a></h1>
<div class=3D"contents local topic" id=3D"id369">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#library-documentation-tool-li=
bdoc" id=3D"id858">5.1&nbsp;&nbsp;&nbsp;Library documentation tool (Libdoc)=
</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-data-documentation-tool-=
testdoc" id=3D"id859">5.2&nbsp;&nbsp;&nbsp;Test data documentation tool (Te=
stdoc)</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-data-clean-up-tool-tidy"=
 id=3D"id860">5.3&nbsp;&nbsp;&nbsp;Test data clean-up tool (Tidy)</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#external-tools" id=3D"id861">=
5.4&nbsp;&nbsp;&nbsp;External tools</a></li>
</ul>
</div>
<div class=3D"section" id=3D"library-documentation-tool-libdoc">
<span id=3D"libdoc"></span><h2><a class=3D"toc-backref" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#id858">5.=
1&nbsp;&nbsp;&nbsp;Library documentation tool (Libdoc)</a></h2>
<div class=3D"contents local topic" id=3D"id370">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#general-usage" id=3D"id862">5=
.1.1&nbsp;&nbsp;&nbsp;General usage</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#writing-documentation" id=3D"=
id863">5.1.2&nbsp;&nbsp;&nbsp;Writing documentation</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#documentation-syntax" id=3D"i=
d864">5.1.3&nbsp;&nbsp;&nbsp;Documentation syntax</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id386" id=3D"id865">5.1.4&nbs=
p;&nbsp;&nbsp;Internal linking</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#representing-arguments" id=3D=
"id866">5.1.5&nbsp;&nbsp;&nbsp;Representing arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#libdoc-example" id=3D"id867">=
5.1.6&nbsp;&nbsp;&nbsp;Libdoc example</a></li>
</ul>
</div>
<p>Libdoc is Robot Framework's built-in tool for generating keyword documen=
tation
for test libraries and resource files in HTML and XML formats. The former
format is suitable for humans and the latter for <a class=3D"reference exte=
rnal" href=3D"https://github.com/robotframework/RIDE">RIDE</a> and other
tools. Libdoc also has few special commands to show library or
resource information on the console.</p>
<p>Documentation can be created for:</p>
<ul class=3D"simple">
<li>test libraries implemented with <a class=3D"reference internal" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#python-libraries">Python</a> or <a class=3D"reference internal" href=3D"=
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.htm=
l#java-libraries">Java</a> using the normal
static library API,</li>
<li>test libraries using the <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#dyna=
mic-libraries">dynamic API</a>, including remote libraries, and</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#resource-files">resource file=
s</a>.</li>
</ul>
<p>Additionally it is possible to use XML spec created by Libdoc
earlier as an input.</p>
<div class=3D"section" id=3D"general-usage">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id862">5.1.1&nbsp;&nbsp;&nbsp;Genera=
l usage</a></h3>
<div class=3D"section" id=3D"id374">
<h4>Synopsis</h4>
<pre class=3D"literal-block">python -m robot.libdoc [options] library_or_re=
source output_file
python -m robot.libdoc [options] library_or_resource list|show|version [nam=
es]
</pre>
</div>
<div class=3D"section" id=3D"options">
<h4>Options</h4>
<blockquote>
<table class=3D"docutils option-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"option">
<col class=3D"description">
</colgroup><tbody valign=3D"top">
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-f</span>, <span class=3D"option">--format <var=
>&lt;html|xml&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Specifies whether to generate HTML or XML output.
If this options is not used, the format is got
from the extension of the output file.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-F</span>, <span class=3D"option">--docformat <=
var>&lt;robot|html|text|rest&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Specifies the source documentation format. Possible
values are Robot Framework's documentation format,
HTML, plain text, and reStructuredText. Default value
can be specified in test library source code and
the initial default value is <code>robot</code>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-N</span>, <span class=3D"option">--name <var>&=
lt;newname&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the name of the documented library or resource.=
</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-V</span>, <span class=3D"option">--version <va=
r>&lt;newversion&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the version of the documented library or
resource. The default value for test libraries is
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#specifying-library-version">got f=
rom the source code</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-P</span>, <span class=3D"option">--pythonpath =
<var>&lt;path&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Additional locations where to search for libraries
and resources similarly as when <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#u=
sing-pythonpath-option">running tests</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-E</span>, <span class=3D"option">--escape <var=
>&lt;what:with&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Deprecated. Use console escape mechanism instead.</t=
d></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">-h</span>, <span class=3D"option">--help</span>=
</kbd></td>
<td>Prints this help.</td></tr>
</tbody>
</table>
</blockquote>
</div>
<div class=3D"section" id=3D"alternative-execution">
<h4>Alternative execution</h4>
<p>Although Libdoc is used only with Python in the synopsis above, it works
also with Jython and IronPython. When documenting Java libraries, Jython is
actually required.</p>
<p>In the synopsis Libdoc is executed as an installed module
(<code>python -m robot.libdoc</code>). In addition to that, it can be run a=
lso as
a script:</p>
<pre class=3D"literal-block">python path/robot/libdoc.py [options] argument=
s
</pre>
<p>Executing as a script can be useful if you have done <a class=3D"referen=
ce internal" href=3D"http://robotframework.org/robotframework/latest/RobotF=
rameworkUserGuide.html#manual-installation">manual installation</a>
or otherwise just have the <span class=3D"file">robot</span> directory with=
 the source code
somewhere in your system.</p>
</div>
<div class=3D"section" id=3D"specifying-library-or-resource-file">
<h4>Specifying library or resource file</h4>
<div class=3D"section" id=3D"python-libraries-and-dynamic-libraries-with-na=
me-or-path">
<h5>Python libraries and dynamic libraries with name or path</h5>
<p>When documenting libraries implemented with Python or that use the
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#dynamic-library-api">dynamic libr=
ary API</a>, it is possible to specify the library either by
using just the library name or path to the library source code.
In the former case the library is searched using the <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#module-search-path">module search path</a>
and its name must be in the same format as in Robot Framework test data.</p=
>
<p>If these libraries require arguments when they are imported, the argumen=
ts
must be catenated with the library name or path using two colons like
<code>MyLibrary::arg1::arg2</code>. If arguments change what keywords the l=
ibrary
provides or otherwise alter its documentation, it might be a good idea to u=
se
<span class=3D"option">--name</span> option to also change the library name=
 accordingly.</p>
</div>
<div class=3D"section" id=3D"java-libraries-with-path">
<h5>Java libraries with path</h5>
<p>A Java test library implemented using the <a class=3D"reference internal=
" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUse=
rGuide.html#creating-static-keywords">static library API</a> can be
specified by giving the path to the source code file containing the
library implementation. When using Java 9 or newer, documentation can be
generated without external dependencies, but with older Java versions the
<span class=3D"file">tools.jar</span>, which is part of the Java JDK distri=
bution, must be found
from the <tt class=3D"docutils literal">CLASSPATH</tt> when Libdoc is execu=
ted. Notice that generating
documentation for Java libraries works only with Jython.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Generating documentation without <span class=3D"file">too=
ls.jar</span> when using
Java 9 or newer is a new feature in Robot Framework 3.1.</p>
</div>
</div>
<div class=3D"section" id=3D"resource-files-with-path">
<h5>Resource files with path</h5>
<p>Resource files must always be specified using a path. If the path does
not exist, resource files are also searched from all directories in
the <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#module-search-path">module se=
arch path</a> similarly as when executing test cases.</p>
</div>
</div>
<div class=3D"section" id=3D"generating-documentation">
<h4>Generating documentation</h4>
<p>When generating documentation in HTML or XML format, the output file mus=
t
be specified as the second argument after the library/resource name or path=
.
Output format is got automatically from the extension but can also be set
using the <span class=3D"option">--format</span> option.</p>
<p>Examples:</p>
<pre class=3D"literal-block">python -m robot.libdoc OperatingSystem Operati=
ngSystem.html
python -m robot.libdoc --name MyLibrary Remote::http://10.0.0.42:8270 MyLib=
rary.xml
python -m robot.libdoc test/resource.html doc/resource_doc.html
jython -m robot.libdoc --version 1.0 MyJavaLibrary.java MyJavaLibrary.html
jython -m robot.libdoc my.organization.DynamicJavaLibrary my.organization.D=
ynamicJavaLibrary.xml
</pre>
</div>
<div class=3D"section" id=3D"viewing-information-on-console">
<h4>Viewing information on console</h4>
<p>Libdoc has three special commands to show information on the console.
These commands are used instead of the name of the output file, and they ca=
n
also take additional arguments.</p>
<dl class=3D"docutils">
<dt><code>list</code></dt>
<dd>List names of the keywords the library/resource contains. Can be
limited to show only certain keywords by passing optional patterns
as arguments. Keyword is listed if its name contains given pattern.</dd>
<dt><code>show</code></dt>
<dd>Show library/resource documentation. Can be limited to show only
certain keywords by passing names as arguments. Keyword is shown if
its name matches any given name. Special argument <code>intro</code> will s=
how
only the library introduction and importing sections.</dd>
<dt><code>version</code></dt>
<dd>Show library version</dd>
</dl>
<p>Optional patterns given to <code>list</code> and <code>show</code> are c=
ase and space
insensitive. Both also accept <code>*</code> and <code>?</code> as wildcard=
s.</p>
<p>Examples:</p>
<pre class=3D"literal-block">python -m robot.libdoc Dialogs list
python -m robot.libdoc SeleniumLibrary list browser
python -m robot.libdoc Remote::10.0.0.42:8270 show
python -m robot.libdoc Dialogs show PauseExecution execute*
python -m robot.libdoc SeleniumLibrary show intro
python -m robot.libdoc SeleniumLibrary version
</pre>
</div>
</div>
<div class=3D"section" id=3D"writing-documentation">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id863">5.1.2&nbsp;&nbsp;&nbsp;Writin=
g documentation</a></h3>
<p>This section discusses writing documentation for <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#python-libraries">Python</a> and <a class=3D"reference i=
nternal" href=3D"http://robotframework.org/robotframework/latest/RobotFrame=
workUserGuide.html#java-libraries">Java</a> based test
libraries that use the static library API as well as for <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#dynamic-libraries">dynamic libraries</a>
and <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#resource-file-documentation">=
resource files</a>. <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#creating-test=
-libraries">Creating test libraries</a> and <a class=3D"reference internal"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#resource-files">resource files</a> is
described in more details elsewhere in the User Guide.</p>
<div class=3D"section" id=3D"python-libraries">
<h4>Python libraries</h4>
<p>The documentation for Python libraries that use the <a class=3D"referenc=
e internal" href=3D"http://robotframework.org/robotframework/latest/RobotFr=
ameworkUserGuide.html#creating-static-keywords">static library API</a>
is written simply as doc strings for the library class or module and for
methods implementing keywords. The first line of the method documentation i=
s
considered as a short documentation for the keyword (used, for example, as
a tool tip in links in the generated HTML documentation), and it should
thus be as describing as possible, but not too long.</p>
<p>The simple example below illustrates how to write the documentation in
general, and there is a <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#libdoc-ex=
ample">bit longer example</a> at the end of this
chapter containing also an example of the generated documentation.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">ExampleLib</span><span class=3D"p">:</span>
    <span class=3D"sd">"""Library for demo purposes.</span>

<span class=3D"sd">    This library is only used in an example and it doesn=
't do anything useful.</span>
<span class=3D"sd">    """</span>

    <span class=3D"k">def</span> <span class=3D"nf">my_keyword</span><span =
class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">):</spa=
n>
        <span class=3D"sd">"""Does nothing."""</span>
        <span class=3D"k">pass</span>

    <span class=3D"k">def</span> <span class=3D"nf">your_keyword</span><spa=
n class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</sp=
an> <span class=3D"n">arg</span><span class=3D"p">):</span>
        <span class=3D"sd">"""Takes one argument and *does nothing* with it=
.</span>

<span class=3D"sd">        Examples:</span>
<span class=3D"sd">        | Your Keyword | xxx |</span>
<span class=3D"sd">        | Your Keyword | yyy |</span>
<span class=3D"sd">        """</span>
        <span class=3D"k">pass</span>
</pre></div>
<div class=3D"admonition tip">
<p class=3D"first admonition-title">Tip</p>
<p>If you want to use non-ASCII charactes in the documentation of
Python libraries, you must either use UTF-8 as your <a class=3D"reference e=
xternal" href=3D"http://www.python.org/dev/peps/pep-0263">source code
encoding</a> or create docstrings as Unicode.</p>
<p class=3D"last">For more information on Python documentation strings, see=
 <a class=3D"reference external" href=3D"http://www.python.org/dev/peps/pep=
-0257">PEP-257</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"java-libraries">
<h4>Java libraries</h4>
<p>Documentation for Java libraries that use the <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#creating-static-keywords">static library API</a> is written
as normal <a class=3D"reference external" href=3D"http://en.wikipedia.org/w=
iki/Javadoc">Javadoc comments</a> for the library class and methods. In thi=
s case
Libdoc actually uses the Javadoc tool internally, and thus
<span class=3D"file">tools.jar</span> containing it must be in <tt class=3D=
"docutils literal">CLASSPATH</tt>. This jar file is part
of the normal Java SDK distribution and ought to be found from <span class=
=3D"file">bin</span>
directory under the Java SDK installation.</p>
<p>The following simple example has exactly same documentation (and functio=
nality)
than the earlier Python example.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"cm">/**</span>
<span class=3D"cm"> * Library for demo purposes.</span>
<span class=3D"cm"> *</span>
<span class=3D"cm"> * This library is only used in an example and it doesn'=
t do anything useful.</span>
<span class=3D"cm"> */</span>
<span class=3D"kd">public</span> <span class=3D"kd">class</span> <span clas=
s=3D"nc">ExampleLib</span> <span class=3D"o">{</span>

    <span class=3D"cm">/**</span>
<span class=3D"cm">     * Does nothing.</span>
<span class=3D"cm">     */</span>
    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">myKeyword</span><span class=3D"o">()</span> <span class=3D"o">{=
</span>
    <span class=3D"o">}</span>

    <span class=3D"cm">/**</span>
<span class=3D"cm">     * Takes one argument and *does nothing* with it.</s=
pan>
<span class=3D"cm">     *</span>
<span class=3D"cm">     * Examples:</span>
<span class=3D"cm">     * | Your Keyword | xxx |</span>
<span class=3D"cm">     * | Your Keyword | yyy |</span>
<span class=3D"cm">     */</span>
    <span class=3D"kd">public</span> <span class=3D"kt">void</span> <span c=
lass=3D"nf">yourKeyword</span><span class=3D"o">(</span><span class=3D"n">S=
tring</span> <span class=3D"n">arg</span><span class=3D"o">)</span> <span c=
lass=3D"o">{</span>
    <span class=3D"o">}</span>
<span class=3D"o">}</span>
</pre></div>
</div>
<div class=3D"section" id=3D"dynamic-libraries">
<h4>Dynamic libraries</h4>
<p>To be able to generate meaningful documentation for dynamic libraries,
the libraries must return keyword argument names and documentation using
<code>get_keyword_arguments</code> and <code>get_keyword_documentation</cod=
e>
methods (or using their camelCase variants <code>getKeywordArguments</code>
and <code>getKeywordDocumentation</code>). Libraries can also support
general library documentation via special <code>__intro__</code> and
<code>__init__</code> values to the <code>get_keyword_documentation</code> =
method.</p>
<p>See the <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#dynamic-library-api">D=
ynamic library API</a> section for more information about how to
create these methods.</p>
</div>
<div class=3D"section" id=3D"importing-section">
<h4>Importing section</h4>
<p>A separate section about how the library is imported is created based on=
 its
initialization methods. For a Python library, if it has an  <code>__init__<=
/code>
method that takes arguments in addition to <code>self</code>, its documenta=
tion and
arguments are shown. For a Java library, if it has a public constructor tha=
t
accepts arguments, all its public constructors are shown.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">TestLibrary</span><span class=3D"p">:</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">mode</span><span class=3D"o">=3D</span><span class=3D"s1"=
>'default'</span><span class=3D"p">)</span>
        <span class=3D"sd">"""Creates new TestLibrary. `mode` argument is u=
sed to determine mode."""</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">mode</span> <span class=3D"o">=3D</span> <span class=3D"n">mode</spa=
n>

    <span class=3D"k">def</span> <span class=3D"nf">some_keyword</span><spa=
n class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</sp=
an> <span class=3D"n">arg</span><span class=3D"p">):</span>
        <span class=3D"sd">"""Does something based on given `arg`.</span>

<span class=3D"sd">        What is done depends on the `mode` specified whe=
n `importing` the library.</span>
<span class=3D"sd">        """</span>
        <span class=3D"k">if</span> <span class=3D"bp">self</span><span cla=
ss=3D"o">.</span><span class=3D"n">mode</span> <span class=3D"o">=3D=3D</sp=
an> <span class=3D"s1">'secret'</span><span class=3D"p">:</span>
             <span class=3D"c1"># ...</span>
</pre></div>
</div>
<div class=3D"section" id=3D"resource-file-documentation">
<h4>Resource file documentation</h4>
<p>Keywords in resource files can have documentation using
<span class=3D"setting">[Documentation]</span> setting, and this documentat=
ion is also used by
Libdoc. First line of the documentation (until the first
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#newlines-in-test-data">implicit n=
ewline</a> or explicit <code>\n</code>) is considered to be the short
documentation similarly as with test libraries.</p>
<p>Also the resource file itself can have <span class=3D"setting">Documenta=
tion</span> in the
Setting table for documenting the whole resource file.</p>
<p>Possible variables in resource files can not be documented.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Documentation</span><span class=3D"p">    </span><span c=
lass=3D"s">Resource file for demo purposes.</span><span class=3D"p"></span>
<span class=3D"p">...              </span><span class=3D"s">This resource i=
s only used in an example and it doesn't do anything useful.</span><span cl=
ass=3D"p"></span>

<span class=3D"gh">*** Keywords ***</span><span class=3D"p"></span>
<span class=3D"gu">My Keyword</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]   </span><span class=3D"s">Does nothing</span><span class=3D"=
p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>

<span class=3D"gu">Your Keyword</span><span class=3D"p"></span>
<span class=3D"p">    [</span><span class=3D"kn">Arguments</span><span clas=
s=3D"p">]  ${</span><span class=3D"nv">arg</span><span class=3D"p">}</span>
<span class=3D"p">    [</span><span class=3D"kn">Documentation</span><span =
class=3D"p">]   </span><span class=3D"s">Takes one argument and *does nothi=
ng* with it.</span><span class=3D"p"></span>
<span class=3D"p">    ...</span>
<span class=3D"p">    ...    </span><span class=3D"s">Examples:</span><span=
 class=3D"p"></span>
<span class=3D"p">    ...    </span><span class=3D"s">| Your Keyword | xxx =
|</span><span class=3D"p"></span>
<span class=3D"p">    ...    </span><span class=3D"s">| Your Keyword | yyy =
|</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">No Operation</span><span cl=
ass=3D"p"></span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"documentation-syntax">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id864">5.1.3&nbsp;&nbsp;&nbsp;Docume=
ntation syntax</a></h3>
<p>Libdoc supports documentation in Robot Framework's own <a class=3D"refer=
ence internal" href=3D"http://robotframework.org/robotframework/latest/Robo=
tFrameworkUserGuide.html#id410">documentation
syntax</a>, HTML, plain text, and <a class=3D"reference external" href=3D"h=
ttp://docutils.sourceforge.net/rst.html">reStructuredText</a>. The format t=
o use can be
specified in <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#specifying-documenta=
tion-format">test library source code</a> using <code>ROBOT_LIBRARY_DOC_FOR=
MAT</code>
attribute or given from the command line using <span class=3D"option">--doc=
format (-F)</span> option.
In both cases the possible case-insensitive values are <code>ROBOT</code> (=
default),
<code>HTML</code>, <code>TEXT</code> and <code>reST</code>.</p>
<p>Robot Framework's own documentation format is the default and generally
recommended format. Other formats are especially useful when using existing
code with existing documentation in test libraries.</p>
<div class=3D"section" id=3D"robot-framework-documentation-syntax">
<h4>Robot Framework documentation syntax</h4>
<p>Most important features in Robot Framework's <a class=3D"reference inter=
nal" href=3D"http://robotframework.org/robotframework/latest/RobotFramework=
UserGuide.html#id410">documentation syntax</a> are
formatting using <code>*bold*</code> and <code>_italic_</code>, custom link=
s and
automatic conversion of URLs to links, and the possibility to create tables=
 and
pre-formatted text blocks (useful for examples) simply with pipe character.
If documentation gets longer, support for section titles can also be handy.=
</p>
<p>Some of the most important formatting features are illustrated in the ex=
ample
below. Notice that since this is the default format, there is no need to us=
e
<code>ROBOT_LIBRARY_DOC_FORMAT</code> attribute nor give the format from th=
e command
line.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"sd">"""Example li=
brary in Robot Framework format.</span>

<span class=3D"sd">- Formatting with *bold* and _italic_.</span>
<span class=3D"sd">- URLs like http://example.com are turned to links.</spa=
n>
<span class=3D"sd">- Custom links like [http://robotframework.org|Robot Fra=
mework] are supported.</span>
<span class=3D"sd">- Linking to `My Keyword` works.</span>
<span class=3D"sd">"""</span>

<span class=3D"k">def</span> <span class=3D"nf">my_keyword</span><span clas=
s=3D"p">():</span>
    <span class=3D"sd">"""Nothing more to see here."""</span>
</pre></div>
</div>
<div class=3D"section" id=3D"html-documentation-syntax">
<h4>HTML documentation syntax</h4>
<p>When using HTML format, you can create documentation pretty much freely =
using
any syntax. The main drawback is that HTML markup is not that human friendl=
y,
and that can make the documentation in the source code hard to maintain and=
 read.
Documentation in HTML format is used by Libdoc directly without any
transformation or escaping. The special syntax for <a class=3D"reference in=
ternal" href=3D"http://robotframework.org/robotframework/latest/RobotFramew=
orkUserGuide.html#linking-to-keywords">linking to keywords</a> using
syntax like <span class=3D"codesc">`My Keyword`</span> is supported, howeve=
r.</p>
<p>Example below contains the same formatting examples as the previous exam=
ple.
Now <code>ROBOT_LIBRARY_DOC_FORMAT</code> attribute must be used or format =
given
on the command line like <code>--docformat HTML</code>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"sd">"""Example li=
brary in HTML format.</span>

<span class=3D"sd">&lt;ul&gt;</span>
<span class=3D"sd">  &lt;li&gt;Formatting with &lt;b&gt;bold&lt;/b&gt; and =
&lt;i&gt;italic&lt;/i&gt;.</span>
<span class=3D"sd">  &lt;li&gt;URLs are not turned to links automatically.<=
/span>
<span class=3D"sd">  &lt;li&gt;Custom links like &lt;a href=3D"http://www.w=
3.org/html"&gt;HTML&lt;/a&gt; are supported.</span>
<span class=3D"sd">  &lt;li&gt;Linking to `My Keyword` works.</span>
<span class=3D"sd">&lt;/ul&gt;</span>
<span class=3D"sd">"""</span>
<span class=3D"n">ROBOT_LIBRARY_DOC_FORMAT</span> <span class=3D"o">=3D</sp=
an> <span class=3D"s1">'HTML'</span>

<span class=3D"k">def</span> <span class=3D"nf">my_keyword</span><span clas=
s=3D"p">():</span>
    <span class=3D"sd">"""Nothing more to see here."""</span>
</pre></div>
</div>
<div class=3D"section" id=3D"plain-text-documentation-syntax">
<h4>Plain text documentation syntax</h4>
<p>When the plain text format is used, Libdoc uses the documentation as-is.
Newlines and other whitespace are preserved except for indentation, and
HTML special characters (<code>&lt;&gt;&amp;</code>) escaped. The only form=
atting done is
turning URLs into clickable links and supporting <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#internal-linking">internal linking</a>
like <span class=3D"codesc">`My Keyword`</span>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"sd">"""Example li=
brary in plain text format.</span>

<span class=3D"sd">- Formatting is not supported.</span>
<span class=3D"sd">- URLs like http://example.com are turned to links.</spa=
n>
<span class=3D"sd">- Custom links are not supported.</span>
<span class=3D"sd">- Linking to `My Keyword` works.</span>
<span class=3D"sd">"""</span>
<span class=3D"n">ROBOT_LIBRARY_DOC_FORMAT</span> <span class=3D"o">=3D</sp=
an> <span class=3D"s1">'text'</span>

<span class=3D"k">def</span> <span class=3D"nf">my_keyword</span><span clas=
s=3D"p">():</span>
    <span class=3D"sd">"""Nothing more to see here."""</span>
</pre></div>
</div>
<div class=3D"section" id=3D"restructuredtext-documentation-syntax">
<h4>reStructuredText documentation syntax</h4>
<p><a class=3D"reference external" href=3D"http://docutils.sourceforge.net/=
rst.html">reStructuredText</a> is simple yet powerful markup syntax used wi=
dely in Python
projects (including this User Guide) and elsewhere. The main limitation
is that you need to have the <a class=3D"reference external" href=3D"https:=
//pypi.python.org/pypi/docutils">docutils</a> module installed to be able t=
o generate
documentation using it. Because backtick characters have special meaning in
reStructuredText, <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#linking-to-keyw=
ords">linking to keywords</a> requires them to be escaped like
<span class=3D"codesc">\`My Keyword\`</span>.</p>
<p>One of the nice features that reStructured supports is the ability to ma=
rk code
blocks that can be syntax highlighted. The code block syntax has always wor=
ked
with Robot Framework, but they are highlighted only in RF 3.0.1 and newer.
Syntax highlight requires additional <a class=3D"reference external" href=
=3D"http://pygments.org/">Pygments</a> module and supports all the
languages that Pygments supports.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"sd">"""Example li=
brary in reStructuredText format.</span>

<span class=3D"sd">- Formatting with **bold** and *italic*.</span>
<span class=3D"sd">- URLs like http://example.com are turned to links.</spa=
n>
<span class=3D"sd">- Custom links like reStructuredText__ are supported.</s=
pan>
<span class=3D"sd">- Linking to \`My Keyword\` works but requires backtics =
to be escaped.</span>

<span class=3D"sd">__ http://docutils.sourceforge.net</span>

<span class=3D"sd">.. code:: robotframework</span>

<span class=3D"sd">    *** Test Cases ***</span>
<span class=3D"sd">    Example</span>
<span class=3D"sd">        My keyword    # How cool is this!!?!!?!1!!</span=
>
<span class=3D"sd">"""</span>
<span class=3D"n">ROBOT_LIBRARY_DOC_FORMAT</span> <span class=3D"o">=3D</sp=
an> <span class=3D"s1">'reST'</span>

<span class=3D"k">def</span> <span class=3D"nf">my_keyword</span><span clas=
s=3D"p">():</span>
    <span class=3D"sd">"""Nothing more to see here."""</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"id386">
<span id=3D"internal-linking"></span><h3><a class=3D"toc-backref" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#id865">5.1.4&nbsp;&nbsp;&nbsp;Internal linking</a></h3>
<p>Libdoc supports internal linking to keywords and different
sections in the documentation. Linking is done by surrounding the
target name with backtick characters like <span class=3D"codesc">`target`</=
span>. Target
names are case-insensitive and possible targets are explained in the
subsequent sections.</p>
<p>There is no error or warning if a link target is not found, but instead =
Libdoc
just formats the text in italics. Earlier this formatting was recommended t=
o
be used when referring to keyword arguments, but that was problematic becau=
se
it could accidentally create internal links. Nowadays it is recommended to
use <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#inline-styles">inline code st=
yle</a> with double backticks like
<span class=3D"codesc">``argument``</span> instead. The old formatting of s=
ingle backticks
may even be removed in the future in favor of giving an error when a link
target is not found.</p>
<p>In addition to the examples in the following sections, internal linking
and argument formatting is shown also in the <a class=3D"reference internal=
" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUse=
rGuide.html#libdoc-example">longer example</a> at the
end of this chapter.</p>
<div class=3D"section" id=3D"linking-to-keywords">
<h4>Linking to keywords</h4>
<p>All keywords the library have automatically create link targets and they=
 can
be linked using syntax <span class=3D"codesc">`Keyword Name`</span>. This i=
s illustrated with
the example below where both keywords have links to each others.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">keyword</span><span class=3D"p">(</span><span class=3D"n">l=
og_level</span><span class=3D"o">=3D</span><span class=3D"s2">"INFO"</span>=
<span class=3D"p">):</span>
    <span class=3D"sd">"""Does something and logs the output using the give=
n level.</span>

<span class=3D"sd">    Valid values for log level` are "INFO" (default) "DE=
BUG" and "TRACE".</span>

<span class=3D"sd">    See also `Another Keyword`.</span>
<span class=3D"sd">    """</span>
    <span class=3D"c1"># ...</span>

<span class=3D"k">def</span> <span class=3D"nf">another_keyword</span><span=
 class=3D"p">(</span><span class=3D"n">argument</span><span class=3D"p">,</=
span> <span class=3D"n">log_level</span><span class=3D"o">=3D</span><span c=
lass=3D"s2">"INFO"</span><span class=3D"p">):</span>
    <span class=3D"sd">"""Does something with the given argument else and l=
ogs the output.</span>

<span class=3D"sd">    See `Keyword` for information about valid log levels=
.</span>
<span class=3D"sd">    """</span>
    <span class=3D"c1"># ...</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">When using <a class=3D"reference internal" href=3D"http:/=
/robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#rest=
ructuredtext-documentation-syntax">reStructuredText documentation syntax</a=
>, backticks must
be escaped like <span class=3D"codesc">\`Keyword Name\`</span>.</p>
</div>
</div>
<div class=3D"section" id=3D"linking-to-automatic-sections">
<h4>Linking to automatic sections</h4>
<p>The documentation generated by Libdoc always contains sections
for overall library introduction, shortcuts to keywords, and for
actual keywords.  If a library itself takes arguments, there is also
separate <a class=3D"reference internal" href=3D"http://robotframework.org/=
robotframework/latest/RobotFrameworkUserGuide.html#importing-section">impor=
ting section</a>.</p>
<p>All these sections act as targets that can be linked, and the possible
target names are listed in the table below. Using these targets is
shown in the example of the next section.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Automatic section link targets</caption>
<colgroup>
<col width=3D"20%">
<col width=3D"80%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Section</th>
<th class=3D"head">Target</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>Introduction</td>
<td><span class=3D"codesc">`introduction`</span> and <span class=3D"codesc"=
>`library introduction`</span></td>
</tr>
<tr><td>Importing</td>
<td><span class=3D"codesc">`importing`</span> and <span class=3D"codesc">`l=
ibrary importing`</span></td>
</tr>
<tr><td>Shortcuts</td>
<td><span class=3D"codesc">`shortcuts`</span></td>
</tr>
<tr><td>Keywords</td>
<td><span class=3D"codesc">`keywords`</span></td>
</tr>
</tbody>
</table>
</div>
<div class=3D"section" id=3D"linking-to-custom-sections">
<h4>Linking to custom sections</h4>
<p>Robot Framework's <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#id410">docum=
entation syntax</a>
supports custom <a class=3D"reference internal" href=3D"http://robotframewo=
rk.org/robotframework/latest/RobotFrameworkUserGuide.html#section-titles">s=
ection titles</a>, and the titles used in the
library or resource file introduction automatically create link
targets. The example below illustrates linking both to automatic and
custom sections:</p>
<div class=3D"highlight"><pre><span></span><span class=3D"sd">"""Library fo=
r Libdoc demonstration purposes.</span>

<span class=3D"sd">This library does not do anything useful.</span>

<span class=3D"sd">=3D My section  =3D</span>

<span class=3D"sd">We do have a custom section in the documentation, though=
.</span>
<span class=3D"sd">"""</span>

<span class=3D"k">def</span> <span class=3D"nf">keyword</span><span class=
=3D"p">():</span>
    <span class=3D"sd">"""Does nothing.</span>

<span class=3D"sd">    See `introduction` for more information and `My sect=
ion` to test how</span>
<span class=3D"sd">    linking to custom sections works.</span>
<span class=3D"sd">    """</span>
    <span class=3D"k">pass</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Linking to custom sections works only when using <a class=
=3D"reference internal" href=3D"http://robotframework.org/robotframework/la=
test/RobotFrameworkUserGuide.html#robot-framework-documentation-syntax">Rob=
ot Framework
documentation syntax</a>.</p>
</div>
</div>
</div>
<div class=3D"section" id=3D"representing-arguments">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id866">5.1.5&nbsp;&nbsp;&nbsp;Repres=
enting arguments</a></h3>
<p>Libdoc handles keywords' arguments automatically so that
arguments specified for methods in libraries or user keywords in
resource files are listed in a separate column. User keyword arguments
are shown without <code>${}</code> or <code>@{}</code> to make arguments lo=
ok
the same regardless where keywords originated from.</p>
<p>Regardless how keywords are actually implemented, Libdoc shows arguments
similarly as when creating keywords in Python. This formatting is explained
more thoroughly in the table below.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>How Libdoc represents arguments</caption>
<colgroup>
<col width=3D"28%">
<col width=3D"39%">
<col width=3D"33%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Arguments</th>
<th class=3D"head">Now represented</th>
<th class=3D"head">Examples</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>No arguments</td>
<td>Empty column.</td>
<td>&nbsp;</td>
</tr>
<tr><td>One or more
argument</td>
<td>List of strings containing
argument names.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>one_argument</code></div>
<div class=3D"line"><code>a1, a2, a3</code></div>
</div>
</td>
</tr>
<tr><td>Default values
for arguments</td>
<td>Default values separated
from names with <code>=3D</code>.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>arg=3Ddefault value</code></div>
<div class=3D"line"><code>a, b=3D1, c=3D2</code></div>
</div>
</td>
</tr>
<tr><td>Variable number
of arguments
(varargs)</td>
<td>Last (or second last with
kwargs) argument has <code>*</code>
before its name.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>*varargs</code></div>
<div class=3D"line"><code>a, b=3D42, *rest</code></div>
</div>
</td>
</tr>
<tr><td>Free keyword
arguments (kwargs)</td>
<td>Last arguments has
<code>**</code> before its name.</td>
<td><div class=3D"first last line-block">
<div class=3D"line"><code>**kwargs</code></div>
<div class=3D"line"><code>a, b=3D42, **kws</code></div>
<div class=3D"line"><code>*varargs, **kwargs</code></div>
</div>
</td>
</tr>
</tbody>
</table>
<p>When referring to arguments in keyword documentation, it is recommended =
to
use <a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#inline-styles">inline code st=
yle</a> like <span class=3D"codesc">``argument``</span>.</p>
</div>
<div class=3D"section" id=3D"libdoc-example">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id867">5.1.6&nbsp;&nbsp;&nbsp;Libdoc=
 example</a></h3>
<p>The following example illustrates how to use the most important
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#documentation-formatting">documen=
tation formatting</a> possibilities, <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#internal-linking">internal linking</a>, and so
on. <a class=3D"reference external" href=3D"http://robotframework.org/robot=
framework/latest/images/LoggingLibrary.html">Click here</a> to see how the =
generated documentation looks like.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">class</span> <=
span class=3D"nc">LoggingLibrary</span><span class=3D"p">:</span>
    <span class=3D"sd">"""Library for logging messages.</span>

<span class=3D"sd">    =3D Table of contents =3D</span>

<span class=3D"sd">    - `Usage`</span>
<span class=3D"sd">    - `Valid log levels`</span>
<span class=3D"sd">    - `Examples`</span>
<span class=3D"sd">    - `Importing`</span>
<span class=3D"sd">    - `Shortcuts`</span>
<span class=3D"sd">    - `Keywords`</span>

<span class=3D"sd">    =3D Usage =3D</span>

<span class=3D"sd">    This library has several keyword, for example `Log M=
essage`, for logging</span>
<span class=3D"sd">    messages. In reality the library is used only for _L=
ibdoc_ demonstration</span>
<span class=3D"sd">    purposes.</span>

<span class=3D"sd">    =3D Valid log levels =3D</span>

<span class=3D"sd">    Valid log levels are ``INFO``, ``DEBUG``, and ``TRAC=
E``. The default log</span>
<span class=3D"sd">    level can be set during `importing`.</span>

<span class=3D"sd">    =3D Examples =3D</span>

<span class=3D"sd">    Notice how keywords are linked from examples.</span>

<span class=3D"sd">    | `Log Message`      | My message    |              =
  |               |</span>
<span class=3D"sd">    | `Log Two Messages` | My message    | Second messag=
e | level=3DDEBUG   |</span>
<span class=3D"sd">    | `Log Messages`     | First message | Second messag=
e | Third message |</span>
<span class=3D"sd">    """</span>
    <span class=3D"n">ROBOT_LIBRARY_VERSION</span> <span class=3D"o">=3D</s=
pan> <span class=3D"s1">'0.1'</span>

    <span class=3D"k">def</span> <span class=3D"fm">__init__</span><span cl=
ass=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</span> =
<span class=3D"n">default_level</span><span class=3D"o">=3D</span><span cla=
ss=3D"s1">'INFO'</span><span class=3D"p">):</span>
        <span class=3D"sd">"""The default log level can be given at library=
 import time.</span>

<span class=3D"sd">        See `Valid log levels` section for information a=
bout available log</span>
<span class=3D"sd">        levels.</span>

<span class=3D"sd">        Examples:</span>

<span class=3D"sd">        | =3DSetting=3D |     =3DValue=3D    | =3DValue=
=3D |          =3DComment=3D         |</span>
<span class=3D"sd">        | Library   | LoggingLibrary |         | # Use d=
efault level (INFO) |</span>
<span class=3D"sd">        | Library   | LoggingLibrary | DEBUG   | # Use t=
he given level      |</span>
<span class=3D"sd">        """</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">default_level</span> <span class=3D"o">=3D</span> <span class=3D"bp"=
>self</span><span class=3D"o">.</span><span class=3D"n">_verify_level</span=
><span class=3D"p">(</span><span class=3D"n">default_level</span><span clas=
s=3D"p">)</span>

    <span class=3D"k">def</span> <span class=3D"nf">_verify_level</span><sp=
an class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</s=
pan> <span class=3D"n">level</span><span class=3D"p">):</span>
        <span class=3D"n">level</span> <span class=3D"o">=3D</span> <span c=
lass=3D"n">level</span><span class=3D"o">.</span><span class=3D"n">upper</s=
pan><span class=3D"p">()</span>
        <span class=3D"k">if</span> <span class=3D"n">level</span> <span cl=
ass=3D"ow">not</span> <span class=3D"ow">in</span> <span class=3D"p">[</spa=
n><span class=3D"s1">'INFO'</span><span class=3D"p">,</span> <span class=3D=
"s1">'DEBUG'</span><span class=3D"p">,</span> <span class=3D"s1">'TRACE'</s=
pan><span class=3D"p">]:</span>
            <span class=3D"k">raise</span> <span class=3D"ne">RuntimeError<=
/span><span class=3D"p">(</span><span class=3D"s2">"Invalid log level'</spa=
n><span class=3D"si">%s</span><span class=3D"s2">'. Valid levels are "</spa=
n>
                               <span class=3D"s2">"'INFO', 'DEBUG', and 'TR=
ACE'"</span><span class=3D"p">)</span>
        <span class=3D"k">return</span> <span class=3D"n">level</span>

    <span class=3D"k">def</span> <span class=3D"nf">log_message</span><span=
 class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</spa=
n> <span class=3D"n">message</span><span class=3D"p">,</span> <span class=
=3D"n">level</span><span class=3D"o">=3D</span><span class=3D"bp">None</spa=
n><span class=3D"p">):</span>
        <span class=3D"sd">"""Writes given message to the log file using th=
e specified log level.</span>

<span class=3D"sd">        The message to log and the log level to use are =
defined using</span>
<span class=3D"sd">        ``message`` and ``level`` arguments, respectivel=
y.</span>

<span class=3D"sd">        If no log level is given, the default level give=
n during `library</span>
<span class=3D"sd">        importing` is used.</span>
<span class=3D"sd">        """</span>
        <span class=3D"n">level</span> <span class=3D"o">=3D</span> <span c=
lass=3D"bp">self</span><span class=3D"o">.</span><span class=3D"n">_verify_=
level</span><span class=3D"p">(</span><span class=3D"n">level</span><span c=
lass=3D"p">)</span> <span class=3D"k">if</span> <span class=3D"n">level</sp=
an> <span class=3D"k">else</span> <span class=3D"bp">self</span><span class=
=3D"o">.</span><span class=3D"n">default_level</span>
        <span class=3D"k">print</span> <span class=3D"s2">"*</span><span cl=
ass=3D"si">%s</span><span class=3D"s2">* </span><span class=3D"si">%s</span=
><span class=3D"s2">"</span> <span class=3D"o">%</span> <span class=3D"p">(=
</span><span class=3D"n">level</span><span class=3D"p">,</span> <span class=
=3D"n">message</span><span class=3D"p">)</span>

    <span class=3D"k">def</span> <span class=3D"nf">log_two_messages</span>=
<span class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,=
</span> <span class=3D"n">message1</span><span class=3D"p">,</span> <span c=
lass=3D"n">message2</span><span class=3D"p">,</span> <span class=3D"n">leve=
l</span><span class=3D"o">=3D</span><span class=3D"bp">None</span><span cla=
ss=3D"p">):</span>
        <span class=3D"sd">"""Writes given messages to the log file using t=
he specified log level.</span>

<span class=3D"sd">        See `Log Message` keyword for more information.<=
/span>
<span class=3D"sd">        """</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">log_message</span><span class=3D"p">(</span><span class=3D"n">messag=
e1</span><span class=3D"p">,</span> <span class=3D"n">level</span><span cla=
ss=3D"p">)</span>
        <span class=3D"bp">self</span><span class=3D"o">.</span><span class=
=3D"n">log_message</span><span class=3D"p">(</span><span class=3D"n">messag=
e2</span><span class=3D"p">,</span> <span class=3D"n">level</span><span cla=
ss=3D"p">)</span>

    <span class=3D"k">def</span> <span class=3D"nf">log_messages</span><spa=
n class=3D"p">(</span><span class=3D"bp">self</span><span class=3D"p">,</sp=
an> <span class=3D"o">*</span><span class=3D"n">messages</span><span class=
=3D"p">):</span>
        <span class=3D"sd">"""Logs given messages using the log level set d=
uring `importing`.</span>

<span class=3D"sd">        See also `Log Message` and `Log Two Messages`.</=
span>
<span class=3D"sd">        """</span>
        <span class=3D"k">for</span> <span class=3D"n">msg</span> <span cla=
ss=3D"ow">in</span> <span class=3D"n">messages</span><span class=3D"p">:</s=
pan>
            <span class=3D"bp">self</span><span class=3D"o">.</span><span c=
lass=3D"n">log_message</span><span class=3D"p">(</span><span class=3D"n">ms=
g</span><span class=3D"p">)</span>
</pre></div>
<p>All <a class=3D"reference internal" href=3D"http://robotframework.org/ro=
botframework/latest/RobotFrameworkUserGuide.html#standard-libraries">standa=
rd libraries</a> have documentation generated by
Libdoc and their documentation (and source code) act as a more
realistic examples.</p>
</div>
</div>
<div class=3D"section" id=3D"test-data-documentation-tool-testdoc">
<span id=3D"testdoc"></span><h2><a class=3D"toc-backref" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#id859">5=
.2&nbsp;&nbsp;&nbsp;Test data documentation tool (Testdoc)</a></h2>
<div class=3D"contents local topic" id=3D"id389">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id390" id=3D"id868">5.2.1&nbs=
p;&nbsp;&nbsp;General usage</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id394" id=3D"id869">5.2.2&nbs=
p;&nbsp;&nbsp;Generating documentation</a></li>
</ul>
</div>
<p>Testdoc is Robot Framework's built-in tool for generating high level
documentation based on test cases. The created documentation is in HTML
format and it includes name, documentation and other metadata of each
test suite and test case, as well as the top-level keywords and their
arguments.</p>
<div class=3D"section" id=3D"id390">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id868">5.2.1&nbsp;&nbsp;&nbsp;Genera=
l usage</a></h3>
<div class=3D"section" id=3D"id391">
<h4>Synopsis</h4>
<pre class=3D"literal-block">python -m robot.testdoc [options] data_sources=
 output_file
</pre>
</div>
<div class=3D"section" id=3D"id392">
<h4>Options</h4>
<blockquote>
<table class=3D"docutils option-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"option">
<col class=3D"description">
</colgroup><tbody valign=3D"top">
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-T</span>, <span class=3D"option">--title <var>=
&lt;title&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Set the title of the generated documentation.
Underscores in the title are converted to spaces.
The default title is the name of the top level suite.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-N</span>, <span class=3D"option">--name <var>&=
lt;name&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Override the name of the top level test suite.</td><=
/tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-D</span>, <span class=3D"option">--doc <var>&l=
t;doc&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Override the documentation of the top level test sui=
te.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-M</span>, <span class=3D"option">--metadata <v=
ar>&lt;name:value&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Set/override free metadata of the top level test sui=
te.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-G</span>, <span class=3D"option">--settag <var=
>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Set given tag(s) to all test cases.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-t</span>, <span class=3D"option">--test <var>&=
lt;name&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Include tests by name.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-s</span>, <span class=3D"option">--suite <var>=
&lt;name&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Include suites by name.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-i</span>, <span class=3D"option">--include <va=
r>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Include tests by tags.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-e</span>, <span class=3D"option">--exclude <va=
r>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Exclude tests by tags.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-A</span>, <span class=3D"option">--argumentfil=
e <var>&lt;path&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Text file to read more arguments from. Works
exactly like <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#argument-files">argu=
ment files</a> when running
tests. New in Robot Framework 3.0.2.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">-h</span>, <span class=3D"option">--help</span>=
</kbd></td>
<td>Print this help in the console.</td></tr>
</tbody>
</table>
</blockquote>
<p>All options except <span class=3D"option">--title</span> have exactly th=
e same semantics as same
options have when <a class=3D"reference internal" href=3D"http://robotframe=
work.org/robotframework/latest/RobotFrameworkUserGuide.html#configuring-exe=
cution">executing test cases</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"id394">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id869">5.2.2&nbsp;&nbsp;&nbsp;Genera=
ting documentation</a></h3>
<p>Data can be given as a single file, directory, or as multiple files and
directories. In all these cases, the last argument must be the file where
to write the output.</p>
<p>Testdoc works with all interpreters supported by Robot Framework (Python=
,
Jython and IronPython). It can be executed as an installed module like
<code>python -m robot.testdoc</code> or as a script like <code>python path/=
robot/testdoc.py</code>.</p>
<p>Examples:</p>
<pre class=3D"literal-block">python -m robot.testdoc my_test.robot testdoc.=
html
jython -m robot.testdoc --name "Smoke tests" --include smoke path/to/tests =
smoke.html
ipy path/to/robot/testdoc.py first.robot second.robot output.html
</pre>
</div>
</div>
<div class=3D"section" id=3D"test-data-clean-up-tool-tidy">
<span id=3D"tidy"></span><h2><a class=3D"toc-backref" href=3D"http://robotf=
ramework.org/robotframework/latest/RobotFrameworkUserGuide.html#id860">5.3&=
nbsp;&nbsp;&nbsp;Test data clean-up tool (Tidy)</a></h2>
<div class=3D"contents local topic" id=3D"id395">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id396" id=3D"id870">5.3.1&nbs=
p;&nbsp;&nbsp;General usage</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#cleaning-up-test-data" id=3D"=
id871">5.3.2&nbsp;&nbsp;&nbsp;Cleaning up test data</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#changing-test-data-format" id=
=3D"id872">5.3.3&nbsp;&nbsp;&nbsp;Changing test data format</a></li>
</ul>
</div>
<p>Tidy is Robot Framework's built-in a tool for cleaning up and changing
the format of Robot Framework test data files.</p>
<p>The output is written into the standard output stream by default, but
an optional output file can be given as well. Files can also be modified
in-place using <span class=3D"option">--inplace</span> or <span class=3D"op=
tion">--recursive</span> options.</p>
<div class=3D"section" id=3D"id396">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id870">5.3.1&nbsp;&nbsp;&nbsp;Genera=
l usage</a></h3>
<div class=3D"section" id=3D"id397">
<h4>Synopsis</h4>
<pre class=3D"literal-block">python -m robot.tidy [options] inputfile
python -m robot.tidy [options] inputfile [outputfile]
python -m robot.tidy --inplace [options] inputfile [more input files]
python -m robot.tidy --recursive [options] directory
</pre>
</div>
<div class=3D"section" id=3D"id398">
<h4>Options</h4>
<blockquote>
<table class=3D"docutils option-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"option">
<col class=3D"description">
</colgroup><tbody valign=3D"top">
<tr><td class=3D"option-group">
<kbd><span class=3D"option">-i</span>, <span class=3D"option">--inplace</sp=
an></kbd></td>
<td><p class=3D"first">Tidy given file(s) so that original file(s) are over=
written
(or removed, if the format is changed). When this option is
used, it is possible to give multiple input files. Examples:</p>
<pre class=3D"last literal-block">python -m robot.tidy --inplace tests.robo=
t
python -m robot.tidy --inplace --format robot *.html
</pre>
</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-r</span>, <span class=3D"option">--recursive</=
span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Process given directory recursively. Files in the di=
rectory
are processed in place similarly as when <span class=3D"option">--inplace</=
span>
option is used.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-f</span>, <span class=3D"option">--format <var=
>&lt;robot|txt|html|tsv&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Output file format. If the output file is given expl=
icitly,
the default value is got from its extension. Otherwise
the format is not changed.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-p</span>, <span class=3D"option">--use-pipes</=
span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Use a pipe character (|) as a cell separator in the =
plain
text format.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-s</span>, <span class=3D"option">--spacecount =
<var>&lt;number&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>The number of spaces between cells in the plain text=
 format.
Default is 4.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-l</span>, <span class=3D"option">--lineseparat=
or <var>&lt;native|windows|unix&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><p class=3D"first">Line separator to use in outputs.=
 The default is 'native'.</p>
<ul class=3D"last simple">
<li><em>native</em>: use operating system's native line separators</li>
<li><em>windows</em>: use Windows line separators (CRLF)</li>
<li><em>unix</em>: use Unix line separators (LF)</li>
</ul>
</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">-h</span>, <span class=3D"option">--help</span>=
</kbd></td>
<td>Show this help.</td></tr>
</tbody>
</table>
</blockquote>
</div>
<div class=3D"section" id=3D"id399">
<h4>Alternative execution</h4>
<p>Although Tidy is used only with Python in the synopsis above, it works
also with Jython and IronPython. In the synopsis Tidy is executed as
an installed module (<code>python -m robot.tidy</code>), but it can be run =
also as
a script:</p>
<pre class=3D"literal-block">python path/robot/tidy.py [options] arguments
</pre>
<p>Executing as a script can be useful if you have done <a class=3D"referen=
ce internal" href=3D"http://robotframework.org/robotframework/latest/RobotF=
rameworkUserGuide.html#manual-installation">manual installation</a>
or otherwise just have the <span class=3D"file">robot</span> directory with=
 the source code
somewhere in your system.</p>
</div>
<div class=3D"section" id=3D"output-encoding">
<h4>Output encoding</h4>
<p>All output files are written using UTF-8 encoding. Outputs written to th=
e
console use the current console encoding.</p>
</div>
</div>
<div class=3D"section" id=3D"cleaning-up-test-data">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id871">5.3.2&nbsp;&nbsp;&nbsp;Cleani=
ng up test data</a></h3>
<p>Test case files can be normalized using Tidy. Tidy always writes consist=
ent
headers, consistent order for settings, and consistent amount of whitespace
between sections and cells.</p>
<p>Examples:</p>
<pre class=3D"literal-block">python -m robot.tidy messed_up_tests.robot cle=
aned_up_tests.robot
python -m robot.tidy --inplace tests.robot
python -m robot.tidy --recursive path/to/tests
</pre>
</div>
<div class=3D"section" id=3D"changing-test-data-format">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id872">5.3.3&nbsp;&nbsp;&nbsp;Changi=
ng test data format</a></h3>
<p>Robot Framework supports test data in <a class=3D"reference internal" hr=
ef=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGui=
de.html#supported-file-formats">various formats</a>, but nowadays the
plain text format with the <span class=3D"file">.robot</span> extension is =
the most commonly used.
Tidy makes it easy to convert data from one format to another. This is
especially useful if there is a need to convert tests in deprecated <a clas=
s=3D"reference internal" href=3D"http://robotframework.org/robotframework/l=
atest/RobotFrameworkUserGuide.html#html-format">HTML
format</a> to other formats.</p>
<p>Input format is always determined based on the extension of the input fi=
le.
If output file is given, the output format is got from its extension.
When using <span class=3D"option">--inplace</span> or <span class=3D"option=
">--recursive</span>, it is possible to
specify the desired format using the <span class=3D"option">--format</span>=
 option.</p>
<p>Examples:</p>
<pre class=3D"literal-block">python -m robot.tidy tests.html tests.robot
python -m robot.tidy --format robot --inplace tests.html
python -m robot.tidy --format robot --recursive path/to/tests
</pre>
</div>
</div>
<div class=3D"section" id=3D"external-tools">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id861">5.4&nbsp;&nbsp;&nbsp;External=
 tools</a></h2>
<p>There are plenty of external tools that can be used with Robot Framework=
.
These tools include test data editor <a class=3D"reference external" href=
=3D"https://github.com/robotframework/RIDE">RIDE</a>, extensions for variou=
s IDEs and
text editors, plugins to continuous integration systems and build tools,
and so on.</p>
<p>These tools are developed as separate projects independently from Robot
Framework itself. For a list of the available tools see
<a class=3D"reference external" href=3D"http://robotframework.org/#tools">h=
ttp://robotframework.org/#tools</a>.</p>
</div>
</div>
<div class=3D"section" id=3D"appendices">
<h1><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id458">6&nbsp;&nbsp;&nbsp;Appendices=
</a></h1>
<div class=3D"contents local topic" id=3D"id401">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#all-available-settings-in-tes=
t-data" id=3D"id873">6.1&nbsp;&nbsp;&nbsp;All available settings in test da=
ta</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#all-command-line-options" id=
=3D"id874">6.2&nbsp;&nbsp;&nbsp;All command line options</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#documentation-formatting" id=
=3D"id875">6.3&nbsp;&nbsp;&nbsp;Documentation formatting</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#time-format" id=3D"id876">6.4=
&nbsp;&nbsp;&nbsp;Time format</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#boolean-arguments" id=3D"id87=
7">6.5&nbsp;&nbsp;&nbsp;Boolean arguments</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#internal-api" id=3D"id878">6.=
6&nbsp;&nbsp;&nbsp;Internal API</a></li>
</ul>
</div>
<div class=3D"section" id=3D"all-available-settings-in-test-data">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id873">6.1&nbsp;&nbsp;&nbsp;All avai=
lable settings in test data</a></h2>
<div class=3D"contents local topic" id=3D"id402">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id403" id=3D"id879">6.1.1&nbs=
p;&nbsp;&nbsp;Setting table</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#test-case-table" id=3D"id880"=
>6.1.2&nbsp;&nbsp;&nbsp;Test Case table</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#id406" id=3D"id881">6.1.3&nbs=
p;&nbsp;&nbsp;Keyword table</a></li>
</ul>
</div>
<div class=3D"section" id=3D"id403">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id879">6.1.1&nbsp;&nbsp;&nbsp;Settin=
g table</a></h3>
<p>The Setting table is used to import test libraries, resource files and
variable files and to define metadata for test suites and test
cases. It can be included in test case files and resource files. Note
that in a resource file, a Setting table can only include settings for
importing libraries, resources, and variables.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Settings available in the Setting table</caption>
<colgroup>
<col width=3D"23%">
<col width=3D"77%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Name</th>
<th class=3D"head">Description</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>Library</td>
<td>Used for <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#importing-libraries"=
>importing libraries</a>.</td>
</tr>
<tr><td>Resource</td>
<td>Used for <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#taking-resource-file=
s-into-use">taking resource files into use</a>.</td>
</tr>
<tr><td>Variables</td>
<td>Used for <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#taking-variable-file=
s-into-use">taking variable files into use</a>.</td>
</tr>
<tr><td>Documentation</td>
<td>Used for specifying a <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-su=
ite-name-and-documentation">test suite</a> or
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#documenting-resource-files">resou=
rce file</a> documentation.</td>
</tr>
<tr><td>Metadata</td>
<td>Used for setting <a class=3D"reference internal" href=3D"http://robotfr=
amework.org/robotframework/latest/RobotFrameworkUserGuide.html#free-test-su=
ite-metadata">free test suite metadata</a>.</td>
</tr>
<tr><td>Suite Setup</td>
<td>Used for specifying the <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#suite=
-setup-and-teardown">suite setup</a>.</td>
</tr>
<tr><td>Suite Teardown</td>
<td>Used for specifying the <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#suite=
-setup-and-teardown">suite teardown</a>.</td>
</tr>
<tr><td>Force Tags</td>
<td>Used for specifying forced values for tags when
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#tagging-test-cases">tagging test =
cases</a>.</td>
</tr>
<tr><td>Default Tags</td>
<td>Used for specifying default values for tags when
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#tagging-test-cases">tagging test =
cases</a>.</td>
</tr>
<tr><td>Test Setup</td>
<td>Used for specifying a default <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#test-setup-and-teardown">test setup</a>.</td>
</tr>
<tr><td>Test Teardown</td>
<td>Used for specifying a default <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#test-setup-and-teardown">test teardown</a>.</td>
</tr>
<tr><td>Test Template</td>
<td>Used for specifying a default <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#test-templates">template keyword</a>
for test cases.</td>
</tr>
<tr><td>Test Timeout</td>
<td>Used for specifying a default <a class=3D"reference internal" href=3D"h=
ttp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html=
#test-case-timeout">test case timeout</a>.</td>
</tr>
<tr><td>Task Setup,
Task Teardown,
Task Template,
Task Timeout</td>
<td>Aliases for Test Setup, Test Teardown, Test Template
and Test Timeout, respectively, that can be used when
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#creating-tasks">creating tasks</a=
>.</td>
</tr>
</tbody>
</table>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">All setting names can optionally include a colon at the e=
nd, for
example <span class=3D"setting">Documentation:</span>. This can make readin=
g the settings easier
especially when using the plain text format.</p>
</div>
</div>
<div class=3D"section" id=3D"test-case-table">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id880">6.1.2&nbsp;&nbsp;&nbsp;Test C=
ase table</a></h3>
<p>The settings in the Test Case table are always specific to the test
case for which they are defined. Some of these settings override the
default values defined in the Settings table.</p>
<p>Exactly same settings are available when <a class=3D"reference internal"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#creating-tasks">creating tasks</a> in the Task table.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Settings available in the Test Case table</caption>
<colgroup>
<col width=3D"23%">
<col width=3D"77%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Name</th>
<th class=3D"head">Description</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>[Documentation]</td>
<td>Used for specifying a <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-ca=
se-name-and-documentation">test case documentation</a>.</td>
</tr>
<tr><td>[Tags]</td>
<td>Used for <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#tagging-test-cases">=
tagging test cases</a>.</td>
</tr>
<tr><td>[Setup]</td>
<td>Used for specifying a <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-se=
tup-and-teardown">test setup</a>.</td>
</tr>
<tr><td>[Teardown]</td>
<td>Used for specifying a <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-se=
tup-and-teardown">test teardown</a>.</td>
</tr>
<tr><td>[Template]</td>
<td>Used for specifying a <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-te=
mplates">template keyword</a>.</td>
</tr>
<tr><td>[Timeout]</td>
<td>Used for specifying a <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#test-ca=
se-timeout">test case timeout</a>.</td>
</tr>
</tbody>
</table>
</div>
<div class=3D"section" id=3D"id406">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id881">6.1.3&nbsp;&nbsp;&nbsp;Keywor=
d table</a></h3>
<p>Settings in the Keyword table are specific to the user keyword for
which they are defined.</p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Settings available in the Keyword table</caption>
<colgroup>
<col width=3D"23%">
<col width=3D"77%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Name</th>
<th class=3D"head">Description</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>[Documentation]</td>
<td>Used for specifying a <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#user-ke=
yword-documentation">user keyword documentation</a>.</td>
</tr>
<tr><td>[Tags]</td>
<td>Used for specifying <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#user-keyw=
ord-tags">user keyword tags</a>.</td>
</tr>
<tr><td>[Arguments]</td>
<td>Used for specifying <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#user-keyw=
ord-arguments">user keyword arguments</a>.</td>
</tr>
<tr><td>[Return]</td>
<td>Used for specifying <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#user-keyw=
ord-return-values">user keyword return values</a>.</td>
</tr>
<tr><td>[Teardown]</td>
<td>Used for specifying <a class=3D"reference internal" href=3D"http://robo=
tframework.org/robotframework/latest/RobotFrameworkUserGuide.html#user-keyw=
ord-teardown">user keyword teardown</a>.</td>
</tr>
<tr><td>[Timeout]</td>
<td>Used for specifying a <a class=3D"reference internal" href=3D"http://ro=
botframework.org/robotframework/latest/RobotFrameworkUserGuide.html#user-ke=
yword-timeout">user keyword timeout</a>.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class=3D"section" id=3D"all-command-line-options">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id874">6.2&nbsp;&nbsp;&nbsp;All comm=
and line options</a></h2>
<p>This appendix lists all the command line options that are available
when <a class=3D"reference internal" href=3D"http://robotframework.org/robo=
tframework/latest/RobotFrameworkUserGuide.html#id175">executing test cases<=
/a>  and when <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#post-processing-out=
puts">post-processing outputs</a>.
Also environment variables affecting execution and post-processing
are listed.</p>
<div class=3D"contents local topic" id=3D"id407">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#command-line-options-for-test=
-execution" id=3D"id882">6.2.1&nbsp;&nbsp;&nbsp;Command line options for te=
st execution</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#command-line-options-for-post=
-processing-outputs" id=3D"id883">6.2.2&nbsp;&nbsp;&nbsp;Command line optio=
ns for post-processing outputs</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#environment-variables-for-exe=
cution-and-post-processing" id=3D"id884">6.2.3&nbsp;&nbsp;&nbsp;Environment=
 variables for execution and post-processing</a></li>
</ul>
</div>
<div class=3D"section" id=3D"command-line-options-for-test-execution">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id882">6.2.1&nbsp;&nbsp;&nbsp;Comman=
d line options for test execution</a></h3>
<blockquote>
<table class=3D"docutils option-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"option">
<col class=3D"description">
</colgroup><tbody valign=3D"top">
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--rpa</span></kbd></td>
<td>Turn on <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#task-execution">gener=
ic automation</a> mode.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-F</span>, <span class=3D"option">--extension <=
var>&lt;value&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#selecting-=
files-to-parse">Parse only these files</a> when executing a directory.</td>=
</tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-N</span>, <span class=3D"option">--name <var>&=
lt;name&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-th=
e-name">Sets the name</a> of the top-level test suite.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-D</span>, <span class=3D"option">--doc <var>&l=
t;document&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-th=
e-documentation">Sets the documentation</a> of the top-level test suite.</t=
d></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-M</span>, <span class=3D"option">--metadata <v=
ar>&lt;name:value&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-fr=
ee-metadata">Sets free metadata</a> for the top level test suite.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-G</span>, <span class=3D"option">--settag <var=
>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-ta=
gs">Sets the tag(s)</a> to all executed test cases.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-t</span>, <span class=3D"option">--test <var>&=
lt;name&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#by-test-su=
ite-and-test-case-names">Selects the test cases by name</a>.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--task <var>&lt;name&gt;</var></span></kbd></td=
>
<td>Alias for <span class=3D"option">--test</span> that can be used when <a=
 class=3D"reference internal" href=3D"http://robotframework.org/robotframew=
ork/latest/RobotFrameworkUserGuide.html#executing-tasks">executing tasks</a=
>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-s</span>, <span class=3D"option">--suite <var>=
&lt;name&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#by-test-su=
ite-and-test-case-names">Selects the test suites</a> by name.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-R</span>, <span class=3D"option">--rerunfailed=
 <var>&lt;file&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#re-executi=
ng-failed-test-cases">Selects failed tests</a> from an earlier <a class=3D"=
reference internal" href=3D"http://robotframework.org/robotframework/latest=
/RobotFrameworkUserGuide.html#output-file">output file</a>
to be re-executed.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-S</span>, <span class=3D"option">--rerunfailed=
suites <var>&lt;file&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#re-executi=
ng-failed-test-suites">Selects failed test suites</a> from an earlier
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#output-file">output file</a> to b=
e re-executed.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-i</span>, <span class=3D"option">--include <va=
r>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#by-tag-nam=
es">Selects the test cases</a> by tag.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-e</span>, <span class=3D"option">--exclude <va=
r>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#by-tag-nam=
es">Selects the test cases</a> by tag.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-c</span>, <span class=3D"option">--critical <v=
ar>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Tests that have the given tag are <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#setting-criticality">considered critical</a>.</td><=
/tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-n</span>, <span class=3D"option">--noncritical=
 <var>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Tests that have the given tag are <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#setting-criticality">not critical</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-v</span>, <span class=3D"option">--variable <v=
ar>&lt;name:value&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#setti=
ng-variables-in-command-line">individual variables</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-V</span>, <span class=3D"option">--variablefil=
e <var>&lt;path:args&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets variables using <a class=3D"reference internal"=
 href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUser=
Guide.html#variable-files">variable files</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-d</span>, <span class=3D"option">--outputdir <=
var>&lt;dir&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Defines where to <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#output-directory">create output files</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-o</span>, <span class=3D"option">--output <var=
>&lt;file&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the path to the generated <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#output-file">output file</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-l</span>, <span class=3D"option">--log <var>&l=
t;file&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the path to the generated <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#log-file">log file</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-r</span>, <span class=3D"option">--report <var=
>&lt;file&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the path to the generated <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#report-file">report file</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-x</span>, <span class=3D"option">--xunit <var>=
&lt;file&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the path to the generated <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#xunit-compatible-result-file">xUnit compatible result =
file</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--xunitskipnoncritical</span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Mark non-critical tests on <a class=3D"reference int=
ernal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewo=
rkUserGuide.html#xunit-compatible-result-file">xUnit compatible result file=
</a> as skipped.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-b</span>, <span class=3D"option">--debugfile <=
var>&lt;file&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>A <a class=3D"reference internal" href=3D"http://rob=
otframework.org/robotframework/latest/RobotFrameworkUserGuide.html#debug-fi=
le">debug file</a> that is written during execution.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-T</span>, <span class=3D"option">--timestampou=
tputs</span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#timestampi=
ng-output-files">Adds a timestamp</a> to all output files.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--splitlog</span></kbd></td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#splitting-logs">Split log fil=
e</a> into smaller pieces that open in
browser transparently.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--logtitle <var>&lt;title&gt;</var></span></kbd=
></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-ti=
tles">Sets a title</a> for the generated test log.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--reporttitle <var>&lt;title&gt;</var></span></=
kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-ti=
tles">Sets a title</a> for the generated test report.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--reportbackground <var>&lt;colors&gt;</var></s=
pan></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-ba=
ckground-colors">Sets background colors</a> of the generated report.</td></=
tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--maxerrorlines <var>&lt;lines&gt;</var></span>=
</kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the number of <a class=3D"reference internal" h=
ref=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGu=
ide.html#limiting-error-message-length-in-reports">error lines</a> shown in=
 reports when tests fail.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-L</span>, <span class=3D"option">--loglevel <v=
ar>&lt;level&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-lo=
g-level">Sets the threshold level</a> for logging. Optionally
the default <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#visible-log-level">vi=
sible log level</a> can be given
separated with a colon (:).</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--suitestatlevel <var>&lt;level&gt;</var></span=
></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Defines how many <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#configuring-displayed-suite-statistics">levels to show</a> in the
<em>Statistics by Suite</em> table in outputs.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--tagstatinclude <var>&lt;tag&gt;</var></span><=
/kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#including-=
and-excluding-tag-statistics">Includes only these tags</a> in the <em>Stati=
stics by Tag</em> table.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--tagstatexclude <var>&lt;tag&gt;</var></span><=
/kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#including-=
and-excluding-tag-statistics">Excludes these tags</a> from the <em>Statisti=
cs by Tag</em> table.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--tagstatcombine <var>&lt;tags:title&gt;</var><=
/span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Creates <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#ge=
nerating-combined-tag-statistics">combined statistics based on tags</a>.</t=
d></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--tagdoc <var>&lt;pattern:doc&gt;</var></span><=
/kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Adds <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#addin=
g-documentation-to-tags">documentation to the specified tags</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--tagstatlink <var>&lt;pattern:link:title&gt;</=
var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Adds <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#creat=
ing-links-from-tag-names">external links</a> to the <em>Statistics by Tag</=
em> table.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--removekeywords <var>&lt;all|passed|name:patte=
rn|tag:pattern|for|wuks&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#removing-a=
nd-flattening-keywords">Removes keyword data</a>
from the generated log file.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--flattenkeywords <var>&lt;for|foritem|name:pat=
tern|tag:pattern&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#removing-a=
nd-flattening-keywords">Flattens keywords</a>
in the generated log file.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--listener <var>&lt;name:args&gt;</var></span><=
/kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-li=
steners">Sets a listener</a> for monitoring test execution.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--warnonskippedfiles</span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Deprecated. Nowadays all skipped files are reported.=
</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--nostatusrc</span></kbd></td>
<td>Sets the <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#return-codes">return=
 code</a> to zero regardless of failures
in test cases. Error codes are returned normally.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--runemptysuite</span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Executes tests also if the selected <a class=3D"refe=
rence internal" href=3D"http://robotframework.org/robotframework/latest/Rob=
otFrameworkUserGuide.html#when-no-tests-match-selection">test suites are em=
pty</a>.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--dryrun</span></kbd></td>
<td>In the <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#dry-run">dry run</a> m=
ode tests are run without executing
keywords originating from test libraries. Useful for
validating test data syntax.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-X</span>, <span class=3D"option">--exitonfailu=
re</span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#stopping-w=
hen-first-test-case-fails">Stops test execution</a>
if any critical test fails.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--exitonerror</span></kbd></td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#stopping-on-parsing-or-execut=
ion-error">Stops test execution</a>
if any error occurs when parsing test data, importing libraries, and so on.=
</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--skipteardownonexit</span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#handling-t=
eardowns">Skips teardowns</a> is test execution is prematurely stopped.</td=
></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--prerunmodifier <var>&lt;name:args&gt;</var></=
span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Activate <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#p=
rogrammatic-modification-of-test-data">programmatic modification of test da=
ta</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--prerebotmodifier <var>&lt;name:args&gt;</var>=
</span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Activate <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#p=
rogrammatic-modification-of-results">programmatic modification of results</=
a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--randomize <var>&lt;all|suites|tests|none&gt;<=
/var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#randomizin=
g-execution-order">Randomizes</a> test execution order.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--console <var>&lt;verbose|dotted|quiet|none&gt=
;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#console-ou=
tput-type">Console output type</a>.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--dotted</span></kbd></td>
<td>Shortcut for <code>--console dotted</code>.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--quiet</span></kbd></td>
<td>Shortcut for <code>--console quiet</code>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-W</span>, <span class=3D"option">--consolewidt=
h <var>&lt;width&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#console-wi=
dth">Sets the width</a> of the console output.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-C</span>, <span class=3D"option">--consolecolo=
rs <var>&lt;auto|on|ansi|off&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#console-co=
lors">Specifies are colors</a> used on the console.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-K</span>, <span class=3D"option">--consolemark=
ers <var>&lt;auto|on|off&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Show <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#conso=
le-markers">markers on the console</a> when top level
keywords in a test case end.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-P</span>, <span class=3D"option">--pythonpath =
<var>&lt;path&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Additional locations to add to the <a class=3D"refer=
ence internal" href=3D"http://robotframework.org/robotframework/latest/Robo=
tFrameworkUserGuide.html#module-search-path">module search path</a>.</td></=
tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-E</span>, <span class=3D"option">--escape <var=
>&lt;what:with&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Deprecated. Use console escape mechanism instead.</t=
d></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-A</span>, <span class=3D"option">--argumentfil=
e <var>&lt;path&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>A text file to <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#argument-files">read more arguments</a> from.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">-h</span>, <span class=3D"option">--help</span>=
</kbd></td>
<td>Prints <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#getting-help-and-versi=
on-information">usage instructions</a>.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--version</span></kbd></td>
<td>Prints the <a class=3D"reference internal" href=3D"http://robotframewor=
k.org/robotframework/latest/RobotFrameworkUserGuide.html#getting-help-and-v=
ersion-information">version information</a>.</td></tr>
</tbody>
</table>
</blockquote>
</div>
<div class=3D"section" id=3D"command-line-options-for-post-processing-outpu=
ts">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id883">6.2.2&nbsp;&nbsp;&nbsp;Comman=
d line options for post-processing outputs</a></h3>
<blockquote>
<table class=3D"docutils option-list" frame=3D"void" rules=3D"none">
<colgroup><col class=3D"option">
<col class=3D"description">
</colgroup><tbody valign=3D"top">
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--rpa</span></kbd></td>
<td>Turn on <a class=3D"reference internal" href=3D"http://robotframework.o=
rg/robotframework/latest/RobotFrameworkUserGuide.html#task-execution">gener=
ic automation</a> mode.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">-R</span>, <span class=3D"option">--merge</span=
></kbd></td>
<td>Changes result combining behavior to <a class=3D"reference internal" hr=
ef=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGui=
de.html#merging-outputs">merging</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-N</span>, <span class=3D"option">--name <var>&=
lt;name&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-th=
e-name">Sets the name</a> of the top level test suite.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-D</span>, <span class=3D"option">--doc <var>&l=
t;document&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-th=
e-documentation">Sets the documentation</a> of the top-level test suite.</t=
d></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-M</span>, <span class=3D"option">--metadata <v=
ar>&lt;name:value&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-fr=
ee-metadata">Sets free metadata</a> for the top-level test suite.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-G</span>, <span class=3D"option">--settag <var=
>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-ta=
gs">Sets the tag(s)</a> to all processed test cases.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-t</span>, <span class=3D"option">--test <var>&=
lt;name&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#by-test-su=
ite-and-test-case-names">Selects the test cases by name</a>.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--task <var>&lt;name&gt;</var></span></kbd></td=
>
<td>Alias for <span class=3D"option">--test</span>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-s</span>, <span class=3D"option">--suite <var>=
&lt;name&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#by-test-su=
ite-and-test-case-names">Selects the test suites</a> by name.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-i</span>, <span class=3D"option">--include <va=
r>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#by-tag-nam=
es">Selects the test cases</a> by tag.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-e</span>, <span class=3D"option">--exclude <va=
r>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#by-tag-nam=
es">Selects the test cases</a> by tag.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-c</span>, <span class=3D"option">--critical <v=
ar>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Tests that have the given tag are <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#setting-criticality">considered critical</a>.</td><=
/tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-n</span>, <span class=3D"option">--noncritical=
 <var>&lt;tag&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Tests that have the given tag are <a class=3D"refere=
nce internal" href=3D"http://robotframework.org/robotframework/latest/Robot=
FrameworkUserGuide.html#setting-criticality">not critical</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-d</span>, <span class=3D"option">--outputdir <=
var>&lt;dir&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Defines where to <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#output-directory">create output files</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-o</span>, <span class=3D"option">--output <var=
>&lt;file&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the path to the generated <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#output-file">output file</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-l</span>, <span class=3D"option">--log <var>&l=
t;file&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the path to the generated <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#log-file">log file</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-r</span>, <span class=3D"option">--report <var=
>&lt;file&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the path to the generated <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#report-file">report file</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-x</span>, <span class=3D"option">--xunit <var>=
&lt;file&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the path to the generated <a class=3D"reference=
 internal" href=3D"http://robotframework.org/robotframework/latest/RobotFra=
meworkUserGuide.html#xunit-compatible-result-file">xUnit compatible result =
file</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--xunitskipnoncritical</span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Mark non-critical tests on <a class=3D"reference int=
ernal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewo=
rkUserGuide.html#xunit-compatible-result-file">xUnit compatible result file=
</a> as skipped.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-T</span>, <span class=3D"option">--timestampou=
tputs</span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#timestampi=
ng-output-files">Adds a timestamp</a> to all output files.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--splitlog</span></kbd></td>
<td><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#splitting-logs">Split log fil=
e</a> into smaller pieces that open in
browser transparently.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--logtitle <var>&lt;title&gt;</var></span></kbd=
></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-ti=
tles">Sets a title</a> for the generated test log.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--reporttitle <var>&lt;title&gt;</var></span></=
kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-ti=
tles">Sets a title</a> for the generated test report.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--reportbackground <var>&lt;colors&gt;</var></s=
pan></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-ba=
ckground-colors">Sets background colors</a> of the generated report.</td></=
tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-L</span>, <span class=3D"option">--loglevel <v=
ar>&lt;level&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#setting-lo=
g-level">Sets the threshold level</a> to select log messages.
Optionally the default <a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#visible-lo=
g-level">visible log level</a> can be given
separated with a colon (:).</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--suitestatlevel <var>&lt;level&gt;</var></span=
></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Defines how many <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#configuring-displayed-suite-statistics">levels to show</a> in the
<em>Statistics by Suite</em> table in outputs.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--tagstatinclude <var>&lt;tag&gt;</var></span><=
/kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#including-=
and-excluding-tag-statistics">Includes only these tags</a> in the <em>Stati=
stics by Tag</em> table.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--tagstatexclude <var>&lt;tag&gt;</var></span><=
/kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#including-=
and-excluding-tag-statistics">Excludes these tags</a> from the <em>Statisti=
cs by Tag</em> table.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--tagstatcombine <var>&lt;tags:title&gt;</var><=
/span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Creates <a class=3D"reference internal" href=3D"http=
://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#ge=
nerating-combined-tag-statistics">combined statistics based on tags</a>.</t=
d></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--tagdoc <var>&lt;pattern:doc&gt;</var></span><=
/kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Adds <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#addin=
g-documentation-to-tags">documentation to the specified tags</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--tagstatlink <var>&lt;pattern:link:title&gt;</=
var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Adds <a class=3D"reference internal" href=3D"http://=
robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#creat=
ing-links-from-tag-names">external links</a> to the <em>Statistics by Tag</=
em> table.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--removekeywords <var>&lt;all|passed|name:patte=
rn|tag:pattern|for|wuks&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#removing-a=
nd-flattening-keywords">Removes keyword data</a>
from the generated outputs.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--flattenkeywords <var>&lt;for|foritem|name:pat=
tern|tag:pattern&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#removing-a=
nd-flattening-keywords">Flattens keywords</a>
in the generated outputs.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--starttime <var>&lt;timestamp&gt;</var></span>=
</kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#s=
etting-start-and-end-time-of-execution">starting time</a> of test execution=
 when creating
reports.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--endtime <var>&lt;timestamp&gt;</var></span></=
kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Sets the <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#s=
etting-start-and-end-time-of-execution">ending time</a> of test execution w=
hen creating reports.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--nostatusrc</span></kbd></td>
<td>Sets the <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#return-codes">return=
 code</a> to zero regardless of failures
in test cases. Error codes are returned normally.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--processemptysuite</span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Processes output files even if files contain
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#when-no-tests-match-selection">em=
pty test suites</a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">--prerebotmodifier <var>&lt;name:args&gt;</var>=
</span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Activate <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#p=
rogrammatic-modification-of-results">programmatic modification of results</=
a>.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-C</span>, <span class=3D"option">--consolecolo=
rs <var>&lt;auto|on|ansi|off&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td><a class=3D"reference internal" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#console-co=
lors">Specifies are colors</a> used on the console.</td></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-P</span>, <span class=3D"option">--pythonpath =
<var>&lt;path&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Additional locations to add to the <a class=3D"refer=
ence internal" href=3D"http://robotframework.org/robotframework/latest/Robo=
tFrameworkUserGuide.html#module-search-path">module search path</a>.</td></=
tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-E</span>, <span class=3D"option">--escape <var=
>&lt;what:with&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>Deprecated. Use console escape mechanism instead.</t=
d></tr>
<tr><td class=3D"option-group" colspan=3D"2">
<kbd><span class=3D"option">-A</span>, <span class=3D"option">--argumentfil=
e <var>&lt;path&gt;</var></span></kbd></td>
</tr>
<tr><td>&nbsp;</td><td>A text file to <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#argument-files">read more arguments</a> from.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">-h</span>, <span class=3D"option">--help</span>=
</kbd></td>
<td>Prints <a class=3D"reference internal" href=3D"http://robotframework.or=
g/robotframework/latest/RobotFrameworkUserGuide.html#getting-help-and-versi=
on-information">usage instructions</a>.</td></tr>
<tr><td class=3D"option-group">
<kbd><span class=3D"option">--version</span></kbd></td>
<td>Prints the <a class=3D"reference internal" href=3D"http://robotframewor=
k.org/robotframework/latest/RobotFrameworkUserGuide.html#getting-help-and-v=
ersion-information">version information</a>.</td></tr>
</tbody>
</table>
</blockquote>
</div>
<div class=3D"section" id=3D"environment-variables-for-execution-and-post-p=
rocessing">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id884">6.2.3&nbsp;&nbsp;&nbsp;Enviro=
nment variables for execution and post-processing</a></h3>
<dl class=3D"docutils">
<dt><tt class=3D"docutils literal">ROBOT_OPTIONS</tt> and <tt class=3D"docu=
tils literal">REBOT_OPTIONS</tt></dt>
<dd>Space separated list of default options to be placed
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#robot-options-and-rebot-options-e=
nvironment-variables">in front of any explicit options</a> on the command l=
ine.</dd>
<dt><tt class=3D"docutils literal">ROBOT_SYSLOG_FILE</tt></dt>
<dd>Path to a <a class=3D"reference internal" href=3D"http://robotframework=
.org/robotframework/latest/RobotFrameworkUserGuide.html#system-log">syslog<=
/a> file where Robot Framework writes internal
information about parsing test case files and running
tests.</dd>
<dt><tt class=3D"docutils literal">ROBOT_SYSLOG_LEVEL</tt></dt>
<dd>Log level to use when writing to the <a class=3D"reference internal" hr=
ef=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGui=
de.html#system-log">syslog</a> file.</dd>
<dt><tt class=3D"docutils literal">ROBOT_INTERNAL_TRACES</tt></dt>
<dd>When set to any non-empty value, Robot Framework's
internal methods are included in <a class=3D"reference internal" href=3D"ht=
tp://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#=
debugging-problems">error tracebacks</a>.</dd>
</dl>
</div>
</div>
<div class=3D"section" id=3D"documentation-formatting">
<span id=3D"id410"></span><h2><a class=3D"toc-backref" href=3D"http://robot=
framework.org/robotframework/latest/RobotFrameworkUserGuide.html#id875">6.3=
&nbsp;&nbsp;&nbsp;Documentation formatting</a></h2>
<p>It is possible to use simple HTML formatting with <a class=3D"reference =
internal" href=3D"http://robotframework.org/robotframework/latest/RobotFram=
eworkUserGuide.html#test-suite-name-and-documentation">test suite</a>,
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#test-case-name-and-documentation"=
>test case</a> and <a class=3D"reference internal" href=3D"http://robotfram=
ework.org/robotframework/latest/RobotFrameworkUserGuide.html#user-keyword-d=
ocumentation">user keyword</a> documentation and <a class=3D"reference inte=
rnal" href=3D"http://robotframework.org/robotframework/latest/RobotFramewor=
kUserGuide.html#free-test-suite-metadata">free test suite
metadata</a> in the test data, as well as when <a class=3D"reference intern=
al" href=3D"http://robotframework.org/robotframework/latest/RobotFrameworkU=
serGuide.html#documenting-libraries">documenting test
libraries</a>.  The formatting is similar to the style used in most
wikis, and it is designed to be understandable both as plain text and
after the HTML transformation.</p>
<div class=3D"contents local topic" id=3D"id415">
<ul class=3D"auto-toc simple">
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#representing-newlines" id=3D"=
id885">6.3.1&nbsp;&nbsp;&nbsp;Representing newlines</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#newlines-in-test-data" id=3D"=
id886">Newlines in test data</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#documentation-in-test-librari=
es" id=3D"id887">Documentation in test libraries</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#paragraphs" id=3D"id888">6.3.=
2&nbsp;&nbsp;&nbsp;Paragraphs</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#inline-styles" id=3D"id889">6=
.3.3&nbsp;&nbsp;&nbsp;Inline styles</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#urls" id=3D"id890">6.3.4&nbsp=
;&nbsp;&nbsp;URLs</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#custom-links-and-images" id=
=3D"id891">6.3.5&nbsp;&nbsp;&nbsp;Custom links and images</a><ul>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#link-with-text-content" id=3D=
"id892">Link with text content</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#link-with-image-content" id=
=3D"id893">Link with image content</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#image-with-title-text" id=3D"=
id894">Image with title text</a></li>
</ul>
</li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#section-titles" id=3D"id895">=
6.3.6&nbsp;&nbsp;&nbsp;Section titles</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#tables" id=3D"id896">6.3.7&nb=
sp;&nbsp;&nbsp;Tables</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#lists" id=3D"id897">6.3.8&nbs=
p;&nbsp;&nbsp;Lists</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#preformatted-text" id=3D"id89=
8">6.3.9&nbsp;&nbsp;&nbsp;Preformatted text</a></li>
<li><a class=3D"reference internal" href=3D"http://robotframework.org/robot=
framework/latest/RobotFrameworkUserGuide.html#horizontal-ruler" id=3D"id899=
">6.3.10&nbsp;&nbsp;&nbsp;Horizontal ruler</a></li>
</ul>
</div>
<div class=3D"section" id=3D"representing-newlines">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id885">6.3.1&nbsp;&nbsp;&nbsp;Repres=
enting newlines</a></h3>
<div class=3D"section" id=3D"newlines-in-test-data">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id886">Newlines in test data</a></h4=
>
<p>When documenting test suites, test cases and keywords or adding metadata
to test suites, newlines can be added manually using <code>\n</code> <a cla=
ss=3D"reference internal" href=3D"http://robotframework.org/robotframework/=
latest/RobotFrameworkUserGuide.html#escape-sequence">escape sequence</a>.</=
p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Documentation</span><span class=3D"p">    </span><span c=
lass=3D"s">First line.\n\nSecond paragraph. This time\nwith multiple lines.=
</span><span class=3D"p"></span>
<span class=3D"kn">Metadata</span><span class=3D"p">         </span><span c=
lass=3D"s">Example list</span><span class=3D"p">    </span><span class=3D"s=
">- first item\n- second item\n- third</span><span class=3D"p"></span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">As explained in the <a class=3D"reference internal" href=
=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide=
.html#paragraphs">Paragraphs</a> section below, the single newline in
<code>Second paragraph, this time\nwith multiple lines.</code> does not act=
ually
affect how that paragraph is rendered. Newlines are needed when
creating <a class=3D"reference internal" href=3D"http://robotframework.org/=
robotframework/latest/RobotFrameworkUserGuide.html#lists">lists</a> or othe=
r such constructs, though.</p>
</div>
<p>Adding newlines manually to a long documentation takes some effort and e=
xtra
characters also make the documentation harder to read. This can be avoided,
though, as newlines are inserted automatically
between <a class=3D"reference internal" href=3D"http://robotframework.org/r=
obotframework/latest/RobotFrameworkUserGuide.html#dividing-test-data-to-sev=
eral-rows">continued documentation and metadata lines</a>. In practice this
means that the above example could be written also as follows.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Documentation</span><span class=3D"p"></span>
<span class=3D"p">...    </span><span class=3D"s">First line.</span><span c=
lass=3D"p"></span>
<span class=3D"p">...</span>
<span class=3D"p">...    </span><span class=3D"s">Second paragraph. This ti=
me</span><span class=3D"p"></span>
<span class=3D"p">...    </span><span class=3D"s">with multiple lines.</spa=
n><span class=3D"p"></span>
<span class=3D"kn">Metadata</span><span class=3D"p">    </span><span class=
=3D"s">Example list</span><span class=3D"p"></span>
<span class=3D"p">...    </span><span class=3D"s">- first item</span><span =
class=3D"p"></span>
<span class=3D"p">...    </span><span class=3D"s">- second item</span><span=
 class=3D"p"></span>
<span class=3D"p">...    </span><span class=3D"s">- third</span><span class=
=3D"p"></span>
</pre></div>
<p>No automatic newline is added if a line already ends with a literal newl=
ine
or if it ends with an <a class=3D"reference internal" href=3D"http://robotf=
ramework.org/robotframework/latest/RobotFrameworkUserGuide.html#escaping">e=
scaping backslash</a>. If documentation or metadata
is defined in multiple columns, cells in a same row are concatenated togeth=
er
with spaces. This kind of splitting can be a good idea especially when
using the <a class=3D"reference internal" href=3D"http://robotframework.org=
/robotframework/latest/RobotFrameworkUserGuide.html#html-format">HTML forma=
t</a> and columns are narrow. Different ways to split
documentation are illustrated in the examples below where all test cases
end up having the same two line documentation.</p>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Handling documentation split to multiple columns will cha=
nge in
Robot Framework 3.2 when also they will be concatenated together
with newlines. This change should not cause problems because,
as explained in the <a class=3D"reference internal" href=3D"http://robotfra=
mework.org/robotframework/latest/RobotFrameworkUserGuide.html#paragraphs">P=
aragraphs</a> section below, single newlines do
not affect how paragraphs actually are rendered in logs and reports.</p>
</div>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Test Case=
s ***</span><span class=3D"p"></span>
<span class=3D"gu"> Example 1</span><span class=3D"p"></span>
<span class=3D"p">     [</span><span class=3D"kn">Documentation</span><span=
 class=3D"p">]    </span><span class=3D"s">First line\n</span><span class=
=3D"p">    </span><span class=3D"s">Second line in</span><span class=3D"p">=
    </span><span class=3D"s">multiple parts</span><span class=3D"p"></span>
<span class=3D"p">     </span><span class=3D"nf">No Operation</span><span c=
lass=3D"p"></span>

<span class=3D"gu"> Example 2</span><span class=3D"p"></span>
<span class=3D"p">     [</span><span class=3D"kn">Documentation</span><span=
 class=3D"p">]   </span><span class=3D"s">First line</span><span class=3D"p=
"></span>
<span class=3D"p">     ...               </span><span class=3D"s">Second li=
ne in</span><span class=3D"p">    </span><span class=3D"s">multiple parts</=
span><span class=3D"p"></span>
<span class=3D"p">     </span><span class=3D"nf">No Operation</span><span c=
lass=3D"p"></span>

<span class=3D"gu"> Example 3</span><span class=3D"p"></span>
<span class=3D"p">     [</span><span class=3D"kn">Documentation</span><span=
 class=3D"p">]    </span><span class=3D"s">First line\n</span><span class=
=3D"p"></span>
<span class=3D"p">     ...                </span><span class=3D"s">Second l=
ine in\</span><span class=3D"p"></span>
<span class=3D"p">     ...                </span><span class=3D"s">multiple=
 parts</span><span class=3D"p"></span>
<span class=3D"p">     </span><span class=3D"nf">No Operation</span><span c=
lass=3D"p"></span>
</pre></div>
</div>
<div class=3D"section" id=3D"documentation-in-test-libraries">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id887">Documentation in test librari=
es</a></h4>
<p>With library documentations normal newlines are enough, and for
example the following keyword documentation would create same end result
as the test suite documentation in the previous section.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"k">def</span> <sp=
an class=3D"nf">example_keyword</span><span class=3D"p">():</span>
    <span class=3D"sd">"""First line.</span>

<span class=3D"sd">    Second paragraph, this time</span>
<span class=3D"sd">    with multiple lines.</span>
<span class=3D"sd">    """</span>
    <span class=3D"k">pass</span>
</pre></div>
</div>
</div>
<div class=3D"section" id=3D"paragraphs">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id888">6.3.2&nbsp;&nbsp;&nbsp;Paragr=
aphs</a></h3>
<p>All regular text in the formatted HTML
documentation is represented as paragraphs. In practice, lines separated
by a single newline will be combined in a paragraph regardless whether the
newline is added manually or automatically. Multiple paragraphs can be sepa=
rated
with an empty line (i.e. two newlines) and also tables, lists, and other
specially formatted blocks discussed in subsequent sections end a paragraph=
.</p>
<p>For example, the following test suite or resource file documentation:</p=
>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Settings =
***</span><span class=3D"p"></span>
<span class=3D"kn">Documentation</span><span class=3D"p"></span>
<span class=3D"p">...    </span><span class=3D"s">First paragraph has only =
one line.</span><span class=3D"p"></span>
<span class=3D"p">...</span>
<span class=3D"p">...    </span><span class=3D"s">Second paragraph, this ti=
me created</span><span class=3D"p"></span>
<span class=3D"p">...    </span><span class=3D"s">with multiple lines.</spa=
n><span class=3D"p"></span>
</pre></div>
<p>will be formatted in HTML as:</p>
<div class=3D"doc">
<p>First paragraph has only one line.</p>
<p>Second paragraph, this time created with multiple lines.</p>
</div></div>
<div class=3D"section" id=3D"inline-styles">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id889">6.3.3&nbsp;&nbsp;&nbsp;Inline=
 styles</a></h3>
<p>The documentation syntax supports inline styles <strong>bold</strong>, <=
em>italic</em> and <code>code</code>.
Bold text can be created by having an asterisk before and after the
selected word or words, for example <code>*this is bold*</code>. Italic
style works similarly, but the special character to use is an
underscore, for example, <code>_italic_</code>. It is also possible to have
bold italic with the syntax <code>_*bold italic*_</code>.</p>
<p>The code style is created using double backticks like <span class=3D"cod=
esc">``code``</span>.
The result is monospaced text with light gray background.</p>
<p>Asterisks, underscores or double backticks alone, or in the middle of a =
word,
do not start formatting, but punctuation characters before or after them
are allowed. When multiple lines form a <a class=3D"reference internal" hre=
f=3D"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuid=
e.html#paragraphs">paragraph</a>, all inline styles can
span over multiple lines.</p>
<table class=3D"tabular docutils">
  <caption>Inline style examples</caption>
  <tbody><tr>
    <th>Unformatted</th>
    <th>Formatted</th>
  </tr>
  <tr>
    <td>*bold*</td>
    <td><b>bold</b></td>
  </tr>
  <tr>
    <td>_italic_</td>
    <td><i>italic</i></td>
  </tr>
  <tr>
    <td>_*bold italic*_</td>
    <td><i><b>bold italic</b></i></td>
  </tr>
  <tr>
    <td>``code``</td>
    <td><code>code</code></td>
  </tr>
  <tr>
    <td>*bold*, then _italic_ and finally ``some code``</td>
    <td><b>bold</b>, then <i>italic</i> and finally <code>some code</code><=
/td>
  </tr>
  <tr>
    <td>This is *bold\n<br>on multiple\n<br>lines*.</td>
    <td>This is <b>bold</b><br><b>on multiple</b><br><b>lines</b>.</td>
  </tr>
</tbody></table></div>
<div class=3D"section" id=3D"urls">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id890">6.3.4&nbsp;&nbsp;&nbsp;URLs</=
a></h3>
<p>All strings that look like URLs are automatically converted into
clickable links. Additionally, URLs that end with extension
<span class=3D"file">.jpg</span>, <span class=3D"file">.jpeg</span>, <span =
class=3D"file">.png</span>, <span class=3D"file">.gif</span> or
<span class=3D"file">.bmp</span> (case-insensitive) will automatically crea=
te images. For
example, URLs like <code>http://example.com</code> are turned into links, a=
nd
<code>http:///host/image.jpg</code> and <code>file:///path/chart.png</code>
into images.</p>
<p>The automatic conversion of URLs to links is applied to all the data
in logs and reports, but creating images is done only for test suite,
test case and keyword documentation, and for test suite metadata.</p>
</div>
<div class=3D"section" id=3D"custom-links-and-images">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id891">6.3.5&nbsp;&nbsp;&nbsp;Custom=
 links and images</a></h3>
<p>It is possible to create custom links
and embed images using special syntax <code>[link|content]</code>. This cre=
ates
a link or image depending are <code>link</code> and <code>content</code> im=
ages.
They are considered images if they have the same image extensions that are
special with <a class=3D"reference internal" href=3D"http://robotframework.=
org/robotframework/latest/RobotFrameworkUserGuide.html#urls">URLs</a>. The =
surrounding square brackets and the pipe character
between the parts are mandatory in all cases.</p>
<div class=3D"section" id=3D"link-with-text-content">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id892">Link with text content</a></h=
4>
<p>If neither <code>link</code> nor <code>content</code> is an image, the e=
nd result is
a normal link where <code>link</code> is the link target and <code>content<=
/code>
the visible text:</p>
<pre class=3D"literal-block">[file.html|this file] -&gt; &lt;a href=3D"file=
.html"&gt;this file&lt;/a&gt;
[http://host|that host] -&gt; &lt;a href=3D"http://host"&gt;that host&lt;/a=
&gt;
</pre>
</div>
<div class=3D"section" id=3D"link-with-image-content">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id893">Link with image content</a></=
h4>
<p>If <code>content</code> is an image, you get a link where the link conte=
nt is an
image. Link target is created by <code>link</code> and it can be either tex=
t or image:</p>
<pre class=3D"literal-block">[robot.html|robot.png] -&gt; &lt;a href=3D"rob=
ot.html"&gt;&lt;img src=3D"robot.png"&gt;&lt;/a&gt;
[image.jpg|thumb.jpg] -&gt; &lt;a href=3D"image.jpg"&gt;&lt;img src=3D"thum=
b.jpg"&gt;&lt;/a&gt;
</pre>
</div>
<div class=3D"section" id=3D"image-with-title-text">
<h4><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id894">Image with title text</a></h4=
>
<p>If <code>link</code> is an image but <code>content</code> is not, the sy=
ntax creates an
image where the <code>content</code> is the title text shown when mouse is =
over
the image:</p>
<pre class=3D"literal-block">[robot.jpeg|Robot rocks!] -&gt; &lt;img src=3D=
"robot.jpeg" title=3D"Robot rocks!"&gt;
</pre>
</div>
</div>
<div class=3D"section" id=3D"section-titles">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id895">6.3.6&nbsp;&nbsp;&nbsp;Sectio=
n titles</a></h3>
<p>If documentation gets longer, it is often a good idea to split it into
sections. It is possible to separate
sections with titles using syntax <code>=3D My Title =3D</code>, where the =
number of
equal signs denotes the level of the title:</p>
<pre class=3D"literal-block">=3D First section =3D

=3D=3D Subsection =3D=3D

Some text.

=3D=3D Second subsection =3D=3D

More text.

=3D Second section =3D

You probably got the idea.
</pre>
<p>Notice that only three title levels are supported and that spaces betwee=
n
equal signs and the title text are mandatory.</p>
</div>
<div class=3D"section" id=3D"tables">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id896">6.3.7&nbsp;&nbsp;&nbsp;Tables=
</a></h3>
<p>Tables are created using pipe characters with spaces around them
as column separators and newlines as row separators. Header
cells can be created by surrounding the cell content with equal signs
and optional spaces like <code>=3D Header =3D</code> or <code>=3DHeader=3D<=
/code>. Tables
cells can also contain links and formatting such as bold and italic:</p>
<pre class=3D"literal-block">| =3DA=3D |  =3DB=3D  | =3D C =3D  |
| _1_ | Hello | world! |
| _2_ | Hi    |
</pre>
<p>The created table always has a thin border and normal text is left-align=
ed.
Text in header cells is bold and centered. Empty cells are automatically
added to make rows equally long. For example, the above example would be
formatted like this in HTML:</p>
<div class=3D"doc">
  <table>
    <tbody><tr><th>A</th><th>B</th><th>C</th></tr>
    <tr><td><i>1</i></td><td>Hello</td><td>world</td></tr>
    <tr><td><i>2</i></td><td>Hi</td><td></td></tr>
  </tbody></table>
</div></div>
<div class=3D"section" id=3D"lists">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id897">6.3.8&nbsp;&nbsp;&nbsp;Lists<=
/a></h3>
<p>Lists are created by starting a line with a hyphen and space ('- '). Lis=
t items
can be split into multiple lines by indenting continuing lines with one or =
more
spaces. A line that does not start with '- ' and is not indented ends the l=
ist:</p>
<pre class=3D"literal-block">Example:
- a list item
- second list item
  is continued

This is outside the list.
</pre>
<p>The above documentation is formatted like this in HTML:</p>
<div class=3D"doc">
<p>Example:</p>
<ul>
  <li>a list item</li>
  <li>second list item is continued</li>
</ul>
<p>This is outside the list.</p>
</div></div>
<div class=3D"section" id=3D"preformatted-text">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id898">6.3.9&nbsp;&nbsp;&nbsp;Prefor=
matted text</a></h3>
<p>It is possible to embed blocks of
preformatted text in the documentation. Preformatted block is created by
starting lines with '| ', one space being mandatory after the pipe characte=
r
except on otherwise empty lines. The starting '| ' sequence will be removed
from the resulting HTML, but all other whitespace is preserved.</p>
<p>In the following documentation, the two middle lines form a preformatted
block when converted to HTML:</p>
<pre class=3D"literal-block">Doc before block:
| inside block
|    some   additional whitespace
After block.
</pre>
<p>The above documentation is formatted like this:</p>
<div class=3D"doc">
<p>Doc before block:</p>
<pre>inside block
  some   additional whitespace</pre>
<p>After block.</p>
</div><p>When documenting suites, tests or keywords in Robot Framework test=
 data,
having multiple spaces requires <a class=3D"reference internal" href=3D"htt=
p://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#e=
scaping">escaping</a> with a backslash to prevent
ignoring spaces. The example above would thus be written like this:</p>
<pre class=3D"literal-block">Doc before block:
| inside block
| \ \ \ some \ \ additional whitespace
After block.
</pre>
</div>
<div class=3D"section" id=3D"horizontal-ruler">
<h3><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id899">6.3.10&nbsp;&nbsp;&nbsp;Horiz=
ontal ruler</a></h3>
<p>Horizontal rulers (the <code>&lt;hr&gt;</code> tag) make it possible to =
separate larger
sections from each others, and they can be created by having three or more
hyphens alone on a line:</p>
<pre class=3D"literal-block">Some text here.

---

More text...
</pre>
<p>The above documentation is formatted like this:</p>
<div class=3D"doc">
<p>Some text here.</p>
<hr>
<p>More text...</p>
</div></div>
</div>
<div class=3D"section" id=3D"time-format">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id876">6.4&nbsp;&nbsp;&nbsp;Time for=
mat</a></h2>
<p>Robot Framework has its own time format that is both flexible to use and=
 easy
to understand. It is used by several keywords (for example, <a class=3D"ref=
erence external" href=3D"http://robotframework.org/robotframework/latest/li=
braries/BuiltIn.html">BuiltIn</a> keywords
<span class=3D"name">Sleep</span> and <span class=3D"name">Wait Until Keywo=
rd Succeeds</span>), <a class=3D"reference external" href=3D"http://robotfr=
amework.org/robotframework/latest/libraries/DateTime.html">DateTime</a> lib=
rary, and
<a class=3D"reference internal" href=3D"http://robotframework.org/robotfram=
ework/latest/RobotFrameworkUserGuide.html#timeouts">timeouts</a>.</p>
<div class=3D"section" id=3D"time-as-number">
<h3>6.4.1&nbsp;&nbsp;&nbsp;Time as number</h3>
<p>The time can always be given as a plain number, in which case it is
interpreted to be seconds. Both integers and floating point numbers
work, and it is possible to use either real numbers or strings
containing numerical values.</p>
</div>
<div class=3D"section" id=3D"time-as-time-string">
<h3>6.4.2&nbsp;&nbsp;&nbsp;Time as time string</h3>
<p>Representing the time as a time string means using a format such as
<code>2 minutes 42 seconds</code>, which is normally easier to understand t=
han
just having the value as seconds. It is, for example, not so easy to
understand how long a time <code>4200</code> is in seconds, but
<code>1 hour 10 minutes</code> is clear immediately.</p>
<p>The basic idea of this format is having first a number and then a text
specifying what time that number represents. Numbers can be either
integers or floating point numbers, the whole format is case and space
insensitive, and it is possible to add <code>-</code> prefix to specify neg=
ative
times. The available time specifiers are:</p>
<ul class=3D"simple">
<li>days, day, d</li>
<li>hours, hour, h</li>
<li>minutes, minute, mins, min, m</li>
<li>seconds, second, secs, sec, s</li>
<li>milliseconds, millisecond, millis, ms</li>
</ul>
<p>Examples:</p>
<pre class=3D"literal-block">1 min 30 secs
1.5 minutes
90 s
1 day 2 hours 3 minutes 4 seconds 5 milliseconds
1d 2h 3m 4s 5ms
- 10 seconds
</pre>
</div>
<div class=3D"section" id=3D"time-as-timer-string">
<h3>6.4.3&nbsp;&nbsp;&nbsp;Time as "timer" string</h3>
<p>Time can also be given in timer like
format <code>hh:mm:ss.mil</code>. In this format  both hour and millisecond=
 parts
are optional, leading and trailing zeros can be left out when they are not
meaningful, and negative times can be represented by adding the <code>-</co=
de>
prefix. For example, following timer and time string values are identical:<=
/p>
<table border=3D"1" class=3D"tabular docutils">
<caption>Timer and time string examples</caption>
<colgroup>
<col width=3D"24%">
<col width=3D"76%">
</colgroup>
<thead valign=3D"bottom">
<tr><th class=3D"head">Timer</th>
<th class=3D"head">Time string</th>
</tr>
</thead>
<tbody valign=3D"top">
<tr><td>00:00:01</td>
<td>1 second</td>
</tr>
<tr><td>01:02:03</td>
<td>1 hour 2 minutes 3 seconds</td>
</tr>
<tr><td>1:00:00</td>
<td>1 hour</td>
</tr>
<tr><td>100:00:00</td>
<td>100 hours</td>
</tr>
<tr><td>00:02</td>
<td>2 seconds</td>
</tr>
<tr><td>42:00</td>
<td>42 minutes</td>
</tr>
<tr><td>00:01:02.003</td>
<td>1 minute 2 seconds 3 milliseconds</td>
</tr>
<tr><td>00:01.5</td>
<td>1.5 seconds</td>
</tr>
<tr><td>-01:02.345</td>
<td>- 1 minute 2 seconds 345 milliseconds</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class=3D"section" id=3D"boolean-arguments">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id877">6.5&nbsp;&nbsp;&nbsp;Boolean =
arguments</a></h2>
<p>Many keywords in Robot Framework <a class=3D"reference internal" href=3D=
"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.ht=
ml#standard-libraries">standard libraries</a> accept arguments that
are handled as Boolean values true or false. If such an argument is given a=
s
a string, it is considered false if it is an empty string or equal to
<code>FALSE</code>, <code>NONE</code>, <code>NO</code>, <code>OFF</code> or=
 <code>0</code>, case-insensitively. Other
strings are considered true unless the keyword documentation explicitly
states otherwise, and other argument types are tested using the same
<a class=3D"reference external" href=3D"http://docs.python.org/library/stdt=
ypes.html#truth-value-testing">rules as in Python</a>.</p>
<div class=3D"highlight"><pre><span></span><span class=3D"gh">*** Keywords =
***</span><span class=3D"p"></span>
<span class=3D"gu">True examples</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">x</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">y</span><span class=3D"p">}    </span><span cl=
ass=3D"s">Custom error</span><span class=3D"p">    </span><span class=3D"s"=
>values=3DTrue</span><span class=3D"p">         </span><span class=3D"c"># =
Strings are generally true.</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">x</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">y</span><span class=3D"p">}    </span><span cl=
ass=3D"s">Custom error</span><span class=3D"p">    </span><span class=3D"s"=
>values=3Dyes</span><span class=3D"p">          </span><span class=3D"c"># =
Same as the above.</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">x</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">y</span><span class=3D"p">}    </span><span cl=
ass=3D"s">Custom error</span><span class=3D"p">    </span><span class=3D"s"=
>values=3D</span><span class=3D"p">${</span><span class=3D"nv">TRUE</span><=
span class=3D"p">}      </span><span class=3D"c"># Python `True` is true.</=
span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">x</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">y</span><span class=3D"p">}    </span><span cl=
ass=3D"s">Custom error</span><span class=3D"p">    </span><span class=3D"s"=
>values=3D</span><span class=3D"p">${</span><span class=3D"nv">42</span><sp=
an class=3D"p">}        </span><span class=3D"c"># Numbers other than 0 are=
 true.</span>

<span class=3D"gu">False examples</span><span class=3D"p"></span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">x</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">y</span><span class=3D"p">}    </span><span cl=
ass=3D"s">Custom error</span><span class=3D"p">    </span><span class=3D"s"=
>values=3DFalse</span><span class=3D"p">        </span><span class=3D"c"># =
String `false` is false.</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">x</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">y</span><span class=3D"p">}    </span><span cl=
ass=3D"s">Custom error</span><span class=3D"p">    </span><span class=3D"s"=
>values=3Dno</span><span class=3D"p">           </span><span class=3D"c"># =
Also string `no` is false.</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">x</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">y</span><span class=3D"p">}    </span><span cl=
ass=3D"s">Custom error</span><span class=3D"p">    </span><span class=3D"s"=
>values=3D</span><span class=3D"p">${</span><span class=3D"nv">EMPTY</span>=
<span class=3D"p">}     </span><span class=3D"c"># Empty string is false.</=
span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">x</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">y</span><span class=3D"p">}    </span><span cl=
ass=3D"s">Custom error</span><span class=3D"p">    </span><span class=3D"s"=
>values=3D</span><span class=3D"p">${</span><span class=3D"nv">FALSE</span>=
<span class=3D"p">}     </span><span class=3D"c"># Python `False` is false.=
</span>
<span class=3D"p">    </span><span class=3D"nf">Should Be Equal</span><span=
 class=3D"p">    ${</span><span class=3D"nv">x</span><span class=3D"p">}   =
 ${</span><span class=3D"nv">y</span><span class=3D"p">}    </span><span cl=
ass=3D"s">Custom error</span><span class=3D"p">    </span><span class=3D"s"=
>values=3Dno values</span><span class=3D"p">    </span><span class=3D"c"># =
Special false string with this keyword.</span>
</pre></div>
<div class=3D"admonition note">
<p class=3D"first admonition-title">Note</p>
<p class=3D"last">Considering string <code>NONE</code> false is new in Robo=
t Framework 3.0.3 and
considering also <code>OFF</code> and <code>0</code> false is new in Robot =
Framework 3.1.</p>
</div>
</div>
<div class=3D"section" id=3D"internal-api">
<h2><a class=3D"toc-backref" href=3D"http://robotframework.org/robotframewo=
rk/latest/RobotFrameworkUserGuide.html#id878">6.6&nbsp;&nbsp;&nbsp;Internal=
 API</a></h2>
<p><a class=3D"reference external" href=3D"http://robot-framework.readthedo=
cs.org/">API documentation</a> is hosted separately
at the excellent <a class=3D"reference external" href=3D"http://readthedocs=
.org/">Read the Docs</a> service. If you are unsure how to use
certain API or is using them forward compatible, please send a question
to <a class=3D"reference internal" href=3D"http://robotframework.org/robotf=
ramework/latest/RobotFrameworkUserGuide.html#mailing-lists">mailing list</a=
>.</p>
<!-- Commonly used Robot Framework related link targets -->
<!-- 1. Getting started -->
<!-- 2. Creating test data -->
<!-- 3. Executing test cases -->
<!-- 4. Extending -->
<!-- 5. Appendices -->
<!-- 6. Misc -->
<!-- API docs -->
<!-- External link targets -->
</div>
</div>
</div>
<div class=3D"footer">
<hr class=3D"footer">
<p>Generated by <a class=3D"reference external" href=3D"http://docutils.sou=
rceforge.net/rst.html">reStructuredText</a>. Syntax highlighting by <a clas=
s=3D"reference external" href=3D"http://pygments.org/">Pygments</a>.</p>
<p>Generated on: 2019-05-24 08:14 UTC.
</p>

</div>


<div id=3D"qb-sougou-search" style=3D"display: none; opacity: 0;"><p>=E6=90=
=9C=E7=B4=A2</p><p class=3D"last-btn">=E5=A4=8D=E5=88=B6</p><iframe src=3D"=
cid:frame-1700EB8A83C9236F287DF4A5E39F54E7@mhtml.blink"></iframe></div></bo=
dy></html>
------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://robotframework.org/robotframework/latest/images/architecture.png

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
SCkAZAcpBYDsIKUAkB2kdLZIpVIKhVJfXz/fEwEL3ryl9Oeff37ppZeWLl1Kp9O5XG5oaOhUF7BB
CLm6umZmZs7G9KytrdVWSXZ0dDx06NBs7EuTXC6nTIBYhkMXs/fkgDk2PykdGRkRCoVGRkY1NTUD
AwNXr1718vKal5mQh0KhUJaZTKbkkfDw8JCQEOVDYuE58FSZn5Q+ePCgpaVl586d5ubmdDrd2tp6
165dNBotMzPTwcFB2ay9vZ3BYNy5cwchlJ6ebmFhYWBgYGRktG3bNoRQQkJCdXX1vn37eDyeUChE
CEkkktdff93ExITNZgsEgpqaGmIcJyenlJQUX1/fxYsXOzg4VFVV5efn29jY6Ovrh4SEDA4OTnX+
Tk5O77zzzksvvbRu3TorK6vLly8T9c3NzX5+fmw228bG5uLFi8r2WiaWlJTk6+trb29/9uxZ1V2w
HqHRaDQajShjjMcdR/uTM9WjA6SDtdKlzWMYHR21sbFxc3PLzc395ZdfxsbGiPr+/n4Wi3X9+nXi
4aFDh1xdXTHGtbW1DAajpqYGYzw4OFhZWUk02LBhw4kTJ5TD+vv7i0Sijo6OkZGRtLQ0DodDLF7M
5/MtLS1ramoUCkVcXJyFhcXWrVv7+/sfPHiwevXqtLQ0zRlaWVkdOXJEtcbBwUG5yDKfz3dwcOjq
6sIYFxQULF26lNiRs7NzVFTUwMBAX19fQEAAQujevXvaJ2ZtbU2s8j6RyMjI8PBwLQeo45Mz42bp
tQE0zU9KMcYdHR1//etfnZ2d9fX1jYyMUlJSiKzGxMS8+uqrRJvVq1dnZ2djjJuamhgMxpdffql2
+w3VF+Kvv/6KEGpqalJutbCwKCkpwRjz+fwPP/yQqKyurkYINTc3Ew/37NkTERGhOb1JU3r06FGi
PDw8TKVS79y5Q5zZ2tvbifqbN28SKdU+sUOHDml/opQpnWgcXZ6c2QApnTPz9u2RkZHR+++/X1VV
1d/f/8knn6SkpJw+fRohFBsbe+HChb6+vrKyso6ODmJ9dAsLi3PnzmVnZ3M4HD6fr/bmkECsQe7l
5cV7RCaTdXd3E1uNjY2JApPJJPaufDg0NKQ5muZyyWNjY3p6esqHS5cuJQo0Go1Op8vl8tbWVhaL
pdyRpaWlLhMzMTHR8RmbaBxdnhywoM3/erw0Gi00NDQ1NfXWrVsIoXXr1jk6Op45c+b777+PjIxU
LhkeHBwcHBw8PDx8/vz5LVu2eHp6mpubqy69w+FwKBTKzZs3V6xYMdQudQMAAAH9SURBVP1ZrVy5
8rffflM+HB4e/v3331euXKmli6mp6cDAgEQiIe4aQKyMPIMT0zLOpE8OWNDm51za3d39zjvv3Lp1
a2hoaGBgIC8v79atW66ursTW2NjY48ePf/311zExMURNfX19WVmZQqGg0+nGxsYUCoVKpSKEDA0N
lX+QtLW19fPzi46Obm1tRQhJpdKioiKZTPZ4M9y6deuXX3757bffKhSKhw8f7tmzh8lkEh81J0Lc
SCs9PR0hhDFOS0ub2YlNNI4uTw5Y0OYnpUwms7OzMywszMDA4Jlnnvnggw/S09P//Oc/E1vFYnF7
e/vatWuVK5fL5fKkpCRjY2MDA4P4+PgvvvjCzMwMIfTWW29dunTJwMDA3d0dIZSfn8/hcJydnYlv
WXNych57htu2bTt48OCePXtYLNaqVavu3btXWlo66V9Bvv766++++47P52/atMnOzk5ZP1MTG3ec
SZ+cx9sXIA+d1uPV3mY22NnZvf3228QfFQA5zddr4ylExv8QvHjxYldXl1gsnu+JAEAK8//tkZoV
K1bQaLSTJ0+Oe6s5AJ5CJH3HC8gPXhtzhozveAEAqiClAJAdpBQAsoOUAkB2kFIAyA5SCgDZQUoB
IDtIKQBkBykFgOwgpQCQHaQUALLT6b/t4ap/AOYRnEsBILtJrokBAMy7/wN1uezwLA4kigAAAABJ
RU5ErkJggg==

------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://robotframework.org/robotframework/latest/images/testdata_screenshots.png

iVBORw0KGgoAAAANSUhEUgAAAjcAAAElCAYAAAAY3sOjAAAAAXNSR0IArs4c6QAAAAlwSFlzAAAL
EwAACxMBAJqcGAAAAAd0SU1FB9gGEQ4gNOvyDKUAACAASURBVHja7J13QBTX+rCf3aUsRYp0pYgC
SrErWFARK9GI0aiJRr2a6E2i6YnJjUlukpvcm6KxG3uNxhIFxdh7QUHEhkqTIh2BpZet3x/8mE8C
djCo8/wDuztz5px3zsy88563SNLTbukUinx82ndCRERERETkaUOn04ntiX2rhZ54WYiIiIiIPI00
9IO5odtsyv171hW4epWb9PR0VCoVdnZ2GBsbN+rkLC8vZ8WKFchkMqZNm4ZarebXX3/FzMyMKVOm
YGBgUGt7lUrFunXrKCgo4M0338Tc3Lze/qvVauzs7DAyMmrQ/u7YsYOkpCRGjRpFmzZtxLuLiIiI
yN+AaF0R27sX0r9+odFoGDZsGD4+Ppw4caLRJ2hZWRlz5sxh/vz5VFZWUlJSwty5c1mxYgVKpbLO
9iqViuXLl/Pf//6XwsLCOr+r1WpeeOEFOnfuzLlz5xq8v6Ghofzyyy8kJSWJdxcRERGRv4Gmrog8
T8tGTbW9ei03Eomk1ueIiAjS0tLw9fWlvLycuLg4OnXqhIuLC6Wlpezfvx9zc3MCAwORyWSUlJRw
8OBBzMzMGDBgALm5ucTFxVFQUICRkRGdOnXC3t6+3g6ZmpryzjvvYGZmJlhtVCoVp0+fRq1W07lz
58cedH5+PhcuXKCqqoq2bdvi4eFRS7iXL18mMzMTPz8/EhMTycjIwNfXF0dHR1588UXatWtHq1at
ADh58iT5+fn06dOHzMxMbt26ha+vL7a2tuIdSERERKQBEa01YnsP2tYD+dwsXbqUP/74g549e3L+
/Hk0Gg1mZmbs2rWLTp068c0335CTk0NERASurq7s3LmTGTNm8MYbbxAYGMiYMWO4ceMGcrmc0tJS
DA0NWbhwIePGjatzrNLSUubOnYujoyNTpkxBq9Uybtw4wYrk4eFBUVHRIw96+/btfPjhh5SVlaHT
6ZDJZLz66qvMmzcPqVTKt99+y+LFi9FqtdjY2GBhYUFCQgKrV6/G0dGRkJAQDh48SLdu3XBzc+PH
H3/k3Llz9OjRg/Pnz6PVarG2tmb//v2CAiQiIiIi8niIikPT6NvTci6kD7NTWVkZBw4cYOTIkRQX
F/PHH3+gr6/PuHHjKC8v588//0Sj0RASEoJUKmXChAlIpVLmz5/Pvn372LRpE//9739Rq9X8/PPP
D3TMXbt2cfz4cdq2bcvx48d56623yM/Pf6RB5+Xl8cknn6BUKlmzZg0nT57Ezc2NTZs2ERYWRmxs
LCtXrsTY2JiQkBCWLVtGbm7uA7VtaGjInj176N27N3l5eezdu1e8G4mIiIg8Jk15maeh+9aQ/Wus
vj0t5+KhlJupU6fSo0cPBg0aBCAoGWPHjsXQ0JCQkBBu3bpFeHg4HTp0oGPHjpSWljJ//nyCg4N5
7bXX+OGHH1Cr1WRnZ6NWq+97zOjoaACGDRtGp06dePnll2nRosUjDf7GjRsUFRXh4eFBUFAQ7du3
JygoCKheert+/ToVFRV069aNfv360b9/f7p27fpAbf/zn//E19eX3r1715KNiIiIiMjDIyoOTe98
NNWx1tfWQyk3FhYWAOjp6dVq0MPDAz8/P65cucIvv/xCRUUFY8eOxcDAgFOnThEaGoq7uzvh4eHs
2LFDiGDSarX1HkcikQh+P/r6+gBUVFQA1Q7P9TkaPwg1PjxVVVXCsSsrK4Fqy0vN7zXf6XQ64bj3
oyZq66+yERERERF5OJqy4vA0WEOaantPsm8Nludm4sSJnDp1ivXr12NoaCj400il1fpTUVERcXFx
bNmyhfLycszMzB5o8gwYMIBFixaxdetWnJycuH79Ojk5OXWcnutj48aNnDx5EgC5XM7EiRNxcXEh
MTGR7777jlatWvHHH38glUoJCgrC0dGR5s2bExUVxQ8//IBGo+HChQu1lC0RERERkcZB9F0RZddQ
bUrhwQ56v4f7kCFDsLe3R6fTMWTIEOzs7ADo27cvL7/8Munp6UydOhUjIyOaNWv2wMfq16+f4Cfz
n//8h9LSUpydnR+ozyEhIcyfP5/58+ezbNkytFotGzduxNfXl7Vr1/L5559jZmbG/Pnz8fPzw9HR
kZ9//hkbGxvmz5/PpUuX6NSpOnOzTCZ7ZNmIiIiIiNyb5y1yqakvkT3tspOkp6XqFIqCWuUXcnNz
0Wg0WFpaIpfLUSgUVFZWYmFhgZGRERUVFRQWFmJkZCQsVQHcvn0btVqNqalpLQVGrVZTUFCATCbD
3NycvLw8AOzs7NDpdOTm5iKRSLCxsRE+y2QybGxskEgk6HQ68vPz0el0WFpaolAoUKvV2Nra1qt0
1PT/TqRSKdbW1shkMpRKJUVFRWi1WkxMTDA1NRW2S0tLw9DQEAClUsmIESPIysriwIEDdOjQQZBF
8+bNMTQ0JD8/H6VSiZWVFQYGBpSWllJSUlJHBiIiIiIidRHDsUXZNUZ79So3zzPvv/8+ERER2NnZ
kZSURHZ2NuPHj2fu3Ln3tN6IiIiIiDw4ouIgjrUx2xNrS/2FiRMnYmtry+3bt+nUqRO9e/cmICBA
VGxEREREGgDRd0WU3ZNoT7TciIiIiIg8EUTritjek2jvgTMUi4iIiIiIPA6i4iCOtbHbu3NfUbkR
EREREWk0xGUeUXaN3WZ9+4nKjYiIiIhIoyBaRJ69vjWl9urbr+Y7UbkREREREWlQRMWhafTtWZXd
3fYTl6VERERERBoc0eIgjrUx23oQpaYGUbkREREREXksRKWm6bT3LI71YZSaGuooN/PmzaOsrOyR
O94QpQgaqpxBU2rncdt41uTa1M5xUxvXs3rOntXz1RglWJ4WeT905th79Gn8+PEYGxs3WJ9FJanp
9O1h27zftvf7vY5yExISwuTJk5+pG8a92lmxYgXTp0/nSfCo43kStasa8xhr165lypQpD32cplKz
qyn3WSKRkJ2dzdWrVxk0aFCTkEVTOG81ZVsaqi+XLl3CyMiIdu3aPRXXXEP3ob7tGvrhd+DAAUaM
GNFgyo2o2Dy9fXtcxQbqUW4MDQ3x8PB4qi/Yh+mLiYkJ7u7uTepG0lRl9aiYmJjg5ub21MqpqZ63
mn7p6emRlpZG69atRTk1Ul/S0tIwNTWlVatWz9x8epT+NMbD784afw3RXlNsq6m393f2rSEUmjuR
NvRFcuvWLWbMmMHHH3/M5s2b77rtjh07OHr0KAClpaV8//33FBcXA9Ua/L59+5rciWrMG8i6detY
v349AEuWLGHHjh31brd06VIOHTr0RPv2rPDtt98SERGBWq3miy++4OrVq/Vu99lnn5GamvpcyaYh
5k9paSmffvopmZmZlJSU8MEHH1BQUFBn+8LCQmbNmkVVVdVzK6tHJSMjg88//xyVSkV8fDzffvst
Wq22znaJiYnMnTu33t8epz8NXYH6zvYeVzY1bTXVh31jyq6pjfVh2nuQcTxibamGf8ORSqWMGjWK
tm3bApCens6KFSvQarUMHDiQLl26CA9ofX19VCoVFy9eZM6cOXz66aeUlJSg1WopLS1l1qxZuLm5
kZuby1dffUV2djaLFy/Gzs6OsrIyvv76a6RS6SNftE3l4dWvXz9++uknRo4cybVr1wgODiYzM5NN
mzZRXFxMUFAQvXr1qnWTW7JkCbNnz+aTTz5h0aJFxMfH88cff6DVahk9ejQ+Pj5NYmwPQ2OeD39/
f8LDw3FwcKC4uBgvLy8uXbrE8ePHKSkpYdKkSbi4uAjbnz9/nosXLzJ48GC2bNnCZ599xsmTJzl7
9iwSiYQpU6Zga2v7zMnpQcm/nUnQsJG1vuvfv7/wf2Bg4F33fRJLaA1Jt27dmkQ/unbtyogRIwDo
0aMHr7766l23GzdunChjkecWKTSMtlZzs+3WrRvBwcEcPHiQefPmoVarOXHiBLm5uRgYGBAeHk6z
Zs3o2rUrQ4cOpU+fPnTr1g1bW1s++OADTExMUKlUqFQqdDod5eXlTJkyhfz8fAoKCjhz5gw+Pj4M
GjSI8vLyZ+ZEODs7Y2RkRGhoKDY2NrRo0QKlUomBgQEA4eHhtbbXarWUl5ej0+koKSkB4ODBg5SW
liKRSDh//vxDnbemQGP3pVOnTqSlpbFv3z78/PyQyWSo1WoMDQ0pLi6uY8lRq9VUVVWhVqspLy9H
pVKxb98+JBIJZWVlXL9+XbyDiIiIiDRBGmRZ6s6H0vXr14mPj8fMzExw6HN1dcXU1JTu3bvTtWtX
JBIJJiYmXLlyhbS0NPT19QE4fPhwHfOTRCLByMgIqVSKTqfDycmJa9eucfr06QfqT1PgQfojk8nw
9/cnLCwMf39/pFIpN27coKioCAcHBzQaTa3tjY2NUavVhIWFUVlZCYCrqysWFhb4+vo2qOPjs0Lz
5s1xdHTk7Nmz9OjRA4CoqCjkcjlmZma1TPgSiQQLCwvS0tI4efIkWq0WPT09nJ2dsbW1xc/PDycn
pyY7n0RERESeZxo8z42XlxeGhoZUVlbi7u6OTCajZ8+eODg4oFAocHZ2BiA4OJgbN24gl8sxMjLi
008/JS8vD6heotHpdBgZGfH+++9jYGDAzJkzsba2plmzZsTFxaFQKGjZsmW9S1JPK4MGDcLZ2Rlv
b28ABg4cSIsWLWo9eIcNG4aJiQlWVlZ8/PHHaDQaPD09kUqlDB8+HE9PTyoqKnB1db3nsZ5Xp90J
EyYwcOBAQT4TJkwgNTWVvn37Cg6N//jHP7CxscHJyYk33ngDuVxOZWUlUqmUN954g4SEBKRSKY6O
juIdRERERKQJ8tg+N399KBkaGuLl5VVnG1dX11oPXBMTk1prrC4uLoK/Q4sWLYTvO3bsCED79u0B
kEql+Pj4oKenR+fOne/bn7+bh+lPs2bNaslEX19fGP+dcqrhr5EbEonkgSO/GjJM9mnCzs4OOzu7
WjL/q29Su3btBNnU+I3VYGBgICifTX0+PWmOHTtGVlYWXbt2FeR28+ZNIiIisLGxYdCgQWRmZjJt
2jRcXFyYP3++sOx6N0pLS3n77bcpKytjzZo1mJubN0rfq6qq2LFjBxKJhJdeegm5XP7E5PbVV19x
4cIFvvnmm3r9To4cOUJOTg7du3dv8MjOVatWERISwuuvv86oUaOeu/uByLNLHctNXl4eK1eufOAG
7nezbcwkUjExMY99vPT0dFavXv1IbfwdOT+eZGKvhko8mJGRwYYNG5rEmJ7keXtSCetKSkrIzMy8
Z3RiY/R78MB+wv86nY4ff/yRAwcOsGDBAkG5OX78OG+88Qa9e/dm0KBBKJVKYmJiUCqV943kAVCp
VBw5coSioqJGja4qKSlhwoQJyGQyMjIynqhyc/78efbv38/MmTPr/KbT6fjvf//L0aNH+fXXXxtc
ucnOziYmJkawmouIPCvUUW5sbW159913m1xHG+uBnJWVxaeffvpYbTyNPMkxfvbZZ3z44YfP3Lia
ynlLSkrixIkTQqLEJ0V87NWH3sfY2JjBgwfTokULZDIZACkpKWzcuBGAESNGsGvXLgoKCvjuu+9q
7ZuTk8PatWspLS3l5ZdfFqyaWq2WiIgIDh8+TFFRER07dmTkyJE0a9YMtVrNvHnzyMjIYNq0aRw6
dAi1Ws3HH3/8UP2uqKjgwIEDREREIJFI6N+/P/3790cikbBo0SJSUlL46KOPcHJyQqVS8eOPP6JQ
KPjiiy+wsLAgJiaGPXv2kJeXR9u2bRk1ahTW1taPfQ60Wi1RUVEcPHiQwsJC3N3dGTlypGCdrKqq
Ytu2bVy7dk3wMzt+/DgvvPACgwcPxsPDg8GDBwtW4C1btnDu3Dleeukl0tPTuXz5Mt27d+ell15C
T0+s1iPy9FBntsrlctzd3VEqlahUKqRSKUZGRg12wDsjnPT09O5rln5QHvWhZmxsXGfpoaHQ6XSo
1WrBYfp5xdjY+IklSnweUalUWFhY0KZNmyd63LspNxcvXmTbtm0AdaL2iouLWbVqFd7e3nz22Wfk
5uYyYMAAkpOTcXBwYM2aNdy+fZuysjK++OILQQGqqqpi9OjRKBQK8vPzWb9+PRERETg4OLBgwQI+
//xzLCwssLW1ZcGCBWzcuJEdO3ZgYGDA5s2buXTpEnv37iUzMxMvL6+HUm4qKyuZNGkSoaGhtG7d
GrVazZw5c/jss8/45ptvUCgULFiwAAcHBz799FNiY2P5+uuv6dq1KyYmJmzbto3p06ejp6eHi4sL
S5YsYdmyZezduxd7e/vHOgfLly/n448/RiqVYmlpSUZGBvPnz2fPnj20bt2azz77jAULFmBmZsam
TZuAamu1lZUVgwcPJiIiglWrVtGuXTsGDx7M4cOHWb16NSEhIVRUVFBUVIRWq2XDhg13DTsXEWmK
1PHGrYlWmjNnDhs3buTAgQN1InXq2/5B0Ol0hIaG8tFHH7FkyRKioqKanEAaMpFRZWUlZ86cEWeZ
SKPTlCxW69atY9y4cYwbN47ly5ffc9sNGzaQlJTE0KFDuXHjBkuXLkWpVNbZTqvV8uabbxITE0OH
Dh1IS0sjOjqawsJCvvnmG4yMjNi9ezfHjh1j+PDhHDp0iLCwsFptdO7cmaioKMFK9KAcOXKEnTt3
0q1bN44fP86xY8ewsrJi4cKFpKSkMGnSJGQyGTt37qSqqort27ej0WiYMGECarWar7/+moqKCjZv
3syRI0eYNm0aFy9eZO3atY8l55KSEr799ls0Gg1btmwhLi6O8ePHExsby+LFi8nNzeXXX3/FxMSE
AwcOcPHixVr+jPfCzc2NK1euMGvWLNRqNXv37hUvMpGnijqWm5qbZI0TsJOTEzKZjN9++43CwkJ0
Oh0zZsxg9+7d3Lx5k6FDh+Lg4MCyZcuws7Nj1KhRqFQqVq1ahYGBAcOHDxfCkiUSCePHj0elUuHv
70+bNm0oLy8nJCSEnJwcXnrpJVxdXVm4cCEmJibcuHGDOXPmsH79elQqFZ07d6Zr167crc+Pw/Ll
y1EqlfTv3599+/ZhYGCAi4sLLVq04MiRIxQUFDBmzBjWr19P37598fT0ZPfu3QBMnDiR33//HUtL
SwYMGMCaNWtwcXFh4MCBxMXFUVRURFJSElVVVUyZMoXvvvuO7t27Y2BgwCuvvCLOQpFniunTpwuJ
5g4ePMjChQvvum1cXBxQHRloZmaGn58f9vb2pKWl1drO0NCQcePGYWdnR5s2bbh8+TKlpaUkJydT
WlqKRqPB19e31j4xMTGMHj1a+Pzhhx8+UoqE69evo9VqOXfuXB3lIC0tjT59+tCvXz9OnTpFdHQ0
oaGhyOVyxo8fT15eHtnZ2ahUKoYOHVqnf49Deno6RUVFWFpa4u/vj5GREUOGDOG3334jJiaG5ORk
qqqq8PDwoGPHjsjlcvr06UNkZOR92x41ahT29vbC0l9NLi0RkaeFu8ZRSyQSmjdvTrNmzdBqtaSm
pjJz5kzKyspQqVRotVqCgoLw9vYmMjKSQYMG8frrr2NpacnJkycxMjLC0tLyvhdwUVERt2/fBuDK
lStC4rSpU6diaWkJVOcn0Wg0GBoa1tvPhkCn0zFmzBjMzc1JTEzE1taWmJgYzp8/zxtvvEFAQAA6
nQ5bW1vGjh1LZGQkpqamWFpacvXqVSwtLdHpdBgaGmJhYYGenh5SqRSNRsOlS5d47733sLGxITs7
G3d3dyZNmkRycrI4A0WeOby9vRk2bBjDhg2jQ4cO99y2xu8kJSUFnU5Hfn4+hYWFdW9UUqmwvHvn
NW9tbY1MJsPW1pYTJ05w+fJlLl++zPnz55k2bVqtNpo1a/ZI46nJQt2/f3+h/cuXLxMeHk7Hjh2R
SCRMnToVtVrNl19+ybVr1xg5ciTW1taYmppibGyMoaEhe/fuFfaNjo5m9uzZjyVnCwsL9PX1KSsr
Izc3F0C4p9ja2gqyzcvLE7K+P+g9p+ZeK+ZUEnlauauHmFQqxcvLCxMTE6A6BPbs2bMolUr09PSQ
SCSCg5mbmxt79+5FJpPRtm1b2rVrR25uLj4+Pvc1g2ZnZ+Po6EhFRQUajQY9PT0qKyuJjIwUlB5n
Z2esrKw4fPhwo5UUkEqlyGQyjI2NadGiBa6urnh6epKamsrp06e5evUqQ4YMEcbu5eXFtWvX8Pb2
xtnZGWtra3Jzczl69Cg9e/YkNjZWUOwsLS05ffo06enpDBw4UPAjEBF53hk7dixLly5l1apV5OXl
ERsbS0VFxQPv7+joyMiRI9m+fTvffPMNgYGB5ObmcujQIVauXPnAyzA1aLVagoODBV9AZ2dnfvrp
J9zd3QkPD2fevHm4ubkRHx/PtWvXOHz4MADDhw/HxsaGo0ePIpVKmTRpElD9YjZhwgTmzJnDV199
xYgRIygqKuLYsWN88sknddJm3Iu5c+fWiohbtWoVo0aNYv369YwZM4Zu3bqxbds2jI2NmTJlCq1a
tSIgIIDjx48THByMg4MDBw8eFCedyHPBXZWbV155pVY45Ntvv82NGzd49913kclk9OnTRyhN7+bm
RnBwMAUFBRgYGODj44OpqSn5+fk0b968TttDhgwR8lV07NgRPT09jI2NMTMzA6oT/CUkJAgJ/5o3
b45KpeKNN95oNEEMHz5ceBOaMWMGiYmJODg40Lp1a44cOUJVVRWOjo689tprAPTs2RMbGxuKiopo
3rw5JSUl6OvrM2TIEG7cuIGfnx9t27YlLy8PGxsbrly5wptvvomVlRUjR1bX45kwYYI4A0WeGezt
7XF1dRWuYwBTU1NcXV0FJUNfXx9XV1ccHR2RSCR0796d9evX89NPP5GQkMDkyZP58ccfyc7OxtDQ
EJ1Oh7OzM8XFxcJLga2tLa6urpiYmCCRSFixYgU+Pj6EhYWxbt06rK2tGTJkCG3atEEikdCiRQuK
ioruGbwgk8mEPFw1VhCotmDY2tqyZ88e5syZQ3h4OOHh4bi4uDB+/HjhHmhubs7kyZP5448/sLe3
r1Vj65tvvsHJyYmtW7eyfv16LC0thWztUJ17ydXV9a6BGzVy1Wg0pKenC9+rVCoWLFhAmzZt2LVr
FydOnMDf35933nmHwMBApFIp69at4+OPP+batWt06NCBUaNGsWHDBuHe3rx581rnzNraGldXV8HK
ZWJigqur699WQ01E5FGRpKfd0hUqCvBuX722GhwcfM+cJE+ChIQEbt26ha+v7z1NyQ1hMp0yZcpd
K3BDdXTX6dOncXR0fKi3LJH/z8SJEx/aiVPkwYmNjeXPP//ko48+eqLH3fdnaJ3CmQ+LSqXi0KFD
9OzZE319fX7//XfeeustPD0971q1XeTBOX/+PObm5rRs2ZKMjAxGjBhBQkICR48epV+/fqKARJ5Z
9P5aOLOwsJCdO3fWu/GTWn+tOc6RI0ceaLvHITc3l+3bt9/3GNevX2/QQolPWpZ/57FycnIICQl5
6sbVWMdo6HYzMzNJSEgQHNyflJz0GqDyiUql4qOPPiIlJQUDAwOKi4txcnK6b5SVyINx5MgRZs+e
jbm5ueAUPGvWLPz9/UXhiDzT1FmWsrCwaNJpuCUSSYOWDti9ezdjxowRZ0IjsnPnTl566SVREI1E
bGwsZWVlQoTSk2Lfn6GP3YaxsTEHDhwgOjqa0tJSWrZsiZ+fn7DcI/J4vPvuu/To0YOMjAyMjIzo
1q0bTk5OoqOwyDPPXX1usrOzOX36NM2bN6dfv351nGArKyu5efMmXl5e3Lp1q1bNo/rQaDQcPXqU
0tJSevXqVau+Tw0pKSl16iX9lcaqiaTRaDh79ixZWVn07NnzkYoiZmdnU1paipub2z2302q1XLp0
iS5dutT5raysjNDQUAwMDOjfv3+DZDEVEWnKODs7C/51Ig2LsbExAQEBoiBEnjvualheunQpfn5+
uLi4oNPpyMjIQKFQcPv2bXJyctBoNBQWFpKfn893330nJKu7efMm+/bto7KyslZ7Z8+eJS8vD19f
XyHKKiMjg71791JcXIxSqWTOnDns3r0brVYrRBrV/K0pwBcZGdmgifZqCAsLIyMjA19fX+bPn09F
RQXnz5/nwIED3Lp1C51OR2RkJMePHxfCu0+dOsW1a9eENtLS0mqFvl+9epUDBw6gUqmoqKhg3759
nD9/XpBbfHw8ERERhIeHC/uUlJSQlZWFp6cnK1euJDs7m927dwshnHFxcZw8eZLLly+j0Wg4ffo0
586da9KTTHxLFBERERF5kkjvVhW8S5curF+/nqioKCQSCVevXiU9PZ2kpCRiY2OprKwkLi4Oc3Nz
2rRpQ7du3QTfirZt27Jq1apa7bm7u3Pjxg22b99OVVUVFRUVrF69Gh8fH1atWoW+vj4tW7Zk0KBB
SKVS9u/fDyD8PXHiBGq1mpycHKKjoxtcEFevXmXo0KG4uLjQoUMH4uLiWLNmjSCH06dPExcXh1Kp
5NChQ2zduhUXFxd2795dR5GD6no/hw8fxtLSktWrV7N27VpatmzJnj17yMzM5MqVKxw5cgSNRkNc
XBxJSUnCvpmZmURGRmJtbU1lZSWVlZXMnTtX8A+ys7Pjt99+Y8+ePZSVlZGSksLFixfF2SwiIiIi
IsI9LDcvvvgis2bNIiMjg9TUVCQSCVqtFpVKVbuB/0uuZWhoSFFREenp6YSHh9dZmrG2tubf//43
QUFBbN++ncrKStLS0jh16hSurq5C3py/hkPWHE8ikeDo6EjLli2F/DcNSbNmzcjLy0On05GZmYmt
rS3NmzfHysoKuVwuRHBlZGQIybmcnZ0xMTGptzyFQqGgdevWeHp6UlRURHl5OW5ubrXkoqenh7u7
O7a2tpSVlQnfW1lZMXToUKZOnUpISAg+Pj7Y2tpSUFCAra0t7u7uGBsbk56eLuQFEX0URERERERE
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
dSozZ84kPj6e/Px8wbzt5OSERqMhMjKS9957Dy8vL1q0aIFEImHKlClERkbyz3/+E0NDQ2bMmEH7
9u2ZPn06jo6OpKWlER8fz5QpU3j77be5ceMGxcXF2NraCm+yIiLPKmlpacyZM4cDBw7g4eGBsbEx
nTt3xsrKitzcXCQSCVKplBYtWhAdHc2BAweQSqU4OzuzcOFCCgsL67R5p+m/Y8eOpKens3TpUjQa
zTMV5RQYGEhkZCSBgYHIZDLUajXFxcX1KnFSqRQfHx/mzp0rZHrv1asX+vr65OfnI5VKxQiwehg0
aBDnzp1j0KBBACiVSsrKytDT06ujDJqbm2Nubs6cOXOEZ1tgYCBKpRKFQiEu+9WDoaEhvXv3Jioq
SpBxRUUFlZWV9c5jR0dH8vPzWbt2rWDsCAoKoqCggMLCwmqDRnr6/yXx86n2jxk5ciTr16//2wb5
pC+seyXxE2kYxCR+jUtTSOI3ePDgx46WqnkL09PTExSTmiVomUyGTCZDp9OhUqmEzzW/6+vro9Pp
hP1rQrVrbnwqlYrly5eTl5eHubn5Y8uqKUVL1cjkTrmpVCrh7VZfX1+whtfIpOblsyac/a9ybgrM
mjWLn376qUn0pUbG+vr6wjOqRsY1cqyx0tQomFBtvTEwMLjr/BZl/P+psSbWyKtG5jUKd41cpVKp
cE3fOcdrzknN+ag3z01ISEiDd/xhlJYnmT8nNze3QZWbJ6mcPS3Hqimo2hTG0tjH+TvGUZPnJiws
7ImOSdbAQ63vDe2vD1uJRCLc/P76e411BxBudjVtGhgYMGnSJLRa7TNXquSvMrlz/HfK6W4yvdt3
Io8u4/rm8rO0HNoYSKXSWjKuT+Z3yrA+C9id3+nxl+XVvzPPzd9hDhXz3DQ+ISEhTSp30rNGU8hz
U1lZyRdffPHcyDwxMZHs7GwxyVwjkpCQwJdffikKQpTxI1GvKllZWUl0dLTwuU2bNvXGnN9JaWkp
RkZGtbTXpKQksrOzqw+kp4evr+9d97+fYnPr1i2cnZ0bVRjp6emkp6fj4uKCg4NDnd/z8vKIjY0V
+tu+fft64+2Tk5Np1arVfceUlZWFlZVVHe0Uqm+eOTk5tGrVipYtW4pXoUiTxtjYmK1btz434/3w
ww/58ssvRQfRRiQoKIh9+/aJghBl/EjUu/BXE+WzefNmDAwMhLXujIwMITpJp9ORlpbGzZs30el0
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
YMeOHWRkZAjWG61WS3h4OGVlZUyYMAEDAwNmzpzJ0aNHsbCwQCKR0LVrV0JDQ/Hw8GDYsGEcPXoU
a2trrK2tKSgooKKiglOnTj1gu/xdAAAgAElEQVSQH8vj0LNnT0pLS9myZQt9+vTB29sbAwMDzp49
i7e3N4GBgeh0Oq5du4avry9dunTB2NgYd3d3rKysADA1NUUul7Nx40Y6duzIiBEj2LlzJ9OnT8fe
3p6NGzeSlpbG0KFD6d27N87Ozuh0OkxMTGoV9Q0ICBCSiQ4ZMoQjR47g4uKCjY0NI0eOZOvWrejr
69O7d2/y8/O5ceOGYK0WEXnWqGMiqaioEHxkGoKHeXP6O6KoSkpKiI6OfiLje5I0pX6VlJQ80Jx6
GqPomkKfU1NTyc3N5cqVK02iz3c6Edcsb9/JX19ipkyZUuuzvr4+r7zySq3vnJycmDx5svDZ0tKy
1n6vvvqq8H9NRvPu3bs3uuylUilDhgyp9Z2fn18th96//g4IhYQBzM3N+fjjj2v93q9fPwCh7Iyr
qys9evSoky29ptyMTCar9RLk6OhYS15JSUn/j73zDoyq2vr2MzUzmUnCpBNIQgqkEKT3okiTooDi
S7Oh0gQR5UXwcu3e16vXawUUUYQrAgoKCEREOkIINRASQnohPaRPymTK90e+OTdDACEkIZDz/EPO
cM4+e6+zZ581e+/1W5jNZmHDsyjNIHKvU8+5saY0aCxaunMjl8tp06ZNi3oo91qovFwu/8s+1drl
AW7HDlqtFjs7u0b93t4qRqOxxSmdNmV90tPT2bdvH+7u7vX+T6lU3ragYl3atWsHwJ49e26rHB8f
H4qKihq1bk1JXl7eXVPXu5V72cbya30x/fz8GvUmLfnFpVarbcJQRRofe3v7Ru9TIv+lsrISJyen
Zg+Ljr1wVvjbmguptRAeHk7fvn3x8fERO2AT4ezsLMxgiYg2vlWafOeu+ItcRKR1oNVqSUhIEI6d
nZ3/UsHXuiG2rq5VUVER+fn5QO340aFDhwbrXhUUFDSJirBCoUCr1eLo6EhZWRnZ2dm4uroKEaO3
knLBaDQKIeve3t5C0tHWjlwux9HRUTSEaOMGUS8UXHRGREREGkpCQgKffPIJERERgoOi1+spLi4W
Nr+Wl5dTWFiI2WzmyJEjHDhwwEbyoKioiPj4eP7+97+TmJgoRGcWFhYKGb5NJhOFhYVCJm1rNFBx
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
RVdRVFRkbkdzG982HQo3IpGIvn37MnHiRCwtLdm+fTv29vb069ePyspKfH19GTRoEGvWrGHJkiU8
8cQTHD58mHPnzvG73/1OMBCur6/H0tISkUhEQ0MDfn5+eHp6Ul1dDTS7WSsUCkpKSvDw8CAgIOCB
mPC7Cw+ztqaz93+6lbTu9vJTV9YVmu11WsaGetg5dOgQ4eHhHQa1M3PnLF++nGnTppkbwtzGt0WH
wo2TkxNeXl6CoOHj40N8fDylpaXIZDJKSkpITU0VDOZOnTpFTU2NEFTOx8dH2CvJ6M49ZswYfvjh
B2QyGb6+vuTk5KBSqYBmd9/Gxka2b99usi+RmXvDw74Eda8Em7utrelqoaYlRg1md8DoTNGd6ny3
EYvF5vY1t/Ft06Fw88wzz5h8HzhwYJtovC+88ILwefz48Sa/tScNhoaGmizn9OrVS9hLRSaT8fTT
T5t72z3mYTYY7mgjybtRvnst1HRFXc2YMWPmfqVd4aYz3V4fBLpbfTuiqyZ6ozv1vSrbgybU3Op1
xlg1HQXcu98FVjNmzJjpbKQgovmvmaqqKvbs2dOlmd4N9+ebzaOkpISdO3fe8/LezXy6mtaTX0lJ
idCnbqeOtzqZtgz6eDfq2l6d7kSoudU2KiwsJDMzs92I3Z3d71rWS27e7NmMGTP3Kf+/5ub/Bixb
W9t2N2F8WNm5c2ebnW+7C3fLC2rHjh231ac6W+vR1RqMzjb6vdlrUlNTqampITIy8q7W9djRg93y
uTFjxsz9j9TcBN2Th9FguLMNeW8mra4wbr6Ta7ryvpqXo8yYMfOgIG1ekTKHW+9O3I/B8+4kvXsh
1HRG2p3tDt6VNlNmzJgx8yAhxTxudRseNk+ouyXUtE7vbmtr7rZwcTtCjUajYdOmTd3mWUpPT2f7
9u1C6AsznU9+fj7r1683N4S5jW8L87JUN+BhizB8NzUYXaG96CzBpqvu6+2kK5PJmDt3brd5puLi
4pgxY4bJRrlmOpd169axYMECc0OY2/i2EJtv78NNV2gwOnNvo1ud6G802d/Pgs2t7PJ9M3Xt7Pva
kSv5rXD8+HG++OILvvvuOwoLC+8orYqKCo4cOQLAsWPHKC0tpaKigrNnz7Z7/u7du80PvBkzZgCz
5uah5WEyGL4Xtib3or6dfd7N0plxnpKTk4mIiBA22z137hx+fn7o9XqysrIICQlh165daDQapk2b
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
dWru02w2YzKZ2LNnDzk5OVy6dEn4bvfu3ZSWlgKg0+n48MMP2bVrF9u3b0er1bbb5mazmaKiIvbt
29dh2ceOHRMyUOfm5lp9l5qayoULFzpsu65ikdPTe9uWzJ6e05Pz7SWju2WKho2IiMjjhry9bu2t
t97CaDQCoFQqmTJlSpvnmc1mwsPDWbp0qfDWv3TpUgwGAwqFgjNnzjB79mxUKpXVNbbA1guFLViM
NalUyvPPP8/58+epq6sjLS2Nt99+m/z8fL777jsiIyMpKirijTfeQC6XM3LkSNLS0qiursZsNnPr
1i2eeuopbty4gUKh4MSJE7i5uXHz5k0+/vhjvL29SUpKsir717/+NTExMdTU1ODt7c3w4cMpLy+n
rq6OyspKiouLmTRpEtDk7cnNzeXBgweUlJSQlZVFfHw8AOfPn2fMmDFMnz4ds9nM1atXOXr0KLNn
zxZ218jlcubMmcPnn3+OSqXCz8+P7777joKCAgwGA4mJifzv//4vw4cPx8XFhaysLAoLCwkLC8PZ
2Znc3Fzu3r3LkCFDcHNzw2w284c//IGAgADmzJmDt7c30PWtzvbKBm7rNVD91VMjGjMiIiKPO+16
buRyOU5OTjg5OSGRSJBKpW3+k8lkvPTSSyiVSmGaQiqVolQqAYiOjua5554T5PZlw8byFnvhwgWW
LFnCwoULuXTpEnfv3mXdunWEhoZiMpkwGo0olUqSkpJQq9XodDoAhgwZwu3bt9Hr9Xh7e3PhwgUi
IyMxGo0EBQUxbtw4hg0bRnh4OBs2bKCgoKBVHby8vFiyZAlVVVVMnjyZkydPcvXqVZ566inu37+P
Wq3mxx9/FOprMBjIzs5m3bp1wlQgQGNjI2q1GmgyLkwmExMnTmTMmDGcP38ejUZDbm4uV65cYe7c
uSxYsACJRMLp06fx9vbmwYMHVFVVER4eTlJSEnl5eYSFhZGQkICbmxsmk4m8vDyhPpa2c3NzQy6X
W01ZdbX9W/5ty+flUeXaQl5XdXUUopdGRETkSaHdEej8+fNA0yB55cqVDoW4urq2+51Go0GhUNjU
dX/mzBlKS0sfKe9R9W4uFyAzM5Nr167h7+/PDz/8wMWLFwkNDUWhUPDjjz9aTcVIpVKr4HEALi4u
FBUVMXDgQIKCgrh+/TqBgYEAqFQqiouLqaioEDxcbXk0mq9Z8fDwoLq6msbGRsxmM2q1mqCgIKvF
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
JzAAAAAASUVORK5CYII=

------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://robotframework.org/robotframework/latest/images/screenshots.png

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
yvB/BeFNEAv7tYMAAAAASUVORK5CYII=

------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://robotframework.org/robotframework/latest/images/log_passed.png

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
r6a75mXNSS0+LbJWidZ7bQFtL+1y7WkdMZ0AnWs6X3VldSN0b+uu6KnpJeo90EfqG+ln6PcZMBjY
GVwweGPIb+hrWGO4YKRodMjogTHa2NQ423jEhMvE06TKZGGf8r7EfQ9NqU1tTC+YvjcTN4swazFH
mO8zP2s+biFkEWLRZAksTSzPWk5YiViFW93dj9lvtb9w/ydrOesE6x4bko2bTbXNT1td29O2Y3ai
dlF2Hfa09i72VfYrDvoOOQ6TjjKOiY69TuxO/k7Nzlhne+dy5+UDBgfOHZhyUXRJdxl2FXGNdX18
kP1g0MF7brRuZLdb7mh3B/dq902yJbmEvOxh4lHkseCp53nec85L2yvXa9ZbwzvHe9pHwyfHZ8ZX
w/es76yfll+e37y/nv8F/+8BxgHFASuBloEVgTtBDkF1wbhg9+A7IQwhgSEPQ7lDY0MHwiTC0sMm
w9XCz4UvRJhGlEdCka6RzRRGODh8GiUadTTqXbRmdGH0aox9zK1Y+tiQ2Kdx4nEn4qbjDeOvHkId
8jzUkcCXkJzwLlEn8cph6LDH4Y4kgaS0pKkjRkcqkwnJgcnPUmRTclKWUh1SW9K40o6kfThqdLQm
nSY9In3kmPqx4uOo4/7H+04onCg4sZ3hlfEkUzYzL3MzyzPryUm5k/knd075nOo7rXT60hnMmZAz
w9la2ZU59DnxOR/Omp9tzOXNzchdOud27nHenrzi84TzUecn883ymwsEC84UbF7wu/CyULewroiz
6ETRykWvi4OXtC/VFnMVZxavX/a/PHrF6EpjiXBJXimmNLr0U5l9Wc9VlatV5ezlmeVbFSEVk5XW
lQ+rlKuqqjmrT9cgaqJqZq+5XOu/rn+9uVaq9kodc13mDXAj6sbnm+43h+tN6ztuqdyqbRBqKLpN
up3RCDXGNS40+TVNNjs1D9zZd6ejRb3l9l3puxWtfK2F95junb5PuJ92f6ctvm35QdiD+Xbf9g8d
bh1jnY6dLx7uf9jXZdr1qNuwu7NHp6ftkcaj1sdqj+88UXnS1KvU2/hU8entZ4rPbvcp9TU+V37e
3K/a3zKwd+D+oNZg+5D+UPcLkxe9Ly1eDgzbDY+OuIxMjnqNzrwKevX9dfTrjbEj4+jxjAm6ibw3
nG9K3oq9rZtUmrz3Tv/d0/c278c+eH6Y+xj5cXMq7RPxU940z3TVjPxM66zhbP/nA5+n5sLmNubT
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

------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://robotframework.org/robotframework/latest/images/log_failed.png

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
r6a75mXNSS0+LbJWidZ7bQFtL+1y7WkdMZ0AnWs6X3VldSN0b+uu6KnpJeo90EfqG+ln6PcZMBjY
GVwweGPIb+hrWGO4YKRodMjogTHa2NQ423jEhMvE06TKZGGf8r7EfQ9NqU1tTC+YvjcTN4swazFH
mO8zP2s+biFkEWLRZAksTSzPWk5YiViFW93dj9lvtb9w/ydrOesE6x4bko2bTbXNT1td29O2Y3ai
dlF2Hfa09i72VfYrDvoOOQ6TjjKOiY69TuxO/k7Nzlhne+dy5+UDBgfOHZhyUXRJdxl2FXGNdX18
kP1g0MF7brRuZLdb7mh3B/dq902yJbmEvOxh4lHkseCp53nec85L2yvXa9ZbwzvHe9pHwyfHZ8ZX
w/es76yfll+e37y/nv8F/+8BxgHFASuBloEVgTtBDkF1wbhg9+A7IQwhgSEPQ7lDY0MHwiTC0sMm
w9XCz4UvRJhGlEdCka6RzRRGODh8GiUadTTqXbRmdGH0aox9zK1Y+tiQ2Kdx4nEn4qbjDeOvHkId
8jzUkcCXkJzwLlEn8cph6LDH4Y4kgaS0pKkjRkcqkwnJgcnPUmRTclKWUh1SW9K40o6kfThqdLQm
nSY9In3kmPqx4uOo4/7H+04onCg4sZ3hlfEkUzYzL3MzyzPryUm5k/knd075nOo7rXT60hnMmZAz
w9la2ZU59DnxOR/Omp9tzOXNzchdOud27nHenrzi84TzUecn883ymwsEC84UbF7wu/CyULewroiz
6ETRykWvi4OXtC/VFnMVZxavX/a/PHrF6EpjiXBJXimmNLr0U5l9Wc9VlatV5ezlmeVbFSEVk5XW
lQ+rlKuqqjmrT9cgaqJqZq+5XOu/rn+9uVaq9kodc13mDXAj6sbnm+43h+tN6ztuqdyqbRBqKLpN
up3RCDXGNS40+TVNNjs1D9zZd6ejRb3l9l3puxWtfK2F95junb5PuJ92f6ctvm35QdiD+Xbf9g8d
bh1jnY6dLx7uf9jXZdr1qNuwu7NHp6ftkcaj1sdqj+88UXnS1KvU2/hU8entZ4rPbvcp9TU+V37e
3K/a3zKwd+D+oNZg+5D+UPcLkxe9Ly1eDgzbDY+OuIxMjnqNzrwKevX9dfTrjbEj4+jxjAm6ibw3
nG9K3oq9rZtUmrz3Tv/d0/c278c+eH6Y+xj5cXMq7RPxU940z3TVjPxM66zhbP/nA5+n5sLmNubT
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
a4OwmwX9/wOLAbGaaM61MQAAAABJRU5ErkJggg==

------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://robotframework.org/robotframework/latest/images/report_passed.png

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
r6a75mXNSS0+LbJWidZ7bQFtL+1y7WkdMZ0AnWs6X3VldSN0b+uu6KnpJeo90EfqG+ln6PcZMBjY
GVwweGPIb+hrWGO4YKRodMjogTHa2NQ423jEhMvE06TKZGGf8r7EfQ9NqU1tTC+YvjcTN4swazFH
mO8zP2s+biFkEWLRZAksTSzPWk5YiViFW93dj9lvtb9w/ydrOesE6x4bko2bTbXNT1td29O2Y3ai
dlF2Hfa09i72VfYrDvoOOQ6TjjKOiY69TuxO/k7Nzlhne+dy5+UDBgfOHZhyUXRJdxl2FXGNdX18
kP1g0MF7brRuZLdb7mh3B/dq902yJbmEvOxh4lHkseCp53nec85L2yvXa9ZbwzvHe9pHwyfHZ8ZX
w/es76yfll+e37y/nv8F/+8BxgHFASuBloEVgTtBDkF1wbhg9+A7IQwhgSEPQ7lDY0MHwiTC0sMm
w9XCz4UvRJhGlEdCka6RzRRGODh8GiUadTTqXbRmdGH0aox9zK1Y+tiQ2Kdx4nEn4qbjDeOvHkId
8jzUkcCXkJzwLlEn8cph6LDH4Y4kgaS0pKkjRkcqkwnJgcnPUmRTclKWUh1SW9K40o6kfThqdLQm
nSY9In3kmPqx4uOo4/7H+04onCg4sZ3hlfEkUzYzL3MzyzPryUm5k/knd075nOo7rXT60hnMmZAz
w9la2ZU59DnxOR/Omp9tzOXNzchdOud27nHenrzi84TzUecn883ymwsEC84UbF7wu/CyULewroiz
6ETRykWvi4OXtC/VFnMVZxavX/a/PHrF6EpjiXBJXimmNLr0U5l9Wc9VlatV5ezlmeVbFSEVk5XW
lQ+rlKuqqjmrT9cgaqJqZq+5XOu/rn+9uVaq9kodc13mDXAj6sbnm+43h+tN6ztuqdyqbRBqKLpN
up3RCDXGNS40+TVNNjs1D9zZd6ejRb3l9l3puxWtfK2F95junb5PuJ92f6ctvm35QdiD+Xbf9g8d
bh1jnY6dLx7uf9jXZdr1qNuwu7NHp6ftkcaj1sdqj+88UXnS1KvU2/hU8entZ4rPbvcp9TU+V37e
3K/a3zKwd+D+oNZg+5D+UPcLkxe9Ly1eDgzbDY+OuIxMjnqNzrwKevX9dfTrjbEj4+jxjAm6ibw3
nG9K3oq9rZtUmrz3Tv/d0/c278c+eH6Y+xj5cXMq7RPxU940z3TVjPxM66zhbP/nA5+n5sLmNubT
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
QmCC

------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://robotframework.org/robotframework/latest/images/report_failed.png

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
r6a75mXNSS0+LbJWidZ7bQFtL+1y7WkdMZ0AnWs6X3VldSN0b+uu6KnpJeo90EfqG+ln6PcZMBjY
GVwweGPIb+hrWGO4YKRodMjogTHa2NQ423jEhMvE06TKZGGf8r7EfQ9NqU1tTC+YvjcTN4swazFH
mO8zP2s+biFkEWLRZAksTSzPWk5YiViFW93dj9lvtb9w/ydrOesE6x4bko2bTbXNT1td29O2Y3ai
dlF2Hfa09i72VfYrDvoOOQ6TjjKOiY69TuxO/k7Nzlhne+dy5+UDBgfOHZhyUXRJdxl2FXGNdX18
kP1g0MF7brRuZLdb7mh3B/dq902yJbmEvOxh4lHkseCp53nec85L2yvXa9ZbwzvHe9pHwyfHZ8ZX
w/es76yfll+e37y/nv8F/+8BxgHFASuBloEVgTtBDkF1wbhg9+A7IQwhgSEPQ7lDY0MHwiTC0sMm
w9XCz4UvRJhGlEdCka6RzRRGODh8GiUadTTqXbRmdGH0aox9zK1Y+tiQ2Kdx4nEn4qbjDeOvHkId
8jzUkcCXkJzwLlEn8cph6LDH4Y4kgaS0pKkjRkcqkwnJgcnPUmRTclKWUh1SW9K40o6kfThqdLQm
nSY9In3kmPqx4uOo4/7H+04onCg4sZ3hlfEkUzYzL3MzyzPryUm5k/knd075nOo7rXT60hnMmZAz
w9la2ZU59DnxOR/Omp9tzOXNzchdOud27nHenrzi84TzUecn883ymwsEC84UbF7wu/CyULewroiz
6ETRykWvi4OXtC/VFnMVZxavX/a/PHrF6EpjiXBJXimmNLr0U5l9Wc9VlatV5ezlmeVbFSEVk5XW
lQ+rlKuqqjmrT9cgaqJqZq+5XOu/rn+9uVaq9kodc13mDXAj6sbnm+43h+tN6ztuqdyqbRBqKLpN
up3RCDXGNS40+TVNNjs1D9zZd6ejRb3l9l3puxWtfK2F95junb5PuJ92f6ctvm35QdiD+Xbf9g8d
bh1jnY6dLx7uf9jXZdr1qNuwu7NHp6ftkcaj1sdqj+88UXnS1KvU2/hU8entZ4rPbvcp9TU+V37e
3K/a3zKwd+D+oNZg+5D+UPcLkxe9Ly1eDgzbDY+OuIxMjnqNzrwKevX9dfTrjbEj4+jxjAm6ibw3
nG9K3oq9rZtUmrz3Tv/d0/c278c+eH6Y+xj5cXMq7RPxU940z3TVjPxM66zhbP/nA5+n5sLmNubT
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

------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://robotframework.org/robotframework/latest/images/visible_log_level.png

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
FhaSkJBAYGAgXq+X5557DoDx48ezZcsW6urqGDduHNXV1Wzfvh29Xk9rays///nPmTNnDqdOnaKg
oICkpCT0ej0ej4eNGzdSUVFBd3c3KSkpFBYWkpOTQ0hICHq9nu3bt9Pe3o7ZbGbz5s10dnYyduxY
VbCrqKh87pEk6ZKFzEPfjV6vF4fDMfoCvampicbGRlauXElERATbt28nMDCQXbt2sXTpUn79618T
GBjIn//8ZxYvXkxFRQUGg4G3336bu1bcxVNPPcWECRN49dVXmTJlCr/4xS+YNGkSH3zwARqNhnfe
eYfAwEAeeeQRFi1axOuvv054eDgNDQ00NTURHR1NYmIiUVFRHD16lNzcXNrb20lPTyc4OJiFNy0k
54MctFotmzdvZsWKFfzgBz/gpptu4sc//jELFy7k73//OykpKQQEBNDQ0MCkSZNG475cd2QzvqNH
j7J3714mTZqEwWBQ6rlz507cbjf79u1jzpw5vP7669x+++2Ul5dTX1/PhQsXMJvN7N69m5tuuknp
oE2ZMoWjR4/S399PfX09LS0t5OXlERwcTFBQEDExMcqixz179pCWlkZoaCghISF4PB527drFkiVL
OHToEG63m507dzJx4kQ2bNhAVFQU7777LkuXLuXdd99l7NixnDx5EpfLRUpKyudiAaOKiorKSFyL
QL8uq9xlv+ElJSVMnDiRtrY25s6dy9KlS3nzzTdZv349s2bNYvXq1dTU1NDV1UVYWBg+r4/Y2FgM
BgPjx4/nzjvvpLKykltuuQWj0UhhYSEtLa0sW7aMjRs3EhYWRmhoKPfccw+1tbUUFxcTFRVFbGws
gYGBis20y+UiOjqa1NRU4sfE4/V6qaioYN68eSxatIjf/OY31NXVMWfOHO699156e3spLy/nG9/4
xiCb+k8z8g2uq6vjX/7lX9Dr9fziF7+go6ODr3zlK6Snp5OXl4fVamX58uXMnDmT6upqFi5cyMaN
G9m/fz/z588nOTmZgIAAZd47PDyciIgI2tvbycjIQKfTodVqmTp1KsXFxTQ1NZGRkUFERAQzZsxA
p9NRWlpKamoqMODSd9asWVRXV3Pu3DmioqJISkritttuw+fzsWTJElJSUsjPz2fp0qWKy2AVFRUV
latn1Fe56/V6Xn75Zf793/+dtWvX8tWvfpXly5fzhz/8gYcffpiYmBheeuklzp8/z/33389bb71F
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
6/XK8yY/57W1tZjNZrRaLY2NjTQ0f6Hq9AAAIABJREFUNGCz2Qi9OO/S0dGh1EtF5dOI/CzDJ2i2
5i+E//u//5ulS5fy9a9/nVtuuYWdO3dSUFDA7NmzaW5uxm63YzQalW1PPR4Pzz33HB6Ph7S0NOWF
9NJLL7Fo0SKCg4P5xS9+wYkTJ0hKSqK3t5fk5GTcbje9vb04HA6MRiN2ux273c4f//hHXC4XkyZN
QpIkHA4HL730EgsXLiQ0NJTf/OY37NixgwkTJuBwOHC5XDzzzDN88YtfpLe3l87OTgIDAxUB09PT
g0ajQafTYbPZaGtrQ6vVotfr6e7uprOzk+DgYDQaDb29vXR1dfHwww+zcuVKjEajsrf49URu/4MH
D3L48GHKysrQaDSUlZVx8uRJ8vPzmThxIlVVVdx7770sXbqUyMhIfvWrX9Hf38/+/ftJTEzkvffe
U7adNRqNrFu3joCAAMxmM+3t7bz++uv09vbS2NhIS0sLu3fvpqamBpvNRnJyMpIkUV9fz9q1a8nI
yGDMmDH88pe/pLy8nDlz5uB0OnG73Rw7dowjR45QUFBAUlISHo+HJ554goiICCZMmEBPTw8Gg4Gt
W7dSVlaGx+MhMTGRd955h87OTjweD0lJSWg0GhoaGti7dy8lJSVs2bKFtLQ0Nm/erPgycLvdHD9+
nMOHD3P48GEWL148qPPhdrvZsGEDkydPVjqdNpuNF198EYfDwf79+8nMzGTbtm1cuHCB4uJiMjMz
2bdvH//yL//CmjVrsNlsPPfcs3g8HvLz8wkPD2fDhg3U1NQoO9Zt2vQeAQE6YmJiyM/PZ+/evVRW
VuL1esnLy6OkpIS8vDxiYmKUHf7Onj3LmjVrWLVqFR6Ph29961vExsYyfvx4bDYbHo+H7du3U1pa
Sn5+PlOmTKGuro41a9Zw6623EhkZSW9vLxqNhtdff53u7m60Wi0mk4nXXnsNECMDY8aMAeDMmTMc
OHCACxcu0NXVxfjx4ykuLuZ73/sea9asITc3l6KiIgoKCoiIiCAiImLQUHZ1dTX5+flkZmYOEuZv
vvkmdXV11NbWkpyczLp162hubqauro6MjAwcDgc1NTVs2rSJ0ovOCbq6uti1axf5+flER0crHZ9d
u3ZRUFBAfn4+ycnJbN++ncrKSvLy8pQdBa1WK2+++Sb19fVYLBYSEhL4zW9+o/xeoqOjeeutt9i+
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
NTWVP/3pTzzyyCNXUUrK8IPXC21t8NRTsHAhLFggHDc0CIJ9cBBCQwXt3e0GgwFEngGfTzLFHzp0
iM9+9rMMDg7y+9//nry8PMrKyti3bx8pKSmkp6dTW1tLd3c39957LyEhIdTW1rJz504+8YlPsGzZ
Mvbv34/T6eSuu+5icnKS/Px8LBYLzc3NFBQUyM9QhgwZMgKgVCrRarXzy3OtBOJAu2jRojl75Yqz
iaeffhqbzcY///M/Mzk5SUlJCVu2bCEnJ4eenh4yMjJ45JFH8Pl8PPbYYyxevJjGxkYsFgtOp5O6
ujr6+/t57LHHACHWVq1Ws2jRovflbf2xgV4Pu3bBb38rmN5Pn4aHHhIEfE0NKJUQESF8R0WB+Hwv
C3PRU1yj0bB7924+//nPs2zZMi5duoTJZGL16tV0dHSQmZnJjTfeiM/n47XXXuPkyZN8/etfJyoq
CqPRSEJCAk6nk+PHj0tc4ZGRkVy8eBGQHZJkyJAhIxDh4eHSGrpyjgrPnE3ubW1t8yaWqaur4957
7+WnP/0pn/vc5zCZTKSlpaHRaKitrSUjI4PPfe5zREREoFariYmJISkpifHxcYaHhwkJCSEqKorf
//73DA8Ps2/fPtRqNTfeeOO0DRpkzACDAZ54Ap5/XhDuL78MVVVw7hwcPAg2m6Cde73CGrvFIpyb
nASEUAhx4qRSqcjKymLBggWEhIRQVFRESkoKCoXAxa/T6SRGMa1WS0JCAunp6QwMDDA1NYVer8fl
ckkhZQrFFVYz+RnKkCFDxnTY7XY6OjqAK+RX18KcAzEtFss0xqfZIIai+Hw+tm7dyq9//Wuee+45
CgsLAYFmMSIigp6eHmEwVwiUjmfOnGHp0qX85je/4d///d/JycnBbrdz7tw5lEolRUVFDAwM8MQT
T0iB9rJ2NwOUSli+XNC8ATo7oaQEXngB/vu/YXhYWDtfsgRUKli6FH74Q7j7bjh7FhBoOk0mEz6f
j8WLF/Pzn/+ct956S9rZyu12ExoaSlpaGm1tbQwNDXHnnXeiT0jg+eefp6KiAqVSydjYGBMTE0xO
TuLxeKTds7Kysj68/pEhQ4aMjzDcbvc0Zsi5YM7EMu8V4+PjjI6OkpaWhkqlEljFvB5C1aGMj49L
W3WCsJlGZGQkExMTqNVq1Go1KpWKkZERrFartHGE0+lErVbLmt1s8PkE7VulEoS72y14totLFZcZ
xFAohOsejxSzjkqFT6VCoVBw+vRpfD4f69atw2QyodPpJIEcEhIifU9MTEjmdPFFFHm1BwcHiYiI
kLbCtNvt/PnPf+YLX/iCvFWlDBkyZFwDcyWWuaZA1+l0pKSkMDw8TExMzLzYlYIRiMxXCMsOU+8P
PpCoTbn8m7n05+V0LpeLrq4ucnNzr1ubxCWVmV5OGTJkyPi4w+12Y7VaiY2NvX5McSIuXbok8ULP
FYFxy3Nh1BK/Z2JekzE/KAhYo56r8LycTq1Wk5ubO69nEIxZzf9Yp9PJwlyGDBkyZsHU1BT19fXA
dQxbEwfcVatWBeVjnw1ut3sazaVoKgem7c4USNri3/hA8hGFQiGt5YtxzoHHsqAQ4Ha7pUmYSqUK
GqUQSGMa7Bi4iioTpj8b/3xi34sc/iLVptfrncahHWyCNxsrnQwZMmR8XBAZGSltI37dmOJEzGdj
FrHid999l7//+7/H6/XS0tLCvffeS29vLwqFQuJzFhvrf6xUKt/X8cdZCIh9b7fbefnll/nTn/7E
9u3b2b9//zSBK35meg6iQBX7tqWlhaGhoWl5/YVuXV2dNJsE2L9/v0QUJArw4eFhLl68yKlTp3C7
3VeVIdYd2C4ZMmTI+LhBoVDMW4m+5vapYWFhREVFUV5eTnJy8pz53BUKBadOneI73/kOX/ziF6mo
qODZZ5/l8ccfx2az8Ze//AWFQkFKSgo1NTUcOXIEgISEBMrLyykvLycqKorIyEj279/P+fPn0el0
REZGsnv3bi5evIjFYiElJYVjx45x5swZKSTu2LFjxMbGSvtaf9wEg0KhwGq1UllZyd/93d+xZMkS
ioqKqK+vx+12MzU1RWtrKyaTibNnzzI8PExGRgadnZ0cPnyYyMhIYmJiqK+v5+jRo0RERvI///M/
0la177zzDjabjdTUVIxGIydOnODEiROkpaWRkZFBb28vTz75JJ/73Ofo6emlvLyc+Ph41Gq1tK1r
XFwcFouF2NhYmpubcTqdVFZW4vP5cLvd7N+/H6VSiV6v/7C7U4YMGTL+6piYmODChQtkZGQwOjoK
XHv71DkL9JCQkGke6deC6FS3Y8cObr31VqxWKxUVFWzevJlf/OIXOJ1OHnjgAVavXs3DDz+M3W4n
MTERh8PBmjVrSEpKIikpicjISF5//XX27t2L2WzGbrezc+dOYmJieOutt9Dr9fzsZz/DYrFw5MgR
NmzYwK5duygoKECn0wW9+b91iDwABw4coK2tjfLycnQ6HXFxcbz44ou0tbWRlZXFT3/6U2666SZa
W1txOp3s3LmTrKws3n33XaKiojh69CiFhYUYDAZUKhUJCQkcPXqU6Ohozp49i06n4+zZs8TFxdHZ
2UlBQQFpaWnY7XYsFgsrV66kqakRp9NJc3MzSUlJnDhxgpSUFDweD83NzRQWFnLgwAFsNht79uyh
rKyMbdu2kZGRwWuvvUZhYSExMTHTlmhkyJAh428dooYeFRU15/3Q57yGnpaWNu8GTU1N8e1vf5vy
8nIKCwv5xje+gdlsxmw2s3XrVokC9plnnuH8+fP09vayePFiXnjhBerq6hgZGWFwcBCtVstdd91F
V1cXe/fu5YEHHqCsrAyDwcDg4CBZWVncc889tLe3o1KpeOqpp65q/8cNbrebjIwMHnroIXw+YQvb
kJAQrFYrYWFhLF68mPT0dNauXYter+cPf/gDPp+PjIwM1Go158+fJycnhxtuuIHx8XHeeecd4uLi
OHbsGKtWrSI2NhaDwYDRaOSBBx5ArVZjt9sBiIiIID8/H7VajcPhQK/XYzKZ8Hq9hIWFSVaTqMsx
8hqNBo/Hw2OPPUZqaiqDg4MsWLCA9evXS8Q2H9fnKEOGjI8nQkNDSU1NnVeeOTPF1dTUzHs/9OHh
YZYvX05TU5PEKKbVaikpKeHYsWNYLBaSk5Npa2tDqVRSXV3N8PAwfX192O12Wlpa6Onp4fTp05jN
ZgYHB3nooYfYtm0b//qv/4rP5yM3N5eOjg5OnTpFYmIiSqWSp556iu7u7mnt/7hBoVDQ19dHbW0t
Fy9epLW1lZMnT1JUVERSUhKHDx/G7XZz4sQJdu/azdatW0lMTMRms2G1Wtm8ebM0gSovLycsLAyD
wUBeXh4OhwOz2cyyZcvQaDQcPnyYP//5z5LTncfjwW63093dTX9/P2q1msbGRqxWK263m4mJCRIT
E2lsbGTfvn3U1taiVCqZsE0QGRlJamoqExMTeL3eeXMZy5AhQ8bfAiYnJ+dNjz3nOPS6urp58bkD
mM1mQkJCcDgcEqFIdHQ0LpeLmpoaUlNTyc7OxmAw0NPTQ0FBAQkJCTQ0NDA2NkZxcTE6nY6GhgY0
Gg3R0dFYLBaqqqrweDzs3buXN954g46ODoxGIyUlJURFRWEwGEhJSSEiImLObf1bg9frpb+/H6vV
KpluQkMTgIkUAAAgAElEQVRD0ev1KBQKOjo6+P3vf8/WrVtJT08nIyODgYEB6urqKC4uJiUlhb6+
Pvr7+ykuLsbj8WA2m9Hr9Zw7d47k5GQKCgoYGRmhoaGB1NRUkpKSiIiIwOPxMDIygl6vp7GxERBY
53Q6HSEhIXi9XuLi4ujq6mJsbIzk5GQ0Go20GcHw8DAXLlwgNzeXzMzMD7knZciQIeOvj8nJSQwG
A0VFRRgMBoD3TyzzfpnirjcGBwfZvn07IyMj3H333ZSWln7YTfpfCafTyb59+7jrrruA60MC9H7y
Xa/8MmTIkPG3huvOFNfV1UVaWtqcvdzFcma8hg8FV8KfRASNO/d5UaCQ4plnq0eMS1coFSj4eAuG
QIKeQPj39UzPYTYBO1Mcuv/xTO/ATNeCtUOGDBkyPm5wOBySP9F1Z4rr7e3FI+6XPUcEi3uW4owV
fnHGCj+SEa5mj/OPNxeFjA/fVQO/FNesVIBvukAT0/t8Prw+Lz58V50LhmCsZ7MhGNvdB4WZGNn8
BXFgjL4I/9jzwN/B4tKDffzzBNYRrMyZ8s52XoYMGTI+jnA6nRiNRuADYIq74YYb3vMAGyh0JOEr
aukEsLsFq0YRxBwrJg8iSALLUKC4kp4gZfidE9sVWLb/sch4FqgBByO3Cabpzqa9+ufzn6gEXgu0
VgR7PmK4lywgZciQIWN+8B9238/wGbiFhngslh+s7KioKMrKyi5fnxtT3Jzt5+I+1/PZnEVEMIEr
CqtB6yAur4v06HQaTA0oVUpcLhcdwx148ZIYkUhSdBJKn5KcuBwcbgeNQ40oFAoWxi8kTBnGhf4L
lKWXMT41jtFmJD8+n2Mdx+iY6GC5fjnL05YzZBuioqcCHz4SNAmUZpQyNDHEhf4LaJQa8uLzyI7P
FtroN8FobGyks7OTT3/604yMjHD06FE2btxIbGzsVULa4XBw+vRp1q5di8vl4t133+Wmm24iLi5u
RpP3fPvN/7ivr4+hoSHJj6Crq4uamhoUCgVhYWFs2LBhmmOguF2t3W6/rputyJAhQ8bfIgKH6GAy
NVAwB/5WKK6UE3g8mwjweDxMTk5K4b1zwZzD1i5cuDDvzVlAsO13dHTQ2tpKe3s7zc3NjIyMSALK
YDJgGDHQPtLOtoZt6MP1/KH1D2RFZbEmZQ15sXlo1Vqer3ket8/NCcMJDCMGThlP0T3cTY+1h9UH
V2Nz2rjQf4F2czs7GnYwMjnC5uzNHOo6xImuE7Rb2hkdH2Vj1kbaR9vZ07CH6v5qcEBxQjG/uvQr
qvuq8eHDMmWRNPSKigruuOMOBgYGOHv2LFu3bqWzs5Px8XFE8p3h4WEAbDYb999/P83NzTz99NMY
jUbi4uKYmJigpaWFqakpbDablN5kMtHX18fk5CSTk5OMjIzgdDoxm804nU7a29slk8vo6CiDg4NY
LBampqYYHBzk6NGjvPnmm1JfV1dXMzU1xbp16ygsLESpVNLX10dvby8gaOtGo5Hdu3fP+znKkCFD
xscFolBuaYEdO2DnTujuviKM/T8w+2+3G9rarhyPjUF1tXDc0yPUMTQ0vV4QvNxra2svn7/OJvdl
y5bNK2RNNEmfO3eOvr4+CgsLpc1Cjh07xiOPPEJoaCjaMC3bWrZhdpr59ad+TXhIOCGKEAZcA9jt
dmLCYlgUvYgv5H+B504/R2RIJE+ufpKq3ipMVhMRjgj+bdG/UTdUR89UD6nhqVwausRTqwVymS8u
+SL7G/dTmFhIrCaWsJAwNGoNUaFR2L12ipKLSItN4+GChznXcw59tJ76oXo+nf1pACkOur6+XhKu
IyMjfOUrX+GFF17gmWee4Utf+hKrV69GoVCwdu1aSktL+dGPfsQTTzyBzWbjX//1XzEYDCxbtozF
ixdTW1vL1772Nb7//e+Tl5dHeHg4ERERdHd3s3z5cqqqqkhISGDPnj2YTCZeeuklLl68yIMPPsi2
bdswm83s3r2bnp4ennzySanPw8LCGBgYoKOjg+TkZIaHhzl8+DCDg4PcdtttOBwOrFarxDYkQ4YM
GTKuhqhJNzSARgMLF8LUFPT2gloNNhuMjAhpV6yAujpwOqGoCJqawOGAlSvBZIJ33xXKEo2izc3w
ne/Am28KAr22VigjIWF6GyIiIliyZAnwAZjco6Ki3tMa7NTUFJ/61KewWCx4PB6WLFnCyMgIk1OT
hIaG4vK4UPlUlMaVUj9Qz8r0lSh9SlRuFSHuEBRqoc6y9DLeaHqDLUVbAMiMzuT/dv1f8iPzebjw
YY4ZjhETEkNKVAoTfRNS/V6vF7fPjVqpptHSSHxPPKd6T3Ff8X24Jl24vW4AEiMSCVGEkKnNJFOb
idfnRalQ4na7ufvuu2loaCA+Pp4vf/nLJCcnc8stt/Dyyy8THR3NokWLAKHTR0ZGuP/++7lw4QJT
U1OMjY3x/PPP884777Bv3z5iYmKw2+28+eablJWV8ZnPfIYvfelLUmhgU1MT9957L3/4wx84cOAA
x48f5/DhwyQmJvL888/z2c9+lsWLF9PS0sKuXbtoE6d+l+sXJ00OhwOVSiUJ9r6+PolC9b0sm8iQ
IUPGxw2hoTAwAGFhsGwZ7N4tCOvly6G1FZKTBYGtVMKhQ3D77YImr9XCX/4i5EtOvqKBgyDw77kH
6ushMhIiIoRJQiBUKtW8zO0wD5P7mTNncDgc8yocIDw8XDLzvv3229jtdkJCQqTJwaRrkltzbuWx
ssf4xaVf0DbchkvpIjs+m6LkIpK0SXi8gnf9At0CEiKEaUx8VDymURNuu5uFcQs5NHCI7sluChMK
UXgUVHZXArCvdR8L9QtxepyUpZexJnsNDy97mEsDl7C5bAyMD2B1Wvnv+v+mKLkIp9eJYcyAUiF0
jdFo5M477+TNN99kbGyMpKQkPB4P69at45/+6Z8krnGxr44fP85zzz3HihUr+OY3v4ndbichMZGR
kRFWrFjB6tWrKSgo4Jvf/KZEu1peXk5cXBx5eXls375dInI5ePAg+/fvJy0tTdrIJDw8nMjISA4c
OMCRI0eYmLgyebFarZSVlXHDDTeQm5vLO++8g8fjISEhAavVisPhwOFwSLzAMmTIkCFjZjgcUFoq
CPCICHC5wG4Xfmdnw4IFgjnebBaEf08PFBcL2nllpaDdFxdf0eZF83p+Ppw7B4ODguYfTLRaJ4T9
T+A6mtxFpKamSrza84HNZqO0tJTHH38ct9uNRqOZRiGbEZvBlGeKEEJ4evnTDE0M8ZmUz1DbVUud
so7wsHA25G0gXBlOWXIZ4aHhAKhQ8a2Sb6HTCBuw/EPJPxAZGgnAN1d9kwMtB6gfrCc7JptP5XyK
DksHPo/QKenadJyJwl7dBqOBY81H2ZCygZXpKzFajQxYB8iKzgJg/fr1aLVasrOzSbwsmPV6PQmX
7SOiSQQETvI33niDmJgYHn30Ud58801CQ0PZs3s3R44coaioCK1WS1lZGfHx8SxYsACAffv2ER0d
jU6nY9WqVeTm5vLDH/6QHTt2kJ2dzZ133kl9fT1qtRqlUskrr7zCwYMHWb9+PTk5OVL9ixcvRqPR
SMe33HILFy9eJDExEZVKhV6vJy0t7SNFFCRDhgwZHzWIxuj8fDAYYHJSOF69WtC6OzoEDXvJEvg/
/wfa22HtWoiOhvh4QeP+2tcEQX38OKxbJ+RXqeALX4CUFIiLEyYHN9wAsbFXtyFUHUpKSsrl9szN
5P6BMcWJpt2zZ8/S2dnJihUrJB7vmpoaHnnkkWlr8vNlCPNPP9NvDx5UqGbMd+1KCB5CB2zbto3z
58/z05/+FJVKNedy7XY7//iP/8jGjRu55557JNP+XDFTPTP1gQwZMmTImD8CQ838YTQKWrmfPjev
8rxewUw/1/quO1NcfX29tIPWfOB2u+np6cHlciGyuCUmJhJ7eUriwwe+2WcgMwmqYCxnYny7f5lX
nbv8O1g9/un86wiEyWRCq9USGRk57bx/fLp/e8Vvl8vF0NAQiYmJEuteYJy+mD9Yn/jfk3+MeWB/
+PfXTIxsMmTIkCFjZsykFPuHoc0VM4W3BZYp4r1wuc/Z5O5yud4T81lISAjZ2dkzXp9G+DKPuOzA
42m/pTL9BGogscwMVQVem6lNSUlJwNWTDNHhbCYiF7VafdWWeDMxrM1Uvz9z3kzlXKsMGTJkyJAx
O641dM53aFUogv8OBp/Ph9vtnlf5cw5bez+boFxTQ/SnzQk29ZkpWj8Y3c61rl2pFBRKv3OX7esz
mLP9fwdjiPO/fpXFIIhlYSYLwGzC94Mwpc+n/rmUNZ/2B0sv87jLkCFDBkRGRs47bG3OXu5Go3He
XO7+Zfh/rkKgMBfPzRatH/g912vSRxlwTnmlHeJHaoofB/1lrdhfcAcTQoHc5D6fD6/Xi9c7nTM+
GJe5mC5YWv8+FdOIv0WI5/zTzbac4f8JfFaB+QOP/dvgP0kJlmcmC4J/+sC+COTGF9Nd675kyJAh
46OCwGHK/3imIczpdNLf3z+veuZscm9vbyc+Pv49eboHjXsWvQJ6ewVf/k2bBHdAj0eI4j94UBCw
Lhd88pNw8SKsXy9E3+/aBTqdECdw443CcUmJcO3ECbjjDqioECL3MzMFt8LISHjrLYGmR6WCjRsF
N8O9e4W4gYQE+MQnIIB0RQwf6+3tJSQkhFWrVlFSUjLNtA5QVVWFSqXC5XKRmJiITqdDpFm9ePEi
t912W1DttK+vj6NHj+JyuZicnOTOO++ctgd4f3+/tEd5Q0MDn/rUp6R6Z1pyCJx0zOR34Ha72b9/
PxMTEzidTrKzs9mwYcNVj8p/ouG/CUsgn7zZbCY6Ohq1Wh00T11dHYmJiSQmJgJQWVlJUlISmZmZ
Uvqenh7sdjt2u538/HzCwsKmtWE2GmEZMmTI+CDxXvQHf50ykPpVvB4MDoeDzs5OUlJS5qy4XFND
FwfKNWvWSIPrfOBwOKirq6Ompoba2lrOnz8vzDpEQTA4CG+/LXDh3XefELTX1wcvvijEDKSng14v
cOft2AFnz8Lrr0NiInz3u0KA35YtQlBfY6MQ3X/xohBDcNddMD4OP/iBEPx3772CEA8NhTvvhEuX
4JvfFGIGKivhn/5J4OkzGvHZbIDgbPD000+jVqvRarUsXryYrq4u+vr6mJqawmQyMTw8zOjoKEND
Qxw/fpzz58/z8ssv89JLL9HY2Mhf/vIXRkZGaG1tpa6ubhr1bWdnJw888ABJSUlkZ2cTHh7O4OAg
586dY3R0FLvdTl9fH2azmVdeeUXq14mJCQwGAy0tLZhMJurq6nA6nXg8Hurr6zEYDCgUCgYHB6mr
q2NwcPAqAe9yuSgvL2fjxo1s3ryZ0tJS+vr6cDqd2Gw2+vr6puVXKpVYLBbOnz+P3W5HoVDQ3t5O
Y2MjTqeT559/nqamJnw+H9XV1ZjNZpRKJePj4zQ3N7Nz507MZjMgTFS+973voVAo6O/vp7a2Vpog
uN1uTp48iclkwmq14vF4GBoawmq1YjAYMJvNTE5OUl1dLVHwypq6DBkyrhfE4aSuDrZtg+3bhVC1
aUbeOX4cDiHEDYTj4WE4dkw47ugQxJWoiPsPY1qtllWrVl3ONzeFZV5Ocf6EMNeCqJlVVVUxPDzM
qlWrcLlcTExMsHv3bh556CFCNRqBUudnPxM+ly5BUpIQ1Cf2gtcraNOPPw6f+Qw88YTQy4WFsGgR
vPSScG1qShD4X/iCwKX3+98LwX+LFgnC+56tcP/9gkCfmBDORUYK31u2CGUvWSJw+r34Iop77oGC
AhQ+H4WFhRgMBlQqFY8++ihKpZL777+fl19+mVOnTuF0OomJiWFsbIzo6GicTifDw8PY7Q5yc3Mp
LCzk4MGD/Md//AdlZWUUFhby1FNPoVAoUKvVLFy4kMHBQeLi4vD5fLz44ovU1NQQFxfHww8/TEtL
C0uXLpUc8UDg1v/jH//I4sWL6enpQa/XMzExwdTUFHV1daSnp+NyuXj77beJioqiqqqKf/u3f6O/
v18yfycnJ6NSqaisrEShULBixQoMBgP79++XnBnffvttli1bxujoKHfeeSdvvfUWcXFx1NfXU1xc
zKlTpwgNDWVoaAiNRoPZbGbHjh04HA6OHz/Ol770JXbt2oXX66W+vp77778fEDw4i4qKGBsbo6Wl
hbGxMcxmMzqdjt7eXtLT0zAYDAwPD3PzzTezfft2ioqK+O1vf8u//Mu/cO7cOWJiYjh58iRf/epX
p21CI0OGDBnvB6Im3d4uiKTc3Cuc7KGhQly6ySSkXbcOamqEc8uWCeLHbhcMyv39ghE4OlrQVUGg
fn3+eYGsZnAQLlwQiGguh5z7tcGHy+WaV2TZnNfQq6qqphHCzBVut1vanSw2NpaioiJy8/Kw2+1C
Ao8Hbr1V0JT37LmScdMmQcjefjuEhAgm9ieegG98Q+gZpVLoyW99SxDKIyPwk59cIcz1b6vbLayR
e72Chr99u6DhR0YKJn2VSkgTESE8yW9/G/LyLveQEo/Hw0033cSWLVvo7+/HbDaTn5+PRqMhMjKS
8PBwaT3X5XKRlpbGkiVL+OQnN5GVlcXU1BRut5tf/vKX/OhHP+Lw4cPYLlsAfD4fMTExJCQkEBcX
h8fjQafTcccdd+Bxe670E9NnaR6PhwcffJB77rmHtWvX8sQTT2A0GklISCAmJoaYmBguXLjApk2b
+PKXv0xKSgoOhwObzYbNZsNqteJyuYiOjiYnJ0cyb69bt459+/ah0WhYunQpixYt4r777iMzM5NH
HnkEn89HUVERU1NTfP/732fr1q08+uijFBQWUlJSQkREBKfKT1FUVERCQgL79+8nKSmJr33ta2za
tEna4Cc1NZWysjL0ej2hoaHExcXR3t6O3W6/7NkpWBJCQ0MJDQ0lJCQEp9PJk08+SUZGBvv27aOw
sJCIiAhpsxtZS5chQ8b1hFotxJwbDIJgP3FCoH+dnBTi0NVqQWyNj8M77wiGXqNREDXbtgnCetWq
KwZpr1fQU2+7TdDMIyIEMRRMZttsNs6fPw/MfWybM6NJSUnJvGPQQQhbs9vtdHd309fXJzTO60Up
CqeJCSgoEITxt78N+/YJQnXbNsGEXlkpTGNAEOp6/ZXCReGdlydMl9atEzTw5csFrX3vXvh//w8+
/WmBo+/Pf4bHHoOf/lSg9+nrE4T7yy/D178uTCBiYmDfPnyX6/R5vZw8dYr6+nqJP100v7/00kv8
+Mc/liwP4+PjjIyMMDU1BcDJkycxGo1MTEwwNjaGx+PB4XAwMjJCX18fhw4dwm63YzKZuOOOO9iw
YQNut5snnngCpVJJS2sL4+PjDA4O4nQ6pV3TQLCYKJVKqS6n08nIyIjEzHfo8GEAmpubaWpqwmq1
4na76ezspL29nc7OTmn3t8jISKKiolCpVNTW1rJs2TJMJhNtbW0MDQ3R3d1NZ2cnDz30EBqNsJHM
okWL+NrXvkZNTQ1nz56lr7cXh8PB5OQkWZlZhIeHk5aWxooVK2hubqa7u5uzZ89KL6bL5cJms9Ha
2srAwADx8fFYLBYmJiaw2+1YrVaUSqW0TGEwGPB4PNKMNTc3F61WS3JyMvrL74S8ji5DhozrCYdD
MNyWlgpiyeMRvpVKQdRERQlCvq9P0Nz7+gSxVFgInZ3Cubi4K9SvjY2CrrlypSDQ+/oEbT4Y9Wt4
eDhFRUXA3Me2D5wp7siRI5SWlhIXFyddO3DgADesXUuUTicI4q4uYRrT3i44yeXmCnYLt/sKN156
upBubOwKPc/UlLB2fsMNAlO+03nlWm2t4GSn18PmzQKp7unTV6ZL588LDnOtrWC1CtfXrBGe0JEj
gpNdYiIet5vKqiosFgtOp5Pc3FyWLFlCS0uLZBbPycnB4/Hgdrtxu93ExcURFhZGZWUlWVlZeL1e
QkJCiIiIICYmhqamJjIyMmhvbycnJ4fOzk7KyspQq9XY7XbOnj2LzWYjLi6OuLg4bDYbaWlp9PT0
sHLlSgDJSU/UUJOTkwXfBJ+PU+XlFBeXsHBhDufOncPpdHLo0CG+973vER4ejsfjkULvKioqJK04
NTUVhUJBWloaTqeTixcvcuHCBRYtWkRWVhalpaWcPXuWlpYWVq9ezcKFCzl06BAej4dNmzYxNDTE
2NgYOp2O48ePk5OTw/r167l06RJ1dXWkpaWxdOlSaVmiq6sLvV7PuXPnUKvVhIeHEx0dTVhYGG63
m6SkJGpraxkfHyczMxOdTqD5XbBggdS2JUuWsGzZsnm/nzJkyJAxE0STe0eHoJ1HRAjHcXGCqGhs
FFaIV68W9Mn2diFPVJRg/FWrBS1+clLYjKWwUHAJ6+kRVpljY4U8drtAJRsVJVgAAoO9RFx3priK
igqWLVtGaGjonDpEFOjV1dVcunRJ2nDEbrfT3t7Oww8/PN1jPhgX3vQCr1yf6a6vdW0uCIyF/ytq
fXP11p5ruomJCd58801UKhUpKSls2rRpXu0xm80cP36crVu3zivftfB+vdJlr3YZMmR80Jht+DeZ
YHRUENLvpTyPR1jpna2+iYkJmpqaWLly5ZyZ4uYs0Nva2sjKypLoSucKr9fL0NCQRP3q8/mIi4u7
4sQkxnwrlVd+i/HgIkR3Qf+0VyqYntd/sSIwNsB/UiBeD1aPeM0v9Mof/tSuQrbgT90/Vj1YyJr/
t3/4l3/s9UzpZqKE9S9DqVRitVqx2WwkJSUFbYv/vQXeh9frxel0Shu+BNYRjEAnEP7nA73s57ou
FNjPwdohQ4YMGdcbAZQkkkgRv/3FzLX0P39xEyh6/MsUIUY4LVy48PoJ9Pdqcpfx4UPWZGXIkCHj
fz+6u7vweq9tcp+zl3tzc7PkoTxfBGMfC3b9g8ZM9QRq4H8rmK8mHCztTHnn8sz+ml7n16Ou2cr4
qHnQ/7X+MzJkyPhwMDU1RWtrKwBe79z+63O2n4+Pj7/nAWQmLVEUpKIZ2Z8edD4m3NkQzFwt1iOe
E03oHo8nKBNesHo+6pqvSOov3k/gPcMVoRBIUxt4LTCdf3+IzzBw8iCyw4lp/esXMdOEI3C3Ov/8
wcryr0ssL7CtMy0NiOX5fD6pr+baL4H3K8K/T2Z6RwPLCGT0C9Yv/sdifeI7G1in+Fu8P/88sy27
BMsXjJFvpvbPlOej/n+RIeOjBq/Xi9VqnVeeOTPFrVq1as4OcbNBHGwMBgM//OEPeeaZZ9ixYwdO
p1MamP0H0cCP/3n/9DN9xDRKpZKGhgZMJtO0c3a7nerqarxeL9u3b8fhcMxYhv/no6wd7dixg9/9
7nf85je/oaura9o9NDc3c/LkSbq7u6edByH0raenh66uLhoaGqbdd6CAtlgsjI+PSxMi/3RKpRKn
00lnZ6dUdm1trfSMZ8ojfoCr2qZUKunt7aW8vJzW1tZp+TweD319fdPK8/q8vPvuu1KfzPRegTAT
7uzsZHR0lN7eXs6dO3fVJKG7u5uhoSEqKiqCth2mC3cxTX19/azvZeB9gvBHPnXq1LRJTGA/mc1m
KbRQjFrwf68D+05sY1VVFSdOnGBiYkJqc2D/B+abrc3BntNs9yZDhoy5ITIykuXLlwNzVyBV3/3u
d78b7II4aIeFhREVFSUxgQXlZZ8HRIHQ2NjI22+/zWOPPcaPf/xjUlNTiY6O5re//S3Dw8Pk5+fT
1NTE66+/TlxcHENDQ4yOjkr8tsPDw5SXl2M0GmlpacFgMJCRkcGFCxc4fvw4ycnJ9Pb2cubMGdra
2tDr9XzrW9/C5/ORlJTEnj17CAkJobOzkzVr1vDggw/S19dHVlYWJ06cYP/+/SxatIj+/n5OnDhB
Y2MjCxYsoK+vj76+vmmsbR8l+Hw+tm/fztatW1m/fj1arZbW1laam5vRarU4nU4uXbqEVqvF4/FQ
W1tLREQEkZGRdHd385Of/IT4+HjOnDmDw+EgOjoau91ORUUFHo9HCj/csWMHo6Oj6PV6ysvLCQsL
k6IaHA4HfX19/PKXv2TTpk2o1WpMJpPktdnb20t3dzdmsxmNRkNNTQ0GgwGj0UhbWxtpaWkMDQ1R
WVlJWFgYarWaqqoqjh07htvtZsGCBYSEhFBRUYHT6WR8fJzf/va33HDDDTQ3N9PR0UGUNopdu3Yh
hnp0dHSgUAhENa2trXg8HgYGBtBowjEa+wgNDeWtt97CZDLR2NjI+Pg4oaGhREdHMzU1xbPPPkto
aCgXL15kZGSEsLAwwsPDqaysxGw2k5iYKFkWqqqqaGtrQ6EQmAC7urrQ6XSMjY1hsVjo7++nqamJ
2NhYDAYD586dw+FwkJCQgEKhoKuri8HBQTIyMjh48CATExPExsbS0NAgPa+jR49SU1NDbm4uERER
nD59mt7eXhITE2lqauLChQv4fD4iIyOpqKhgdHSUmJgYamtr0Wq19PX1kZmZic/no6GhgcbGRkwm
E/X19dPuzWKxEBsbS0tLC21tbURHRzM0NERtbS1hYWFMTU1RXV0tsSVWV1fT1NREREQETqeTiooK
vF4vsbGxsk+HDBnzgMvlYmRkhIiICMbGxgCIubzXSOD/yOv14nA45i7Qq6urSU1NnbeXeyDEP3V/
fz8Wi4XPf/7zpKSksH//furr6ykoKOD8+fPYbDaOHDlCdnY2Pp+PS5cuYbfbUavVHDt2jJ6eHtrb
23nzzZ3odDqOHDlCTEwMP/vZzzCZTNTU1NDe3o7RaKSpqQmNRkN4eDh5eXmMjo5y+PBhDh06RHZ2
NklJSdx0003s3r0bp9NJbW0tCxcu5OTJk4yOjnLmzBmcTidDQ0MkJiYyPDzMggUL3lc/fFBQKBSU
l5dLnOfJycm0tbVx7tw5rFar1O+pqakcPHgQq9WKXq9Hr9czNTXFwMAA2dnZ2O12oqKiuHTpEm1t
bfT19XHq1CmWLl1KeHg4w8PDaDQaTp8+jcVi4ezZsxLVr1arJTo6mvHxcdasWYNKpWLv3r2cOXOG
lIPTfQ8AACAASURBVJQUmpubJYIdk8nEuXPnSExMpL2jA5/XS39/P9XV1QwODtLc3ExPTw9hYWGS
IHI4HOh0OhobG7lw4QLx8fHSxkE7d+7EYrFgMpmIiori4sWLpKSkcOrUKYqLi1Gr1ezevRuz2cyu
XbtQKhUYjUZcLhdarRadTofNZmPBggUcPHiQNWvWoFAoaG1tJT8/H7PZPO3duHjxIrW1tej1eilu
3mQy4Xa7OXPmDBqNhubmZhQKBT09PdTX11NdXY3FYqGuro6GhgZKSkrYs2cPixcvJjw8nDNnzpCR
kUFrayvR0dFYrVYaGxspLy9nzZo1VFRUoFariYmJYXx8nI6ODlQqFT6fj8bGRurr68nOzqa+vp74
+Hiam5uprKwkJSUFu93OggULOHLkCGvXrkWhUPDcc89RVFTE2bNnSU1N5fz584yOjlJdXU1bWxt2
u53jx4/j9XpJTExk//799Pb2kpKSgs1mo76+XmK0GhsbQ61WU15eTmdnJyMjI+zYsYN169ah0Whk
oS5DxhwxOTlJQ0MDCxYsYHR0FLi2QJ+zyb2srOy6mNxFeDweWlpaMBqNHDhwgDVr1jA+Pk5RUZE0
YDocDlauXElSUhIhISEMDQ3R1taGRqPB6/Vy6623sn79Om6++Ways7MZGxtjdHSU4uJi0tPTcTqd
l9Osx2q1Ehsbi0qlwmg0kpGRgcViITIyUmJ+s1qtDA0NkZ6eTklJCf39/dhsNrZs2cLmzZtpamoi
JyeHkpKS69YP1xs+n0A/e9ddd7FlyxYUCgXDw8MS9atCocBms6FUKrnlllsApC36QkNDiYqKQq1W
k5OTw+LFi+nv72d0dJTs7Gxyc3OlLXTFvhwcHCQnJ4ekpCSJOKa9vR2Px0NsbOw0dkGFQsGSJUvI
zc1l8eLFJCUl4XA4KC0tJT8/n7Vr1pCXl0dnZycOh4OFCxeSmprK4OAgS5YsISMjQzLzt7e3o9Fo
pJC6hIQEHA4HkZGRFBQUSNrjnXfeyc9//nOSk5MlNrz8/HxOnz5NWloap0+fZtmyZTidTuLj44mI
iCApKYmlS5dit9vx+XwSgU94eDjx8fGUlpZKzH1paWkUFRVJ/5PW1lYSEhIoLi4mKioKh8PBzTff
zGuvvSZNBqampigoKCAqKoqYmBiJbMdxmS7KbDZL+wEsWbJEurecnBwKCgqk9X6dTkdoaCjNzc3k
5eWRmZnJ8PAwubm5lJWVkZCQQEtLCyEhIeh0OqampqQ6xIm51+uV7qG0tJSVK1cyNjaG0WgkLS2N
3NxcdDodt956K1arFZPJxMaNG4mPj6ezs5PBwUFiY2MJCwtjcHCQtLQ0SkpKmJycpKuri4yMDBYv
XixtHCQLcxky5obIyEhWrFgBXEeTu0ajQavV4vV6UalU1+UPqVAomJycpL29naqqKpKTk3n44YeJ
ioriJz/5CQqFgqeffprx8XGeffZZcnJyKC4u5sCBA3R2drJ27VppcPV4PKSnpzM+Ps7y5cslU/v6
9euJjo4mPj4ehUKBTqdDp9PR0tJCeHg4Yjz8ypUrJW0uLCyMm266iYqKCnbs2MHjjz+OWq0mIiKC
iIgIQkNDGRkZoba2lqKioo+stjE0NCRp0lNTUzQ2Nkqm48jISBISEoiPj6e/vx+n00lCQgIZGRko
lUoMBgNut5uUlBTJjJ6bm0t7ezt6vZ7i4mJUKpU0uC9atIjW1lZyc3MJCwujt7dX2nCms7OTrKws
NBoNAwMDREVFkXWZ216r1QIQFhZGREQE0dHRgDAhiY2NJTk5mc7OThYsWEBpaSm7du1icHCQhQsX
Eh8fj9frleh0k5KSMJvNpKamYrPZmJiYoLi4GJfLRVlZGadOneL2228nNjYWEHwFtFot69atA6C4
uJipqSk0Go00I46Pj2d0dJTCwkIUCgUjIyNYLBZJEx8dHaW0tJSenh4UCgVLS0uJCA8nJiaGxsZG
zp8/T2hoKOnp6eTm5mKz2SSWwb6+PiYnJ1m8eDEqlYr09HTMZrO0257T6cTn85Gbm8u2bduw2Wys
WbOGQ4cO0dbWRmZmJtnZ2bS2thIbG0tZWZn039i4cSNOp5OkpCSpf8TZvVarlf4PTqeTgoICvF4v
JpOJzMxMJicniY2NxWq1smzZMrq6uggNDZXYDAGSk5OxWCzYbDZiYmIkdkSn00laWhqDg4NUVFSQ
nZ3NypUraWpqIjs7m6ioKFpbW0lPT//I/m9kyPioQZy8z9XkPmdimRMnTrB69er3tIXqfGC32wkL
C5vmsBQeHi41ei5r+Ha7XdLcAiGW4XA4pt2Lv4d7IKHK/1aIz9HpdKJQKK7aLc/r9UpCPtBzPbCf
x8bGiIqKktaJFQqF1Gfi+iwIGwqEh4cLjmkB3tXzhX+5k5OT0iYtIqampqY9Q9EZTxTYgGSWv//+
+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
wTkzqw+sa9nuvpc0RdpLTCxWo34NDr+4PdZKFRusBLdSXoPjWymN5d5da5lXq4OVwgffX2kSuVSc
i/vkvfSnxboK91onS/Xrpe6HEEIIXw4EAoF7PuZes9narVu3SE1NXVdbdJ/Px8WLF7Hb7aSmpuLz
+Th//jxzc3OkpKQsoB+VBqempiZu3LhBbm4u4eHhXLt2jcnJSdLT05ccIK9fv05NTQ0qlYq4uDga
Ghq4evUqCoViwfmx9N9sNnPlyhXsdjtpaWnIZDI6Ojro7u4mMzMTgJaWFurr60lPT5/Xtl9BWcvv
99PV1UVXVxcKhQJNjIbOzk76+voYHh5GoVBgMploa2vD5/MRFxdHf38/U1NTeL1eenp6SEpKorOz
k5qaGuRyuWC9WwpSOSYnJ2lpacFgMGA2m0lKShJ1EzzIBwuFlZ5PTk5y8+ZNNm7cuGT4xdcymYyr
V68yNzcn0l6qnvx+P6Ojo2g0mrveXy1PMpkMk8mEUqlcVsiu9P7nuXa73ZjN5hVZApeLA+YpHM+f
P49MNm9P7/V6uXDhAg6Hg9TU1CXLUFFRQW9vL7m5uau2m0w2T9Erk8kWWB4YDAa0Wu1deQyt3EMI
4csJu93OnTt3yMrKWrPZ2poFulqtJjo6el0/frlcTmdnJwMDA2zbtg25XE5HRwdTU1MUFxcjk8kY
HR3FaDSSkJCA0+mkrq6O5ORkxsbGyM7Oxmw2093dzZYtW5DJZLhcLtrb2wU3/KlTpygpKSE/P5+I
iAg++OAD0tPTKSoqEqZNwauVsrIykpKSaGlpIS0tjejoaN5++218Ph9btmxhcHCQd999l2effZa4
uLhVB0SZTMZ//ud/EhERQUNDA2q1mrGxMerq6ggEAhiNRsbGxhYI8aGhIQwGA6mpqXz22WcAtLe3
k56eTlNTE1u3bl2xXmUyGWfOnKG5uZnJyUlGR0dJTU2lra2N6elpbt++TVpaGoODgzQ0NBATE0N0
dDT9/f189tlnjIyMkJOTw9jYGLdu3UKpVBIdHc17772HzWbD7XaTkpLC5OQkVVVVeDwedDod4+Pj
fPbZZ3R3d5ORkYHJZGJqaoqJiQnm5uZIiE+4awLV29tLXV0dmzdvpry8nI6ODvr7+/F6vSQmJlJV
VUVdXR2JiYmoVCqamppoamrC6/Wi0Wh48803MZlMqFQqNBrNgrZ0OBxUV1djNptpbGwkIyMDo9FI
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

------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://robotframework.org/robotframework/latest/images/tagstatcombine.png

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
Av9CjiG5XP6/nbIIwobLlswAAAAASUVORK5CYII=

------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://robotframework.org/robotframework/latest/images/tagstatlink.png

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
urqZmZmCggKHw6mtrQWQkpLStWtXJpNpa2ubm5tbXFwMgMlk2tjYyMnJqaurE8kcHR0NDAwcHR2J
cszNzTkcjqWlJY/Hy83NbWhCKpUSF6mpqQYGBtra2iYmJkRHODs728DAwMDA4I8//vhExW7cuJGS
kjJr1iziRwZAJBLt2bNHS0trxIgRlP9P4D58+PD8+fO+vr7EEPy2bdsmTpw4dOjQFStW3Llz59at
W0SyX375xcHBYdSoUQ1fFePi4rKysqZPn/5+pCT5llFUxODBiI5GairKy+HlBQ0N9OkDYq3MtGkY
PBgDBiA7GxkZsLHB0KH46SfExgKArS1Gj4anJwoKAODAAWzYgOJiAJg0CUOHwtkZ9+59wOjz55g4
8c18T/v2yMjA69fo3r2Vav0vh0KhyPpqdXV1ZJttKz6wOM3ExOT7778/d+5cSUmJvb29lpYWlUqV
SqUSiUT2+CYe2bIHt6mp6fPnzyUSybNnz7S0tFRVVYnZdcrbS3MiIyNrampkSxeys7P5fH5ubi6b
zdbS0qLRaFQqtbKyUlVV9dmzZ7KS09LSysvLq6uriYl9PT29+/fvA2jXrt3HalVZWRkWFtarV6++
ffvKbqalpZ09e3bTpk2yZXJCoTAyMlJBQcHd3Z34CRYXFxPTTlwul8FgsNlsXV1dY2PjsrIyVVXV
srIyLS0tIm9JScnOnTudnZ0tLCwa95WTfAP064fjx7FpE+bMqV9mVldXf0Hs8aDRIJWCwUBVFSQS
lJSAaBZ0Ov7fyACgWzdUV4NYH1pSAokElZVgsUCloqYGYjFKSkA8SOl0VFdDKkVtLQCMGAEuF4mJ
iIjAe0Pa3yIaGhoFBQXV1dVMJjMzM5MY1SBpfT4Qcmg0mo+Pz+jRoyUSycyZMxkMhrm5uVAo/PXX
X+fNm/fBUlasWPHnn38uX7786dOnc+bMsbS0TE1NfT/ZOwNQDx8+DAkJSUpKGjFiRJ8+fbhcrr29
/bx587777rs7d+4QaaZPn+7v77906VINDQ0ul0uhUOTk5Ozs7GSFXL169ejRowC2bNni4eFBfJSQ
kHDp0qVDhw4pKysTyYRC4bZt26ysrIYMGSLLm5WVFRkZGRQUJAsk+/fvr6yspFAojx8/njBhwoAB
Azgczrx581avXm1oaJiYmLhy5UoAUqn0/PnzT58+/f333798vTjJfw8WC717Iympvs+hro4VKz7w
6O/SBZcuYdUqvH4Nf/8PlPPdd2+uDx/G/fsoKcHPP4NGw8uX+O03iMUQiQCgZ0+sWgU2G69eAcDl
y3j5Ejwevnwynlg9pKqqKhaLZUMUzU58fHxUVFR6erqOjs6kSZOavXwTExMNDY01a9ZQqVQlJSUr
Yh6MpNV5E3JqamrodDrRjzExMdHX1xeJRL179wbwww8/WFtbC4VCNps9d+5cYpQMwLJly0QiEYBh
w4bZ2tqWlZUxmUwDAwMWizVq1ChZD8Pb25tYbdyQs2fPysvLCwQCd3d3PT09JSUlJSWl/fv3c7lc
Op3u7e1dUlICwNjYeMOGDRQKpbq6+vTp08TsfUO+++67gICAgIAANOj3dO/e/erVq+YNlg3R6fSg
oCA6nd5wcaS+vv758+eNjY1ld6ZMmVJUVCQQCDw9Pdu1a0d0yLy9vQcOHFhbWztlyhRi/I1CoQwd
OtTW1tbMzKzJXz3JfwmJRPL48WNDQ2OBgE2ng8/Hixfw9QWLBQBLl4LLBYuFRYugogIA/fpBLIaK
ChYsQEEBFBTQvj2kUixbVl/gunVvle/vD5EIlZVQU4OODurqsHQpysqgolIfcsaORXY2+HxkZQHA
iBHIzQWNBkNDiESiZ8+eyZptY+nZsyfxskhM5bYQnTp1mjZtGgB5efmWKJ/FYk2ZMiU7O1sqlRoa
GsrGWhrHc6CiuT37Fmiw+qQ+5KSkpPzxxx/9+vVr3759Wlra/v37RSLRvHnzWCwWAHl5+U6dOhEp
dXXfLBKULZqk0+nt2rVrONKlpqYmm6LX0NDQeG8ngqxAGVQqVVtbWxYSCEMikej48eN1dXXZ2dnW
1tZjx459J5eOjs77OyFUVVXfWQFJpVIbhhYCNpttaWnZ8A4R+d5JxmAwTExM3rmpqampqakJEhIA
gJub2/HjxwUCn6oqQzk5zJ8PAwPIVq7o6ID4kcqaCIdTf6GuDtmTnEKBbB2yoeFb5b+zjYRKha4u
GrRFFBUhJgbFxSDe9BQV3yzU5vH4x48fb9i/bxRGRkZNy9goGrb9FqLhc6wJDBs2TCVBpRn9+Xbo
6N5Rdl0fcjp06LBkyRJlZWUNDY2amho/P78ZM2Z8elNb68BkMn/88cfy8nIqlaqmpiYbKCMh+Vfh
5eUFIDcXLBaUlPDTT2/Fg1bAxASTJ0MieTc4AeBwOEuXLm1Vb/6LODg4ODg4tLUXXz0Uc3NzV1fX
tnaDhISk9Th16lRLt/oXL17U1ta29OKaVqhIK5j4djh16hTd1NSUmAghISH5Rnj69GlLt/qrV6+W
lpYSKlktRytUpBVMfDs8ffqUzmaz27dv39aekJCQtB6t0OqJzRUtbaUVKkI+IZsRNpv9ZsWaRCK5
ceOGtbX1p6WHMjMzKysrG27pbxoJCQl6enoGBgZfWA4JyVdERgaMjPCe3OA/k5UFLS00bZkVSbOQ
mZmZk5PT1l58lairq3fp0oW4fmuRtL29/QeVpM+cOZOamrp48WIAoaGhzaIk7enp2SxK0lwu98CB
A+np6WvWrFFRUQFw8ODBmzdvyhLY2dn5+Pj8+OOPDXMFBgYaGhqePXv25s2bIpGoQ4cOY8eO1dHR
Wbp0KZfLJdKYm5sTpwEWFBTs3LkzLy9v+/btDQt5/Pjxnj17GAzGmjVrvrAWJF87mzdvTktLCwwM
lAnIfiRZE5WkIyKariRdXl6+cOFCDQ2NVatWNSF7VlbWrl27PD09zZtm/vMgGrK5ufmwYcNayER2
dvauXbuEQuGUKVPeX4P6j4SGhoZwQkAuYGo8zjecY49/REna3Nw8Pj7ewMDA2NhYIpE8ffq0tLT0
yJEjt2/ftrOzI46VFYlET548ef36NZvNtrGxkZeXFwqFz58/f/36tYKCQpcuXRQVFXNzc9PT09u3
b5+dnc1kMi0sLN7vPFVWVt6+fVsoFHbu3FlLS6u4uPjBgwcODg5UKrWgoODRo0cODg5SqfTZs2d5
eXmampoVFRWamprvLHNMSUlhMBg7duxYsmQJEXJGjhzp7OwMICcnZ9KkScrKynQ6Xab7efLkyXnz
5k2bNi06OnrZsmVhYWF6enpBQUG3bt06evRoZGSkn58fMXQrOzfo9u3bdDp9x44dDUPOs2fPQkND
ib1EZMghuX379o4dOzgcTmgoevWCre1bn06ejLdPz2hVlJSUVq9eTex6aQIJCQkSiSQvL69FQ86j
R49YLFZycnILhZyioqKNGzdOnDiRzWaHhIQsXLjw/U1+/8w4Ukm6Sbw5JaaBxhqhJJ2UlLRq1Sri
Gcrj8ebOnbtz504ejycSiV6/fk0cCpCVlRUdHZ2SkvLzzz/v27cPQExMzKxZs54+fbp169a1a9dW
VVWdO3du+PDhe/bsSUtLW7x4cUOlZxnnz59PTU3dvXv34sWLS0pK7t+/7+TkROwtvX79+g8//AAg
LS3Nz8/v8uXLp0+fHj169PtquEOGDOn+towUm80m9uUkJydnZmb6+fnh/zt16HR6dHT0kCFDiHec
uro6dXV1NTU1JpMpU3WLjY0NCgraunVrUVERccfd3f2dOCcQCMLDw0eOHNmUXy3JfxEKhUL8wPh8
lJTg0CHU1ABAejr8/XH1Kvz8QChJnjyJmTMRHo7qatTV4epVBARg82ZIJODzsWYN1qzB7Nl48OBd
E7GxmDkTUVGoq0NGBi5frr+/YwcAPH+ORYuwdm29rGdGBgIDsWABnj8HlUqVKVo2gXHjxr2/p63Z
sbe3JzaetxBZWVkGBgY2NjadO3e2srIipIdJWp8PKEl7e3tfu3atoKDg9evXDx488Pf379q1q5qa
mkzLWV9ff+bMmYSwzZkzZwAsXbrU2dl51qxZK1eu3L59e0pKCgB5eflZs2bNmDFj2LBhMTExAK5d
u3bq1Klr164Rtvr37z958uTg4OC4uLjr16/jPU02AFu3btXV1V24cOG0adOIraY1NTWnTp06depU
enr6JypWW1u7cePGMWPGmJqaEnekUum5c+dSU1NnzpyppKTUv39/Y2Njf39/X1/fxMREQmNj7ty5
YWFhq1at4nA4o0ePTvmIDG9YWFi3bt1I8XOSD8JiISMDqakQCrF/P2bMQLdu+PPPet0BgQArVqCw
EJcvIzkZMTFYtgwsFnbtgkiEEyfg6Agfn3op6IaUlmLpUjx9igsXUFgI2TGERHvatAnOzujbF8eP
A8D69XBxwYwZyM9vrWr/u6mqqiIO9wKgqalZXl7e1h59o7wbcigUyoABA1RVVa9cuXLz5s1OnTq9
/4IjLy+vpqZGo9EYDAYhzpqfn6+jo0OhUHR1dSsqKqqrqwHQaDQdHR0qlSonJ0ckmz17tpub2+zZ
s4lyNDQ0GAyGpqamQCCoqHhLR0Km+Zqfn6+srEx0XAgljIKCAjc3Nzc3t8OHD3+iYnFxcWVlZePH
j5eFMaFQePDgwe+++444Tu3KlSsvX76MiIg4ePBg3759w8LCAPj7+3fp0kVLS2vq1Kn5+fkPHz78
YOE3b948fvz4xIkTIyIiSktLDx48+E/fM8k3hJwchgzByZNISACHgy5dQKNBXr7+/Gl3d2hooGtX
lJfj9WvY2UFbG2PGICkJALp0QdeusLaGQAAAv/4KT08QJ9COGgUdHQwciIyMDxgtK0PPnujZE8Qr
lqMjDh7Etm1oFemArwA6nS4Wi4nBDKFQ+P6JkSStwwdkPQ0NDV1dXaOjo0tKSlxcXLS0tOh0ulQq
FQgEcoQK7nv07dv31q1bo0ePjo+PNzExadeu3QeVpB+8PVjw4MGD8vLyJ0+eqKiomJiYEL+DnJwc
PT09otMDoE+fPrGxsbm5uWVlZcRIV4cOHSQSyfuFN6SwsHDr1q1OTk59+vSR3bx169aNGzeOHj1K
TNIQUY1Go1EoFCqVSvz3wYMHhoaGysrKSUlJCgoKHxOrPnLkCPHb/fPPP4ODgydMmPAxT0i+Tb7/
HidOYP16bN0KKhUUCoTC+sMLiClCQlVaSQmpqRAIkJpaL3VDo6GhrP7y5W8SP3wICwtkZkJDA3Q6
uFzw+cjIgEQCACwW8vIglYIYD+7SBY6OuH0b27fjQ6Pa3xx6enqnTp0qLi5msVgpKSmEWgRJ6/OB
kAPA3d19x44dUqnU3t6eSqXa2dkdOnRo/PjxO3bsoNFosnl1Go1GdFR//fXXP/74w8fHh8fjLVu2
zMzM7N69e7L3CCqVSmRpeEYFnU6vqqpauHBhWlra5MmT7ezsysvLPTw8/P39TUxMqqqqiOxeXl5J
SUmzZs0yNTUVCoVECQ3LOXz4MLFsjBD3JJRu7969m5qaGhwcLDungM/n79mzp1+/frb/n9h1dHRM
Skr68ccfWSyWUCicP38+gOTk5LCwsMrKSh6PFxgYSAwuh4aGHj58mMFgjBs3LjAwsHv37hQKhQh4
dDqdTqd/IviRfLNYWYHFqhdV09ODlxd27HhzMAGVCioV1ta4cQOTJoHBqI8usgQNIxNxPz4ely5B
Rwfz50MqRXk5Jk+GbDLR0RELF0JJCcR4wd9/Y/Vq1NXB0/NLKxIcHHzixAk2m52dnd0SGs8Ex44d
27VrV0FBQVVV1e+//97s5RsaGvbo0WPevHl1dXUODg6kIG9bQRk7diwxQvXixQsLC4u4uLj+/fuX
lZW5u7uzWKzY2Ni2PctIIpE8efLEzMzs2bNn3t7es2fP9vHxaUN/SEg+yMiRI0eNGmVvPzQ8XGvE
CBga4vffMXs2Wm3jWXk5hEJUVCA4GDt3vvVRTU3N8ePH9+7de/HiReLOuHHjPj0u/eWcPXuWy+V6
e3u3qJVWqIjMRGBgYIh2CEhhz8bjHOccGx0LYNy4cfX9lfj4+N9//93d3d3MzCwxMXHz5s1UKjUo
KKjNz86TSCTESoHq6uoffvhhxIgRbesPCckHWbBgAZfLDQ6mKyhATg7TpsHZufXiDQAuF1u3gsvF
yJHvfkSlUlVUVBYuXNh63vwXmTx5sv0L8mC3pqC1QEt2XR9y+vfvT+y5AaCjo7N///428OtDMJlM
YgsqCcm/GWJNyvDh9f89dqy1HejY8QOL3AhYLNZwmWckTaVz587vHDJJ0gQohoaGLbocnoSE5N/G
nTt3WrrV5+fnCwSClj5rpxUq0gomvh3u3LlD7927d0sPhpKQkPyrIOdy/lUmvh3GjRvXxlM1JCQk
JCTfDh9eJE1CQvI1kp4OGg2fVBYlaSLx8fFJxH5dkkZibGwsW/nV9JDj6OgYEBDg5ubWTF6RkHyj
DBo0qF27dgcOHABQW4vSUohEYLGgpob/7yv7XFJSwGS+G3JKS0sJpdqmDRARS1h/+umnd8QMm5cX
L15s377d0tKyhXZB1NXVJSYmRkREiEQib2/vPn36NHY57smTJ0N6hqDxKuAkztudPxByhEJhSEiI
jY1Neno6h8OxsbFJTEwUCAQuLi7l5eX37993d3dXV1cvKSk5cuSISCS6deuWoqKiUCj08PAoKyuL
iYkpKSkxNjZ2c3Oj0+llZWXnz58vKirq0qXLvXv3fHx8dFv5LHgSkq8ELS0tIt5UVGDzZtTWgkIB
lYr+/TF0aDOUr6amdvjw4XHjxjUte3l5eefOnSsrK5vBlY9TVlbWo0eP58+ft1D5eXl5Bw4cmD9/
PpvNXrVqlY6Ojkx9sRFYkUrSTYL6oUuBQLBw4cJDhw6ZmpqGhIQsWLBAW1v7+vXrixYtkkgkmzZt
IuQ4r1+/HhoaamxszGAwLC0t7ezsAFRUVHA4nC5dumzZsuXIkSNisXjNmjWRkZHdunWLjY1duHAh
ebQRCck/cvQozM2xdCl++w3z56NbN4jFOHMGU6bgp5/w7BkAPHqEWbMwbRouXEBdHcrKsGABJk3C
3LmIi6svh8/HgQPw9cWiRSgp+VKvhgwZotGEE34aSbdu3VpUESAnJ8fExMTQ0FBLS6tbt27PiG+T
pNV5t2s5cuRIR0dHZWXljh07Ojk52djYpKSkEIrfFy9erKysvHbtWqdOnZycnOh0ur6+PiH6WVtb
m5+ff+fOnaKiomvXrvH5/IiICC8vr759+7b0khUSkv8Mt2/jhx/AZiMxESEhSEwEl4tz57BsGTw8
EB4OADt3YuJELFiA6GjweNi3Dz174s8/UV0NmThyQgJevsSff6J3bxw40IYV+hfB5/Pl5eWJwTQl
JaUa4mwJklbn3ZCjqKhIpVIpFAqLxSKE0aRSKZVK9fPzu379+uPHj+/duzd69Oh3dFj9/PwePnzo
7u6uq6srFAoB1NTUKCgoACDkn0lISP4RBYX6sGFqCnt7XLgAPh9KSmjXDt27o7AQAEpLYWOD9u3B
ZEIsRkYG+vYFm41+/d6Uk5+P8+cxeTIiIuoVqUlYLFZtbS2h3ltZWckmz/RuIz53As3W1lZTUzMy
MrK0tHTAgAEA5OTkeDweIaj86tWrDh06UCiU4uJiAAwGY8CAAefPn6+qqiIO1CEhIflHXF2xdSty
csDhgHgksliorEReHhISoK0NAOrqSEpCVhYEAjAYMDVFfDyqq/H/U6gAoF07DB+OnTsRGgryUCcC
AwODzMzM7OzsoqKipKQkUtazrXizfIBKpfbo0UNJSQlA586dDQ0NAbRr187KygqApqbmyJEjV65c
OXbsWDU1NQBz5sy5evWqUCgMCgrasGHDsWPHamtrLS0tO3TowGQy161bFxoa+tNPPxkZGdHp9DbX
aiMh+fdjbw+BAOvWoaICxsbw84OmJoYPx8qVUFTErFkAMHUqwsLA52PsWCgqwtcXwcGIjQWdDhoN
yspgMtG7N0pL8fPPUFTE5Mlf6lVwcHB8fDydTm9pJenIyMiampoWUpLW09Pz9PQMDg4Wi8Xe3t7E
ucAkrc8bJelPI5VKT5w4MWfOnM2bN3+OtuazZ8+EQqGJicnOnTt3794dExPTvn375nCYhOS/hrm5
uaur67p165qW/e5dWFhg9Wo4Ob01vCajoqJixYoVCQkJt2/fJu6Q6gNNMBEYGBhSGgKFFrX238Q5
1zk25m0l6X9k06ZNd+7cCQoKcnJy+pz0bDY7Kirq6dOn2trae/bsMWhNTV0Skq+KK1eufMmRSykp
2L4d9vb42LYZRUXFuXPn0mRH8ZA0iWXLlgVWBba1F18lLBZLdv25IWfOnDlz5sz5fBv6+vqkAjQJ
yefwscNnP5Pp0zF9+qcS0Gi0LzRBAkBJSYmYdyD5EkglaRKSbw5SSfpfZeLbgVSSJiH5FiHncv5V
Jr4dSCVpEhISEpLWoy2VpCMjI1+8eLFkyZLWNLp27dp27do16uUrLCystrZ29uzZLecVCcnHOH0a
1tYwNGxKXh4PJ06AFABpFiIjI8+dO9fWXv9ny9IAABV6SURBVHyVWFtbz507l7huy5AjEokELbk3
msPh7Nq1a8yYMQ1vXrp0ydzcvFEh5/bt2zwejww5JI1l1apVCQkJU6dOdXMbkZeHv/+GQABDQ5ib
4/NFOf7+G4aGjQ45tbXYvx/u7rh3D8OHlwYEBGRlZSUkJDS2Cunp6Xv37n316hWLxerSpYuPj4+q
qmpjC/lHysrKtm3blpGRQaVSjYyMfH19m30SSCQSxcTEnDlzpq6uzsHBYdy4ccxGynQnJSUdWHCA
lPVsAqUBpXPxoZDD5XIPHjz44MGD9u3bT58+XU9P7+LFi7GxscuXL+fxeCtWrFizZg2NRluyZMn4
8eNVVFRWrVo1ZsyYy5cvU6nU8ePH9+3bt66uLi4u7syZMxKJxNXV1cnJqaysbMaMGW5ubvfu3WMw
GBs2bJCZo1AoxNpQLpe7efPmV69emZubz549m81mjxkzZvjw4SkpKWVlZc7Ozq6urlevXj169OiQ
IUOuXr2qqKg4ffp0c3NzPp9/6tSpixcvysnJ+fj4NBRXDw0Nramp2bRpU35+/s8//9ywmoWFhevX
r3/06JGFhYW/v7+SktKzZ882btwoFAqHDBkyZsyYzMzMX3/9dfTo0devXzf8f1uXSqUxMTHR0dGB
gYFWVlanT58+d+4cnU4fM2ZM//79i4uLZ82aNXLkyNu3bwsEAnd3dwcHByqVmpCQcPjw4erq6sGD
B3t4eNDp9AkTJjg6OqamppaWlg4bNmzEiBENVxCS/JeQSCQbN240NzfPy8OWLejUCfLyOHcONTXo
0wdSKaRSACD2SdfV1eeiUEAsmZYlaEjDZESa99NTqZCXx9Sp9ZqeX6IkraysPHHiRBMTE5FItH79
+oyMjB49ejShnE8jJyc3fPhwMzMzBoMRExNz8eLFqVOnNq+J7Ozse/furV+/nsVirV69+tmzZ5aW
lo0uhU4eMfalvHV4wcyZM+Xk5LZs2bJt2zYvL69Dhw4pKipevnx5+PDhubm5u3btcnZ2ZjKZN27c
mDx5clFRUVRUVLdu3datW7d27VoPD4/8/PwzZ84sXrx49+7dTCbT19dXJBLZ2dlFRUWpqamtW7fu
nSWGqamp9+7dAyCVSkeNGqWjo+Pj4yMQCFasWBEVFVVbWxsREZGSkuLu7n7u3LnMzMyjR48OHDhw
7dq1c+bM8ff3v3r16pYtW2JjYyMiIrKzs/38/MLCwr7//nui8ICAgF9++eXnn38eO3bsO3VOT0+f
N2+em5vbyJEj6XR6YGBgXV3dokWLhEKhq6sri8XS1taOiorq2rXrunXrFBQUfHx8amtr9+3bt2TJ
kiVLltjY2Bw+fHj16tV79+4tKSkJCAgIDQ01MDCIiorS1NT8/fffjx075uXllZyc/OrVq4CAgA0b
NpiYmHh7e1dUVMyYMeP48eMlJSWRkZFPnz51dnbW1dUlBIRI/sMUFwOAqys0NOrDA4+H8HCkpEAi
wdKlMDZGz57o1w8FBejdG7/8Uq/syWLh+XM4O78pasAA2NmhoADq6lBTQ3Y2mEzMnw8GA/v24dkz
1NUhKAhGRggMxOrVX+q5jo6Ourp6VFRUWVlZWVlZCy22ZrPZNjY2Z86cKSoqevDgga+vb7ObyMvL
MzY21tTUpFAoXbt2ff78eVNCDskX81bIiYuL27Nnj4qKyqhRo9auXVtQUGBpaclisR49evTo0SMl
JaXr169raGioqal16tTp7t27ALy9vTkcjq2t7Zo1awCcPHmyrKwsODiYSqWWlJTcvXuXON1g3Lhx
RLw5dOgQsfzjr7/+kpl++fLl/v37uVzus2fPlJWViZtjx45VV1e3s7OrrKysra0FoKSk5OHhIS8v
b25unpiYCIA4pGfBggVSqbSgoCAtLU0Wcj5Bz549bW1tqVSqgoJCSUmJSCRKT08/ffp0VVVVXl5e
bm6utrY2AC8vL0KZFEBiYmJycvJvv/3m5eUF4PTp09bW1hYWFhKJREVF5dq1axMnTgTg6empoqLS
rVu30tJSsVh8+fLl/Pz8HTt2MBgMLpcbHx8/Y8YMWdW6devG4/Gqq6u//K9I8i/H2BiGhggKAoUC
Z2e4uODxY5SXY9MmvHiBPXuwciV0dLB4Meh0/PgjABw6hAULYGiIn356qyglJfz4IzQ14e+P0aPR
pw8OHEBSEgYNwujR0NdHRgYiI7FoUbM5T6FQFBUVKysrZZqKLQSbzWYymTwer07WlWs+xGIxnU4n
hlWYTKZIJGp2EySfw1u9RCqVSvyx6+rqCFU0DofTr1+/8+fP5+fnT548+cqVK6qqqgMHDlRUVCSy
EBdUKpX4LdJotO7du+/du1f2sM7LywMg021ls9nq6upEFpndSZMmDR06dOfOnVOmTJHN7hAlNExG
pVIJXWoKhUKYo9Ppw4cPX7t2rUzZ+vXr13FxcV5eXg21riUSyb59+xwcHPT19QHIyckRItnE749Q
jtq+ffvw4cOJKCJzVVaCubm5hYXFsWPH+vTp891338nqS/wrc1Lms1QqlUqlNBqtQ4cOu3fvVlFR
afg9v181kv82ysr1CmkVFdi2DVIpOBxcvYrcXAAgRqq0taGjA6B+cKy4GGZmkJODsfFbRXE46NAB
AFRUYGkJBgPa2uByUVqKv/5CRUW93GczQqfTXV1d6+rqampqcnNzW05JZNCgQQD09PTu37/f7MN3
RNSUSCQ0Gq24uLgD8SWStDpvnnpycnLu7u7R0dGvXr2KjIwcOHCgnp4egEGDBt24cUMqlU6dOpXH
4929e3fQx8Vpx44dm5aWFhcXl5+ff+nSpdOnT7+TwM3Nbffu3bt379bU1JTdZLPZYrE4OTn50aNH
jfJ+woQJ165dS0xMzM3NjY6OTkhIePr0qZ+fH5/PB6CiopKbm1tdXS0Wi4njFT78FVCphLD5uXPn
KioqPpiGGDFTUlKaPn16VlbWqFGjnjx5cufOnbi4uNra2qEfObvRyclJIBBERUXl5+ffvn374MGD
jaodyX+G3FxERCArC1VVEIvBYMDAAN9/j8WLsXgx9PU/kMXKCjExePIE169/lomsLMjJYcUKDB78
gRmgJvP3339fuHChqKjo0aNHWVlZDZttM1JSUnL06NG8vLwXL15cuXKlJWSejYyMsrOzk5OTnzx5
8vDhw++++67ZTZB8DjRLS8vRo0cDoNFo/fv35/P5J06c0NHRWbJkiZaWFgBVVVWBQODk5DRs2DAK
hdKpU6exY8fKyckJhUKJROLs7Eyn0wUCAYVCGT58uLGxsa2t7c2bN69cuUKj0RwcHFgsVkVFhaOj
4ztv+gAuXLiQn58/adIkOzu79PT0ysrKLl26WFhY2NnZFRYWDhkyREdHRyqVlpSUODg4sNlsBQWF
IUOGAKiuriY6W1ZWVqampmfPnr1165aurm6vXr2oVKrMq/bt26empnK5XBsbm+LiYgcHBy0trbKy
MgsLC2IYt7S0tGvXrnZ2dhYWFnfu3FFVVTUwMOjTp4++vr5IJCImrgBUVlYaGRn169fP3t6ex+Pl
5OSMGDGiU6dOcXFxBQUFgYGBPXv2lEgkPB7P0dFRSUlJLBbX1tY6OTl17NixT58+iYmJFy5cqK6u
dnJyUlZWLiwstLe3J8bEZV618l+dpHW4du2apaWlhoYGk4miIhw9itu38f33cHSEjg60tbF3L1JT
4egIVVVUVaFrVwCoqICtLbp0weXLePAAPXrA1hayaVDiUwA8Hjp3BpMJgQAcDmxs8Po1Tp2CkREM
DWFlhZoaWFpCIAAxZ3Hs2DGipb9z/WmYTGZiYuKRI0fy8vImTZr0+Yc3Z2Rk1NTUWFtbf05iGo2W
lZV1+PDhR48eOTk5DRw48DOtfH5FFBQULCwsDh06lJycHBAQ8Pkr4mQmLly4cKfbHXA+Mx/JG0xP
m3p6eAI4duzY5ypJNztZWVmBgYFKSkp79uxpfeskJK3Ahg0b4uPj/fz8Pkd8veUoLS0NCAgoKSm5
ePEicYdUH2iCieXLl4clh6FxK6tJAGAwe/CBvQfQKCXpZmf//v2WlpZ+fn5t5QAJSUszd+5c2Q64
NoRYJN3WXnz1LF++fDmWt7UXXz30mpqaV69etb5h2etPm1gnIfmWaYVWX1RUVFpa2tJWWqEibfWE
/E9SU1NDz8jICA0NbWtPSEhIWo9WaPUvXryora0tLCxsUSutUBHyCdmMZGRk0K2trYODg9vaExIS
ktbj1atXLd3qW2cupxUq0gomvh1evXpFbg0hISEhIWkl2lIwaN26dY8ePdq/f//nJI6MjAwPD796
9WpLe0VC0lwUFhYWFRXp6Oh8yXaW8HD0749OnRqXq64O+flgsxEaivnzRWlpaUwms1NjSwEA1NTU
5OTk6OnpyTaAtwRCoTAvL09RUbGFtv4AqK2tzc7OlkqlhoaGDTd6fybr1q3be2cvmnWb7TdCf83+
2//cTly3ZcgpLCzMysr6zMRlZWUZGRkt6Q4JSTOzffv28vLyMWPGqKtrPn6MCxdQXQ1ra9jb4/NP
NOZywec32rRYjNRU9OiB/HwQ6rdxcXHx8fGNLgiIjo4+evTo7NmzBw8e3ITsn8nNmzePHDliZGS0
cOHCliifz+fv2rXr9evXVCpVWVl55syZjY06hYWFT9Y8IZWkm4DRNCPZ9ZuQI5VKHz58+Ndff5WV
lTGZzClTpvTu3fvkyZNhYWG7d+8uLS319fWNioqi0+ne3t4LFixQVlb29vb29/dPS0vLz893dXWd
Nm1adXV1aGhoampqXV2dra2tv79/VVVVnz59vLy8iouL5eXlGypJy3j9+nVwcHB+fj6bzV6+fLmR
kVHHjh23b9/u4OBQVVXVtWvXffv2ESmFQuHx48c3b948Z86cgoKCw4cPOzs7//333zo6OosWLdLS
0nr58mV4ePirV6+kUqmHh4eLi0tjJcpJSJqRGTNmmJubZ2Rg1y6MGwcOBw8eIC0NPXqgtBTZ2ZCX
h6kpKBSkpYFKBZ8PAwOoqUEsxvPnEIlQVfVWgenpYDBQWQltbUilKCqCsjIMDUGhoKAABQWQl4eZ
GWg0WFjUZ+FwOIsXL26stIcMFxcXHo/3ZV/DP2NnZycvL3/t2rUWKj8zM7O4uHjRokVMJnPjxo0P
Hz7s1atXC9ki+QRvyXouWLDA3Nw8PDx83759v/zyS3R0tJGR0evXr1NTU7Oysh48eHDnzh0Wi1VW
Vqavr19UVJSZmammprZly5YtW7YEBQVNmzbt2LFjx44di4iIYDAYEyZM0NbWHjRoUGZmpkQi2bBh
g/xHDglRVFScPXu2ioqKj4/Pn3/+uX79+hcvXhB6l1KpNDMzk5D1FIlEBw4cIJSkXV1d165d++rV
qwEDBnh5efn6+u7evTsoKGj16tU8Hm/Hjh0ZGRnjxo1r165dz549W+erJCH5GLW1EAqhowNDw/pI
wOVi61awWMjLw4QJ6NYNHh4YPx48HphMrFyJK1dw8iR0dXHpEhoe+TRpEoYOhVSKrCwYGEBZGS9f
Yto0MJmIiQGDgexsjB4NW1v8/nszKEkDUFNTYzSvatuHUFJSasJg1+fD5XJ1dHQUFBQoFIqJiUl+
fn7L2SL5BG+FnPj4+B9//FFBQWHo0KFz5swpKiqytLRUU1O7f/9+amqqoaFhXFyctra2np5ep06d
ioqKALi5ucnLy5uZmZWVlQG4ePFifn7+smXLKBQKh8MhbgJwcnIi4k1ISMgff/wB4NatWzLTJ0+e
PHr0KJvNfvTo0TudkobKteXl5atWrRo5cuSkSZOIM2bU1dV79uxJo9GsrKyuXr0aFBR08eJFVVXV
GTNmSKVSfX39mpqalvvuSEg+k06d8MMPCAlBZSWsreHlhSdPUFoKDw+UlODAAXTrBnNzzJ4NKhXE
9ujjx7FsGVRV6w8+kKGtjdmzwWZj5kx4eqJTJxw/jseP4eYGFxdUV8PMDNHR9aI4JDKkUqlMSFem
X0zS+rwJOVQqVUlJqbKyEkBlZSWbzWYwGHJycn379r1w4UJFRYWfn19UVJS8vPyoUaNkgeGd1x8V
FRUrK6vw8HDZGQSEkjSh3AygT58+RJaGkmvEUW9BQUF+fn5isRgAhUIhFJ1LS0sbFr548eKtW7fG
xsa6ubkBEIvFNTU18vLyNTU1hEUVFRUXF5cVK1bQaLTm/q5ISJqInBycnODkhJoa7NmDy5ehro6S
EqSmAoCbGwAoKICQXyfesgjlNAYD78zZy8mBaDpyctDUBJUKNhs1NcjIwIEDMDCAUIiPiNN+0xBv
wBKJhE6nFxQUdO7cua09+kZ5E3JYLNacOXMiIyPZbHZMTIyvr6+xsTGAYcOGbdy40crKyt/f/+jR
o48ePQoPD/9YcTNnzpwyZUpoaKiNjU1OTo6qqmrv3r0bJujZs+f7I10WFhbp6enR0dEPHz4kfgoD
Bw48duyYgoLCpUuXZMkYDIavry8xMF1QUMDn84uKivbu3Ut0j1avXg0gKCho27ZtR44cUVZWfvLk
yeDBg23J9z2StiY7G5GRsLAAnY7sbFhZwcgIxsZo3x4Ayss/kGXIEGzaBDOzdwfWPgaPh7o6mJnh
wYNmdj41NTUtLa2iosLAwKAlNJ4JXr58ee/evczMzMTEROKQrebF1NT05MmThw4dYjKZOTk5np6e
zW6C5HN4E3JoNNqsWbO6d++elZXl7u7ev39/DocDwNraOiwsrF27dlpaWuvXr+dyucRSS3Nz87Cw
MGKAy8bGJiwsjLi5e/fulJSUgoICIyMjYtQrLCzM+J1DPwAAHh4exIGYISEhN2/eVFFRWbt2LTGe
+9dff929e5fL5U6YMMHMzMzc3FxHR0dFRYVOp7u7u6urq5eWlr548UJTU7Nr164vX77cuHEjMRno
7u5uamr6+PHjkpKSAQMGkBLlJP8GdHUxdCgeP4ZUijFjYG0NOh3TpuHmTVCpGDQIdDomTapPTBzB
7O6OCxdQW4vly9863UB2QPP48fUdIEtL8PnQ14dAgNxc2Nujb1+wWPDygqIixo//Uufz8/OJJl9c
XNxyIae0tFQqlfbo0SMnJ6clQo6SktJPP/10+fJlsVg8Z84cVVXVZjdB8jm0mZL0l7N8+fKYmJiU
lJS2doSE5MMcPHjw5MmTEyZM+DcoSXM4HNn4BKkk3QQT4eHhJy6dAKVFrf036d6p+4oVK9C2StJf
zsiRI7t169bWXpCQfBRPT89/wwAOqSTdLEydOnWqrI9J0lToeXl5MTExbe1G0/mqnSchaRNaodUn
JSXxeDylz9/y2iRaoSJf+xPyX0VeXh5dIpEIBIK29oSEhKT1aIVWLxKJRCJRS1tphYqQT8hmRCKR
/A/SMSAQ20e4uwAAAABJRU5ErkJggg==

------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://robotframework.org/robotframework/latest/images/remote.png

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

------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE----
Content-Type: text/html
Content-ID: <frame-1700EB8A83C9236F287DF4A5E39F54E7@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body></body></html>
------MultipartBoundary--nm0izgFbEJdJjUaK0bKHy7OrlLoXhvyWB7NaAAnNhE------
