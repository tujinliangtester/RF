官网：
https://robotframework.org/#documentation


学习进度：
http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#demonstrations
2.1.3   Supported file formats
Plain text format

2.1.4   Rules for parsing the data
Dividing test data to several rows

Variable number of arguments
一边学习还是应该一边进行练习

Named arguments example

quickstart:
User keywords

公众号：技术大全
robotframework接口设计规范
	1.用例目录结构规则
	  最多3层
	  大的产品模块
	  第2/3层可以根据产品应用模块或接口url来定（暂用url来定吧）
	  
	2.接口命名规则
	  接口部分url+接口方法类型
	  如：json/v2/cdn/user/getUserInfo 命名为：
		  user_getuserinfo_get
		  
	3.用例命名规则
	  Class_01：表示常规经典只用例，为最常用的数据
	  Field_序号_结果： 结果可能包括：错误码；Null，data
	  Bussiness_序号： 验证业务逻辑
	  Safe_序号：安全方面的校验
  
	4.用例标签或分类
		1.按照环境划分：online-线上；test-测试；general-预发布；dev-开发
		2.用例编写者
		3.按照特性：如每日巡检的主流程main标签等
	 
	5.用例编写规范
		1.公共方法类和公共用例的脚本，需要每句注解
		2.接口定义方面需要有属于某个版本的需求和用途，修改时需要记录原因及版本、作用
		3.测试用例对业务用例需要注解其验证点
		4.接口请求公共字段放在公共方法中
	  
	6.公共方法
		单独抽离到公共方法层，不要与用例层混合，可以用产品和方法来命名
  
  
接口项目分层及通用控制方式
	接口项目分层
		1.项目结构分离
		2.接口业务分离
			将测试数据与测试业务分离，通常，一个业务关键字的动作序列不会经常变更，变更的是数据
			其实这里可能就是，关键字与用例分离，用例与具体的数据分离，用例中的数据可以用变量代替，或者用函数将数据传给用例
		3.公共方法数据分离
			公共方法：提供各个不同项目接口之间调用的公共方法，如数据加密、解密，接口数据校验、接口统计等
			主配置文件：主要记录不同环境的访问地址，关键字的访问地址通过变量来控制
			数据控制文件：暂时没懂此意义
		
	通用控制方式
		没太看懂

编写接口测试及断言
	前提需要接口说明文档
	1.分析接口文档
	2.设计接口用例
	3.编写接口用例
		数据准备，即入参
		构造请求，可能会涉及重定向、加密、解密等
		响应断言
	4.接口断言如何写
		正常code断言
			should contain "code":${expected}
		异常code、msg断言
			should contain "code":${expected}
			should contain "msg":${msg}
		接口数据断言
			shouldStringNotBeEmpty ${}
			should be true
			should contain
			
		小技巧：
		某些场景无需比对具体数值，只需大于0或非空等；
		针对返回字段较多的，可以写一个公共数据递归校验方法；


官方的用例设计规范：
    简介：
    1.最最重要的是，让用例尽可能的简单易懂


Writing Maintainable Automated Acceptance Tests/编写可维护的自动验收测试
http://dhemery.com/pdf/writing_maintainable_automated_acceptance_tests.pdf
    决定自动化测试的成败，很大程度上取决于可维护性。
    使代码难以更改的两个关键因素：
        附带的细节
            因此，第一步就是隐藏细节，以便更容易的看到测试的本质。需要将细节隐藏到关键字中。
                尝试着问自己，如果自己对系统的实现一无所知，将如何编写脚本用例？
                可以理解为，每一步就是我们的用例，但每一步具体怎么操作，封装到关键字中
        重复
            当重复步骤，以及重复步骤序列时，维护成本会提高
            有两种方式，一种是通过提取关键字的方式，另外一种是利用模板
        命名
            将参数变量化，这样避免了硬编码，维护成本会降低







robotframework
    1.提示关键字不存在：
        好像找到规律了，
            1.只要在库文件中，导入了自己添加的py文件，就会提示找不到关键字
            2.连有些三方库都不行。。。，比如xlrd, xlwt,openpyxl,自行安装的库应该都不行...
                哎呀，用subprocess都不行。。。。这。。。。可能是因为路径的原因，
                算了，放弃excel，改用txt依然可以进行（后续再进行）
        这个问题需要尽快解决，否则的话，一是脚本实现会额外增加可能，二是无法接入appium和selenium，在涉及支付等情况时，是无法避免的（或者找前端？）
        好像已经找到原因了，但是还需要进行一下验证，就是项目目录中不能带有中文，否则就会找不到，已经证实，确实是这样的

    2.暂定所有的测试都在类生产环境，等以后有需要再考虑切换到其他环境，并相应的进行配置方面的优化
    
    3.注意：RF自带有正则表达式匹配
        ${order_no}=    should match regexp     ${res}      order_no":"S\\d+
        但其中的 \ 需要是 \\
        另外，对于金额等，需要匹配小数 \\d+.\\d+

    4.需要想办法将数据准备等初始化操作也进行自动化，或所有的用例都能用同一个手动的初始化，这个问题好像不是很好处理，尤其是我们使用微信的情况，可能还是需要借助UI自动化、
        前端交互、sql处理等。
    5.特殊字符：
        空格      ${SPACE}
        空格变量    ${EMPTY}
    6.设置变量：
        Set Global Variable

        使用范围：在所有测试套件中都可以使用该关键字定义的变量。
        Set Suite Variable

        使用范围：使用此关键字设置的变量在当前执行的测试套件的范围内随处可用。

        Set Test Variable

        使用范围：使用此关键字设置的变量在当前执行的测试用例的范围内随处可用

        Set Variable

        使用范围：该关键字主要用于设置标量变量。此外，它可用于将包含列表的标量变量转换为列表变量或多个标量变量。建议在创建新列表时使用创建列表。使用此关键字创建的变量仅在创建它们的范围内可用
    7.if
        run keyword if  +条件+关键字

    7.5 for循环
        @{tmp_list}=    evaluate  list(${dic}[data][fleetCards])
         :FOR    ${userLevel}    IN   @{tmp_list}
         \    log   ${userLevel}
         :FOR   ${num}   IN RANGE  130
         \    log   ${userLevel}

         注意，这里的in后面接的，需要是列表，如果返回的是字典内部包含列表的，需要用evaluate  list 进行显示转化

    8.相等判定
        RF的相等，仍然需要进行整型、浮点的转换等
        字符串的相等，单独写的方法用python进行，得到boole值然后再到robotframework中用==进行判定

    9.注意，可以在RF中导入包，如下，在最后一个位置是包

        字符串转json
        ${dic}=     evaluate  json.loads(u'${res}')   json
        log     ${dic}[data]
    10.数据类型
        一定要用@{}来存储列表，否则RF会认为只是一个字符串变量
        字典仍然可以用 ${}来存储
        从服务器响应中获取值时，最好先变成json或字典，然后再用键值对去取值
    11.可以直接执行python语句：evaluate
        ${growth_value_add_exp}=   evaluate    int(${org_oil_litre})
    12.自定义关键字可以返回值，但必须显示给出：
        return from keyword    ${res}
    13.可以在一个txt或robot文件中创建关键字，然后再在另外的用例文件中引入
        Resource          resource.robot
    14.robot参数
        重跑失败用例  robot -R output.xml  interface\OilSite\SubCard
        指定用例    robot  --test  create_limits_money_per_day  interface\OilSite\SubCard

    15.python在计算浮点数相减时会导致精度丢失，可以使用bigdecimal，但为了简便，可以直接相减保留两位小数，如果为0，则认为相等
        ${change_num}=      evaluate   round(${coin_balance_add_exp}-${coin_balance_add_real},2)
        should be equal as numbers     ${change_num}    0

        ps：should be equal as  有多种选择，有int  numbers（会忽略精度带来的影响）  string 可以进行相应的使用
    16.赋值
        set_test_variable(self, name, *values):
    17.注意，RF是开源的，可以在项目中查看各种库的源码，理解实现及调用原理
        关键字：
            系统关键字，包括RF官方自带的，以及第三方系统的
            用户关键字，自己用python实现的，或调用其他关键字组织成新的关键字
            可以将功能实现成关键字，然后在用例中直接调用关键字就可以了（必要的时候，传参即可，业务、处理等细节尽量不要在用例中出现）
            所以，在实现自己的关键字时，尽量不要出现其他代码逻辑，直接调用系统的、三方的、或自己用python代码实现的关键字即可
            所以，首先应该去学习、了解官方及第三方的关键字，必要时再自己用python实现关键字；最后再调用这些关键字形成业务关键字，并在用例中调用
            一定要转换一下思想，不要把自己的关键字或用例，用RF整得太复杂，如果比较复杂的，应考虑直接调用关键字或用python来实现

    18.web自动化
        库 seleniumLibrary
    19.查找库或关键字顺序：
        RF标准库，RF额外库，seleniumLibrary，自己用python实现关键字



RobotFrameworkUserGuide学习
    2.1.2   测试数据模块（test data section）
        Settings
        Variables
        Test Cases
        Tasks
        Keywords
        Comments
    2.1.3   文件格式
        txt和robot
            一行一行的解析，当一行过长时，可以用 (...) 进行换行
            如果是non-ASCII characters，必须用UTF-8 encoding进行保存
            resource files建议用.resource作为后缀
        tsv
        reStructuredText (reST)  类似于plain text markup syntax
    2.1.4   解析数据规则
        会忽略以下的数据：
            任何在test data section之前的数据
            Comments中的数据
            空行
            一行中最后的空格，除非是转义过的 \
            单个\，如果不是用来转义，则会忽略
            #之后的，相当于注释
        这些被忽略的数据，如果需要在报告中显示，可以用documentation or other metadata，也可以调用关键字Log or Comment输出到log中

        转义
            \可以转义，${EMPTY} and ${SPACE}也可以用作转义
            空元素：可以用\ 后面不接东西  或  ${EMPTY} 表示
    2.2 创建测试数据
        基础语法
        测试用例内部也可以有settings
            用中括号表示，如 [Documentation]    [Tags]  [Setup], [Teardown] [Template]  [Timeout]
    2.2.2 参数
        参数可以没有，也可以有，参数也可以有默认值
        参数个数必须一致，否则会报错
        位置参数，必须在有默认值的参数的前面，否则会报错
        注意，这里说的参数都是指的编程语言中，函数的参数处理，RF中也有办法给参数默认值的，但是，一般情况下，不要用RF来实现某些功能，最好是
            先找官方库，再找扩展库，最后用编程语言来实现，RF本身应尽量简单
    2.2.3 失败
        只有当用例定义了失败，用例才可能会返回失败，同时，即使失败也会执行test teardown；另外，也可以用continuable failures来处理即使失败也继续执行当前用例
        错误信息也可以定义，当使用了continuable failures时，可能会有多种失败信息，
    2.2.4 用例名称和注释
    2.2.5 打标签
    2.2.7 测试模板
        这是将关键字驱动转变为数据驱动，其实就是同一个测试流程，会有不同的参数的情况
        调用时，一行就是一次，参数依次获取
        嵌入式参数，有点过于复杂，暂时不看
        如果用例中使用了for循环，则，模板是用在每一次的for循环中，并且循环中的这一行作为参数进行执行
    2.2.8 不同的用例风格
        关键字驱动
            工作流的测试用例，比如登录流程、订单流程等；通常的结构是先初始化系统，然后进行某些操作，最后再验证；流程分析、状态迁移设计的用例应该很适合
        数据驱动
            通常是调用抽离出的RF关键字，或者用模板，通过不同的输入或输出来执行相同流程的测试；判定表、等价类边界值等设计的用例应该很适合
        行为驱动
            一般是用在ATDD等开发模式，其中Given, When, Then, And and But 这些前缀会进行忽略；这个一般用的比较少
    2.3 tasks
        这个一般用不到，暂时先不看
    2.4 test suites
        这个目前也不需要，直接用项目的目录结构来进行
    2.5 test libraries
    2.5.1
        库名称是大小写敏感，空格敏感，当库位于某个包中时，需要将包名也一并引用
        库的名称 以及  库的参数  都可以用变量指定
    2.5.2
        通过库名称或路径，都可以导入
        库名称，会查找类名称和模块名称，查找的路径是 module search path，一些安装的模块会在这个路径中，但也有一些可能不在，需要单独进行配置
        路径，可以使用基于当前文件的相对路径，好处是可以不用设置module search path，但需要注意的是，此时需要把文件的扩展名加上 .py 等；
            缺点是模块名（文件名）必须与类名称一致
    2.5.3 库别名
    2.5.4 标准库
        具体有待学习
    2.5.5 扩展库
        开源社区有许多库，具体可以查找http://robotframework.org
        自己创建的库，后续会有介绍

    2.6.2 变量，大小写敏感，忽略空格和下划线
        纯量变量
        列表变量
        字典变量
        环境变量
    2.7.6
        关键字返回值
            [Return]
            Return From Keyword
            Return From Keyword If

    2.8.2 变量文件，可以动态创建，可以包含任何对象。有两种创建方式
        直接创建
            直接创建时，可以直接用key=value，可以是任何类型的对象，包括列表、字典等
        通过一个特殊的函数获取
    3.1.6   创建启动脚本
    3.5.5   配置module search path
        python解析器的module search path，有自己的标准库，同时也有第三方安装模块的目录，所以，通过python自己打包安装的系统，无需额外配置
        PYTHONPATH，可以提供额外的查找路径，可以在环境变量中配置，也可以在启动脚本中设定
        --pythonpath (-P) 命令行选项中，可以指定module search path，同时，可以指定多个路径，用冒号隔开，注意对符号的转义
        sys.path 可以动态指定


    4.测试库
        可以创建测试库，RF内核自带了很多的库，但有时候也需要自己创建，这其实就是扩展了吧？所以，其他任何的单独py文件，其实都是没有必要的？
        测试库分为三种：
            静态库
            动态库：动态组成、查找并执行某些静态函数
            混合库
        这三种都是基于静态库的，
    4.1.2 创建测试库
        库可以是python的模块，或class，当模块和class的名称相同时，可以直接导入名称即可，如果不同时，需要导入模块名.class名
        测试库也可以提供参数，在Library    导入时，后面跟上参数即可，RF在解析时，将库名称和参数传给该库的构造器，
        测试库的 scope
            RF会尝试保持各个测试之间相互独立，默认情况下，会在各个测试用例间独立创建测试库的对象，但有些时候没有必要这样做，或者需要在各个用例间共享同一个对象
            可以指定测试库的ROBOT_LIBRARY_SCOPE，可以是TEST CASE，TEST SUITE，GLOBAL
             这块暂时先不看，后续继续学习
        测试库的版本  这块暂时先不看，后续继续学习
        文档格式 这块也暂时不看
    4.1.3 创建静态关键字
        构成关键字的函数
            关键字是模块或类的公共方法，
            在python模块中，导入的其他模块函数,也可以被当作关键字，可能是因为该函数可以被找到并执行；
            一种简单的避免导入函数成为关键字的做法是，只导入模块，并直接用模块.函数， 如  threading.current_thread() ；或者可以导入函数，但是取一个带下划线开头的别名；
            更直接的办法是，利用 module level  __all__  ，如，__all__ = ['example_keyword', 'second_example']，只有该列表里的函数可以被作为关键字
        关键字的名字
            是大小写不敏感，且空格和下划线会被忽略
            可以通过robot.api.deco.keyword 来对函数指定RF的关键字名称，如：（一般不需要这样做）
                from robot.api.deco import keyword

                @keyword('Login Via User Panel')
                def login(username, password):
                    # ...
        关键字参数
            一般都是有确定个数的关键字
            也可以是动态个数的关键字，另外还有python中带两个星号的参数(**kwargs)，后续需要用到了再详细了解
        参数类型
            变量可以包含任何对象
            关键字也可以将参数转换成需要的类型，python函数内部可以指定参数类型，也可以用装饰器@keyword decorator
            也可以根据关键字对应函数中，参数的默认值，对参数进行类型转换
            支持参数转换的表格，如果在使用时遇到了再进行查找
        装饰器
            官方文档说，使用装饰器可能会带来一些问题，要么就不用，要么就使用手动装饰器（这部分暂时先不看吧）
        嵌入式的关键字名称
            暂时先不管
    4.1.4 在RF中使用
        这里介绍了一些异常、错误处理，日志打印等，暂时先不管
        关键字返回，测试库可以返回，数量可以是单个也可以是多个，返回类型不限
        测试库与RF只能在主线程上进行交互（线程这块也先不看）
    4.1.5 发布测试库
        在测试库中，应尽量使用python官方推荐的方式对类、函数等进行注释；当然，也可以使用RF自带的Libdoc进行注释
        测试库需要自测
            建议使用单元测试进行；也可以使用RF来进行测试， BuiltIn library这个库中，有很多可以达到这个目的，如Run Keyword And Expect Error
        打包库
            对于简单的测试库，可以将文件拷贝到某个地方，然后配置module search path
            对于较负责的测试库，应进行打包，对于pip等工具对包进行安装后，会自动进入module search path
                python打包：https://packaging.python.org/.（无法打开）自行百度
                    https://blog.csdn.net/qq_16912257/article/details/80160639
                    注意，其中，python setup.py install执行之后，其实就已经在本地安装好了
                删除包：
                    1.pip uninstall xxx  可以删除
                    2.去C:\ProgramData\Anaconda3\Lib\site-packages这个路径下，（包安装的原始地址）

                    把tornado-4.5.1-py3.6.egg-这个文件和tornado文件夹干掉就好了
    5.2Test data documentation tool (Testdoc)
        好像暂时用不到

How to write good test cases using Robot Framework学习
    最重要的是，保持用例尽可能的简单，并且容易维护




由于后台是php，无法直接通过接口进行操作，所以，后台用selenium来进行操作，相关的断言结合用例，接口和selenium都需要进行
因此，在整体架构及目录组织上，需要将ui和接口区分开


Python
    注意，在跨文件调用时，被调用的文件在执行时，涉及文件地址，是根据当前运行目录来拼接的
        一种办法是使用绝对路径
        其他办法是调用sys.path来进行拼接，
        可以用subprocess
        注意，subprocess在执行时，如果指定stdout=subprocess.PIPE，则调用的函数需要将结果print 即用屏幕标准输出，这样才能捕获结果
            所以，需要严格控制print，否则会出错

    注意，requests在发起请求时，header和body都必须是字典类型，所以在传入参数时需要传入字典形式的字符串
    str='foo%20%5B12%5D'编码foo [12]:

    %20 is space
    %5B is '['
    and %5D is ']'
    所以，如果发起请求时，参数中带有[]，系统会自动转换为%5B  %5D等，而在传参时，仍然要用[ 或 ] ！

    url中的特殊字符解析还原地址：https://blog.csdn.net/superit401/article/details/78052965
    注意，如果url编码后有 \\"	%22，需要处理为\\"  这样在json.loads()时才不会报错





小工具
    filddler截包时，表单数据可能会整合成字符串，可以用common里面的方法进行转换

selenium
    经过试验，多个调用selenium的robot文件可以共用同一个浏览器
    但是现在的问题是，如何在需要的时候单独调用某个robot？
    这里想到一种方式是用py来调用robot，感觉好像整的好复杂？robot-py-robot?试验证明，这样执行会报错，找不到文件？
    之前的尝试中，robot-py-py，在后面调用的py时，会出现各种包不存在的异常，搞不明白呢
    需要重新尝试robot-py-py这种方式



遗留问题：
    1.如何用robotframework将接口和ui自动化结合起来



    496,497,498,499,500,501